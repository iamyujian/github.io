<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue基础语法(一)</title>
    <url>/2020/03/06/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<img src="https://i.loli.net/2020/03/06/DBnjol4tUpivVON.jpg"  />

<center> 
  Vue 的简介和一些基本语法
</center>

<a id="more"></a>

<h1 id="Vue-简介"><a href="#Vue-简介" class="headerlink" title="Vue 简介"></a>Vue 简介</h1><h2 id="Vue-简单认识"><a href="#Vue-简单认识" class="headerlink" title="Vue 简单认识"></a>Vue 简单认识</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUv" title="https://cn.vuejs.org/v2/guide/">Vue 官网<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>Vue（读音 /vjuː/，类似于 view）是一个渐进式的框架，什么是渐进式？ </p>
<ul>
<li>渐进式意味着你可以将 Vue 作为应用的一部分嵌入其中，带来更丰富的交互体验</li>
<li>或者如果你希望将更多的业务逻辑使用Vue实现，那么Vue的核心库以及其生态系统（比如：Core+Vue-router+Vuex）也可以满足你各种各样的需求</li>
</ul>
</li>
<li><p>Vue 有很多特点和Web开发中常见的高级功能</p>
<ul>
<li>解耦视图和数据</li>
<li>可复用的组件</li>
<li>前端路由技术</li>
<li>状态管理</li>
<li>虚拟DOM</li>
</ul>
</li>
</ul>
<h2 id="Vue-安装"><a href="#Vue-安装" class="headerlink" title="Vue 安装"></a>Vue 安装</h2><p>安装Vue的方式有很多：</p>
<h3 id="方式一：直接CDN引入"><a href="#方式一：直接CDN引入" class="headerlink" title="方式一：直接CDN引入"></a>方式一：直接CDN引入</h3><p>你可以选择引入开发环境版本还是生产环境版本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方式二：下载和引入"><a href="#方式二：下载和引入" class="headerlink" title="方式二：下载和引入"></a>方式二：下载和引入</h3><ul>
<li>开发环境：<span class="exturl" data-url="aHR0cHM6Ly92dWVqcy5vcmcvanMvdnVlLmpz" title="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js<i class="fa fa-external-link"></i></span></li>
<li>生产环境：<span class="exturl" data-url="aHR0cHM6Ly92dWVqcy5vcmcvanMvdnVlLm1pbi5qcw==" title="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="方式三：NPM-安装"><a href="#方式三：NPM-安装" class="headerlink" title="方式三：NPM 安装"></a>方式三：NPM 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue&lt;a name="YFJI3"&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Vue-初体验"><a href="#Vue-初体验" class="headerlink" title="Vue 初体验"></a>Vue 初体验</h2><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.div'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'Hello Vue!'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="展示列表"><a href="#展示列表" class="headerlink" title="展示列表"></a>展示列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in NBAStars"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.div'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      NBAStars: [<span class="string">'林书豪'</span>, <span class="string">'杜兰特'</span>, <span class="string">'詹姆斯'</span>, <span class="string">'欧文'</span>, <span class="string">'库里'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'increment'</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'decrement'</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.div'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      increment: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.counter++</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      decrement: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.counter--</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue-中的-MVVM"><a href="#Vue-中的-MVVM" class="headerlink" title="Vue 中的 MVVM"></a>Vue 中的 MVVM</h2><h3 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是MVVM</h3><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNTg5NTAxNw==" title="https://segmentfault.com/a/1190000015895017">MVVM框架理解及其原理实现<i class="fa fa-external-link"></i></span></p>
<p><img src="https://i.loli.net/2020/03/06/KeslVLEkiv3zqNJ.png" alt=""></p>
<img src="https://i.loli.net/2020/03/06/7MmG3LKhQYBOZn2.png" alt="MVVM实例" style="zoom: 50%;" />

<ul>
<li>View 层：视图层，在前端开发中，通常就是 DOM 层，主要的作用是给用户展示各种信息</li>
<li>Model 层：数据层，数据可能是我们固定的死数据，更多的是来自我们服务器，从网络上请求下来的数据</li>
<li>VueModel 层：视图模型层，视图模型层是 View 和 Model 沟通的桥梁，一方面实现了 Data Binding（数据绑定），将 Model 的改变实时的反应到 View 中，另一方面它实现了 DOM Listener（DOM监听），当 DOM 发生一些事件（点击、滚动、touch 等）时，可以监听到，并在需要的情况下改变对应的 Data</li>
</ul>
<h3 id="MVC-和-MVVM-的区别"><a href="#MVC-和-MVVM-的区别" class="headerlink" title="MVC 和 MVVM 的区别"></a>MVC 和 MVVM 的区别</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iMGFhYjFmZmFkOTM=" title="https://www.jianshu.com/p/b0aab1ffad93">MVC 和 MVVM 的区别<i class="fa fa-external-link"></i></span></p>
<ul>
<li>MVC</li>
</ul>
<p><img src="https://i.loli.net/2020/03/06/Ew2Xbm8LdVxvl57.png" alt=""></p>
<ul>
<li>MVVM</li>
</ul>
<p><img src="https://i.loli.net/2020/03/06/63j9OPAkTyeCbGY.png" alt=""></p>
<h3 id="Vue-的生命周期"><a href="#Vue-的生命周期" class="headerlink" title="Vue 的生命周期"></a>Vue 的生命周期</h3><img src="https://i.loli.net/2020/03/06/U1wRBiGFyEZTLe4.png" alt="Vue生命周期" style="zoom: 33%;" />


<h1 id="Vue-基础语法"><a href="#Vue-基础语法" class="headerlink" title="Vue 基础语法"></a>Vue 基础语法</h1><h2 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h2><p>插值：将值插入到模板的内容中</p>
<h3 id="Mustache"><a href="#Mustache" class="headerlink" title="Mustache"></a>Mustache</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插到标签中 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用了两个Mustach --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 也可以是表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter*2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.div'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      name: <span class="string">'VueJS'</span>,</span></span><br><span class="line"><span class="actionscript">      firstName: <span class="string">'Yuanyang'</span>,</span></span><br><span class="line"><span class="actionscript">      lastName: <span class="string">'Liao'</span>,</span></span><br><span class="line">      counter: 100</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>在某些情况下，我们可能不希望界面中 Mustach 中的值随意的跟随改变，就可以使用一个 Vue 的指令：<code>v-once</code></p>
<ul>
<li>该指令后面不需要跟任何表达式</li>
<li>该指令表示元素和组件只渲染一次，不会随着数据的改变而改变</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!-- 只会渲染一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'Liao'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>某些情况下，我们从服务器请求到的数据本身就是一个 HTML 代码，如果我们直接通过 <code>{ { } }</code> 来输出，会将 HTML 代码也一起输出，但如果希望按照 HTML 格式进行解析，并且显示对应的内容，可以使用 <code>v-html</code> 指令</p>
<p><code>v-html</code> 指令后面往往会跟上一个 string 类型，会将 string 的 html 解析出来并且进行渲染!</p>
<h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><ul>
<li>v-text 作用和 Mustache 比较相似，都是用于将数据显示在界面中</li>
<li>v-text 通常情况下，接受一个 string 类型</li>
<li>v-text 会覆盖原来的内容 不够灵活</li>
</ul>
<h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p><code>v-pre</code> 用于跳过这个元素和它子元素的编译过程，显示原本的 Mustache 语法，将代码原封不动的解析出来</p>
<h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p>将未解析出来的代码块进行隐藏，但基本不会用到</p>
<h2 id="绑定属性-v-bind"><a href="#绑定属性-v-bind" class="headerlink" title="绑定属性 v-bind"></a>绑定属性 v-bind</h2><h3 id="v-bind-基本使用"><a href="#v-bind-基本使用" class="headerlink" title="v-bind 基本使用"></a>v-bind 基本使用</h3><p>Mustache 指令主要作用是将值插入到我们模板的内容当中，但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定，比如：</p>
<ul>
<li>动态绑定 a 元素的 href 属性</li>
<li>动态绑定 img 元素的 src 属性</li>
</ul>
<p>这时，可以使用 <code>v-bind</code> 指令来动态绑定属性，<code>v-bind</code> 用于绑定一个或多个属性值，或者向另一个组件传递 props值</p>
<h3 id="v-bind-语法糖"><a href="#v-bind-语法糖" class="headerlink" title="v-bind 语法糖"></a>v-bind 语法糖</h3><p>v-bind 有一个对应的语法糖（简写方式），在开发中，通常会使用语法糖的形式，因为这样更加简洁简写方式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgSrc"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"aHref"</span>&gt;</span>Vue.js官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>即省略 v-bind，直接写 <code>:</code></p>
<h3 id="v-bind-动态绑定-class"><a href="#v-bind-动态绑定-class" class="headerlink" title="v-bind 动态绑定 class"></a>v-bind 动态绑定 class</h3><p>很多时候，我们希望动态的来切换 class，比如：</p>
<ul>
<li>当数据为某个状态时，字体显示红色</li>
<li>当数据另一个状态时，字体显示黑色</li>
</ul>
<p>绑定 class 有两种方式：</p>
<ul>
<li>对象语法</li>
<li>数组语法</li>
</ul>
<ol>
<li>对象语法</li>
</ol>
<p>对象语法的含义是：class 后面跟的是一个对象对象语法有下面这些用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用法一：直接通过&#123;&#125;绑定一个类</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': isActive&#125;"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用法二：也可以通过判断，传入多个值</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': isActive, 'line': isLine&#125;"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用法三：和普通的类同时存在，并不冲突</span><br><span class="line">注：如果isActive和isLine都为true，那么会有title/active/line三个类</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"&#123;'active': isActive, 'line': isLine&#125;"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用法四：如果过于复杂，可以放在一个methods或者computed中</span><br><span class="line">注：classes是一个计算属性</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有时候，如果 <code>v-bind:class=&quot;{active:isActive,line:isLine}&quot;</code> 中 class 的项太多，可以定义一个方法，将其放到 methods 中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;h2 class="title" v-bind:class="&#123;active:isActive,line:isLine&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">v-bind:class</span>=<span class="string">"getCLasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"btnClick"</span>&gt;</span>改变颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'YuanyangLiao'</span>,</span></span><br><span class="line"><span class="actionscript">      isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      isLine: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      btnClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.isActive = !<span class="keyword">this</span>.isActive</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      getCLasses: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          active: <span class="keyword">this</span>.isActive,</span></span><br><span class="line"><span class="actionscript">          line: <span class="keyword">this</span>.isLine</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>数组语法</li>
</ol>
<p>数组语法的含义是：class 后面跟的是一个数组数组语法有下面这些用法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用法一：直接通过&#123;&#125;绑定一个类</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">"['active']"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用法二：也可以传入多个值</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> '<span class="attr">line</span>']"&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用法三：和普通的类同时存在，并不冲突</span><br><span class="line">注：会有title/active/line三个类</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> '<span class="attr">line</span>']"&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">用法四：如果过于复杂，可以放在一个methods或者computed中</span><br><span class="line">注：classes是一个计算属性</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"classes"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">v-bind:class</span>=<span class="string">"[active,line]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">v-bind:class</span>=<span class="string">"getCLasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"btnClick"</span>&gt;</span>改变颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'YuanyangLiao'</span>,</span></span><br><span class="line"><span class="actionscript">      active: <span class="string">'active'</span>,</span></span><br><span class="line"><span class="actionscript">      line: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      btnClick: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.isActive = !<span class="keyword">this</span>.isActive</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      getCLasses: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> [<span class="keyword">this</span>.active, <span class="keyword">this</span>.line]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="案例：点击当前项变色"><a href="#案例：点击当前项变色" class="headerlink" title="案例：点击当前项变色"></a>案例：点击当前项变色</h3><p><img src="https://i.loli.net/2020/03/06/xp84R9IBlONhH1f.png" alt="图片.png"></p>
<h3 id="v-bind-动态绑定-style"><a href="#v-bind-动态绑定-style" class="headerlink" title="v-bind 动态绑定 style"></a>v-bind 动态绑定 style</h3><p>我们可以利用 <code>v-bind:style</code> 来绑定一些 CSS 内联样式</p>
<p>在写CSS属性名的时候，比如 <code>font-size</code>，可以使用驼峰式 (camelCase) <code>fontSize</code>，或短横线分隔 (kebab-case，记得用单引号括起来) <code>&#39;font-size&#39;</code></p>
<p>绑定class有两种方式：</p>
<ul>
<li>对象语法</li>
<li>数组语法</li>
</ul>
<ol>
<li>对象语法</li>
</ol>
<p>style 后面跟的是一个对象类型</p>
<ul>
<li>对象的 key 是 CSS 属性名称</li>
<li>对象的 value 是具体赋的值，值可以来自于 data 中的属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 50px 必须加上单引号 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize:'50px'&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- finalSize、finalColor当成一个变量使用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize:finalSize + 'px',color:finalColor&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'YuanyangLiao'</span>,</span></span><br><span class="line">      finalSize: 100,</span><br><span class="line"><span class="actionscript">      finalColor: <span class="string">'skyblue'</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>数组语法</li>
</ol>
<p>style 后面跟的是一个数组类型</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"[baseStyles,baseStyles2]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'YuanyangLiao'</span>,</span></span><br><span class="line">      baseStyles: &#123;</span><br><span class="line"><span class="actionscript">        color: <span class="string">'red'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      baseStyles2: &#123;</span><br><span class="line"><span class="actionscript">        fontSize: <span class="string">'50px'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="计算属性-computed"><a href="#计算属性-computed" class="headerlink" title="计算属性 computed"></a>计算属性 computed</h2><p>在模板中可以直接通过插值语法显示一些 data 中的数据，但是在某些情况下，可能需要对数据进行一些转化后再显示，或者需要将多个数据结合起来进行显示，这时可以使用计算属性 computed</p>
<h3 id="计算属性-computed-的基本使用"><a href="#计算属性-computed-的基本使用" class="headerlink" title="计算属性 computed 的基本使用"></a>计算属性 computed 的基本使用</h3><p>比如：现在有 firstName 和 lastName 两个变量，需要显示完整的名称，可能直接使用空格将其隔开：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者使用加号拼接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + '' +lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是如果多个地方都需要显示完整的名称，我们就需要写多个 <code> </code> 或 <code>undefinedundefined</code> ，使代码看上去很不优雅</p>
<p>这时，可能想到，将<code>undefinedundefined</code> 封装为一个函数，通过函数的方式调用，但其实最佳方案是使用计算属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 方式1 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 方式2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;firstName + ' ' + lastName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 方式3 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 方式4 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      firstName: <span class="string">'Yuanyang'</span>,</span></span><br><span class="line"><span class="actionscript">      lastName: <span class="string">'Liao'</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      fullName() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="actionscript">      getFullName: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>计算属性中也可以进行一些更加复杂的操作，比如下面计算图书价格的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>图书总价为：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      books: [&#123;</span><br><span class="line">        id: 1001,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'计算机操作原理'</span>,</span></span><br><span class="line">        price: 108</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: 1002,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'JavaScript高级程序设计'</span>,</span></span><br><span class="line">        price: 99</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: 1003,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'计算机网络'</span>,</span></span><br><span class="line">        price: 28</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: 1004,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'数据结构'</span>,</span></span><br><span class="line">        price: 46</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: 1005,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'C语言'</span>,</span></span><br><span class="line">        price: 48</span><br><span class="line">      &#125;, ]</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="actionscript">      totalPrice: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> result = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="keyword">this</span>.books) &#123;</span></span><br><span class="line"><span class="actionscript">          result += <span class="keyword">this</span>.books[i].price</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> result</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算属性的-setter-和-getter"><a href="#计算属性的-setter-和-getter" class="headerlink" title="计算属性的 setter 和 getter"></a>计算属性的 setter 和 getter</h3><p>每个计算属性都包含一个 getter 和一个 setter，getter 用来读取值，setter 用来设置值（但 setter 不常用）</p>
<p><img src="https://i.loli.net/2020/03/06/GCUjroHit2DJuYm.png" alt="图片.png"></p>
<h3 id="couputed-与-methods-的区别"><a href="#couputed-与-methods-的区别" class="headerlink" title="couputed 与 methods 的区别"></a>couputed 与 methods 的区别</h3><p>我们可能会考虑这样的一个问题：   </p>
<ul>
<li>methods 和 computed 看起来都可以实现我们的功能，那么为什么还要多一个计算属性这个东西呢？</li>
<li>原因：计算属性会进行缓存，如果多次使用时，计算属性只会调用一次</li>
</ul>
<p><strong>computed 区别于 methods 的核心</strong></p>
<p>在官方文档中，强调了computed 区别于 methods 最重要的两点</p>
<ol>
<li>computed 是属性调用，而 methods 是函数调用</li>
<li>computed 带有缓存功能，而 methods 没有</li>
</ol>
<ul>
<li>computed 定义的方法，我们是以属性访问的形式调用的，<code>{ {computedTest} }</code>，但是 methods 定义的方法，我们必须要加上<code>()</code>来调用，如”<code>{ { methodTest() } }</code>“</li>
<li>我们可以将同一函数定义为一个方法而不是一个计算属性，两种方式的最终结果确实是完全相同的然而，不同的是计算属性是基于它们的响应式依赖进行缓存的，只在相关响应式依赖发生改变时它们才会重新求值，这就意味着只要 text 还没有发生改变，多次访问 getText 计算属性会立即返回之前的计算结果，而不必再次执行函数，而方法只要页面中的属性发生改变就会重新执行</li>
<li>对于任何复杂逻辑，都应当使用计算属性</li>
<li>computed 依赖于 data 中的数据，只有在它的相关依赖数据发生改变时才会重新求值</li>
</ul>
<h2 id="事件监听-v-on"><a href="#事件监听-v-on" class="headerlink" title="事件监听 v-on"></a>事件监听 v-on</h2><h3 id="v-on-基本使用"><a href="#v-on-基本使用" class="headerlink" title="v-on 基本使用"></a>v-on 基本使用</h3><p>在前端开发中，我们需要经常和用户进行交互，这个时候，就必须监听用户发生的事件，比如点击、拖拽、键盘事件等，在 Vue 中监听事件使用 v-on 指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 常规写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 语法糖形式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      increment() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.counter++</span></span><br><span class="line">      &#125;,</span><br><span class="line">      decrement() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.counter--</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当通过 methods 中定义方法，以 <code>@click</code> 调用时，需要注意参数问题：</p>
<ul>
<li>如果该方法不需要额外参数，那么方法后的 () 可以不添加，但如果方法本身中有一个参数，那么会默认将原生事件 event 参数传递进去</li>
<li>如果需要同时传入某个参数，同时需要 event 时，可以通过 <code>$event</code> 传入事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1.事件调用的方法没有参数：可以省略() --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;button @click="btnClick()"&gt;按钮1&lt;/button&gt;</span></span><br><span class="line"><span class="comment">&lt;button @click="btnClick"&gt;按钮2&lt;/button&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 2.事件调用的方法有参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick()"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- undefined --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick(123)"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 123 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- MouseEvent对象：vue会默认将浏览器产生的event对象作为参数传到方法中 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 3.在事件定义时，即需要event对象，又需要其他参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick(123,$event)"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      btnClick(event, num) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(event, num);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-on-修饰符"><a href="#v-on-修饰符" class="headerlink" title="v-on 修饰符"></a>v-on 修饰符</h3><p>在某些情况下，我们拿到 event 的目的可能是进行一些事件处理，vue 提供了修饰符来帮助我们方便的处理一些事件：</p>
<ul>
<li><code>.stop</code> ：调用 <code>event.stopPropagation()</code></li>
<li><code>.prevent</code> ：调用 <code>event.preventDefault()</code></li>
<li><code>.{keyCode | keyAlias}</code> ：只当事件是从特定键触发时才触发回调</li>
<li><code>.native</code> ：监听组件根元素的原生事件</li>
<li><code>.once</code> ：只触发一次回调</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1 .stop:停止冒泡 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"divClick"</span>&gt;</span>divdiv</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 2. .prevent:阻止默认行为 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"baidu"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> @<span class="attr">click.prevent</span>=<span class="string">"submitClick"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 3. .enter:监听enter按键 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"enterClick"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 4. .once:点击回调只会触发一次 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"btnClick2"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      btnClick() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"btnClick..."</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      divClick() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"divClick..."</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      submitClick() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"submitClick..."</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      enterClick() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"enterClick..."</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      btnClick2() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"btnClick2..."</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环</h2><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>v-if、v-else-if、v-else 这三个指令与 JavaScript 的条件语句 if、else、else if 类似</p>
<p>vue 的条件指令可以根据表达式的值在 DOM 中渲染或销毁元素或组件</p>
<p><img src="https://i.loli.net/2020/03/06/AnYpagPLfSZs2Nk.png" alt="图片.png"></p>
<p>*<em>v-if *</em></p>
<p>v-if 后面的条件为 false 时，对应的元素以及其子元素不会渲染，也就是不会有对应的标签出现在 DOM 中</p>
<p><strong>v-show</strong></p>
<p>v-show 的用法和 v-if 非常相似，也用于决定一个元素是否渲染</p>
<p><strong>v-show 和 v-if 的区别</strong></p>
<ul>
<li>v-if 是真正的条件渲染，会确保在切换过程中，条件块内的事件和子组件被销毁和重建（组件被重建将会调用created）</li>
<li>v-show 不论如何，都会被渲染在 DOM 中，当条件为真值时，将会修改条件的 css 样式</li>
<li>v-if 有更高的切换开销，v-show 有更高的初始渲染开销</li>
<li>v-if 是动态的向 DOM 树内添加或者删除 DOM 元素，v-show 是通过设置 DOM 元素的 display 样式属性控制显隐</li>
<li>v-if 切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件，v-show 只是简单的基于 css 切换</li>
<li>v-if 是惰性的，如果初始条件为假，则什么也不做，只有在条件第一次变为真时才开始局部编译，v-show 是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且 DOM 元素保留</li>
<li>v-if 有更高的切换消耗，v-show 有更高的初始渲染消耗</li>
<li>v-if 适合运营条件不大可能改变，v-show适合频繁切换</li>
</ul>
<p><strong>v-if 和 v-show 都可以决定一个元素是否渲染，那么开发中我们如何选择呢？</strong></p>
<p>v-if 当条件为 false 时，压根不会有对应的元素在 DOM 中v-show 当条件为 false 时，仅仅是将元素的 display 属性设置为 none 而已</p>
<p>结论：</p>
<ul>
<li>当需要在显示与隐藏之间切换很频繁时，使用 v-show </li>
<li>当只有一次切换时，通过使用 v-if</li>
</ul>
<h3 id="案例：切换用户账号"><a href="#案例：切换用户账号" class="headerlink" title="案例：切换用户账号"></a>案例：切换用户账号</h3><p>这里面的<code>key=&quot;username&quot;</code>是在切换中清空输入框，不加的话只会切换，输入的内容不会清空</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isUser"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"用户账号"</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"用户邮箱"</span> <span class="attr">key</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"isUser = !isUser"</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      isUser: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="循环-v-for"><a href="#循环-v-for" class="headerlink" title="循环 v-for"></a>循环 v-for</h3><p>当我们有一组数据需要进行渲染时，我们就可以使用 v-for 来完成</p>
<p>v-for 的语法类似于 JavaScript 中的 for 循环：<code>v-for=&quot;item in items&quot;</code></p>
<p>通过索引值修改数组中的元素不是响应式的，即数据修改了，但是界面不会更新</p>
<h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.遍历数组的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in NBAStars"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.遍历数组的索引和值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in NBAStars"</span>&gt;</span>&#123;&#123;index+1&#125;&#125;.&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      NBAStars: [<span class="string">'林书豪'</span>, <span class="string">'杜兰特'</span>, <span class="string">'詹姆斯'</span>, <span class="string">'欧文'</span>, <span class="string">'库里'</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.遍历对象的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in info"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.遍历对象的键和值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,key) in info"</span>&gt;</span>&#123;&#123;key&#125;&#125; : &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.遍历对象的索引、键和值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,key,index) in info"</span>&gt;</span>&#123;&#123;index+1&#125;&#125;. &#123;&#123;key&#125;&#125; : &#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      info: &#123;</span><br><span class="line"><span class="actionscript">        name: <span class="string">'LiaoYuanyang'</span>,</span></span><br><span class="line">        age: 18,</span><br><span class="line"><span class="actionscript">        gender: <span class="string">'男'</span>,</span></span><br><span class="line">        height: 1.75</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/06/3JOBrYow7jkxbHA.png" alt="图片.png"></p>
<h4 id="组件的-key-属性"><a href="#组件的-key-属性" class="headerlink" title="组件的 key 属性"></a>组件的 key 属性</h4><p>官方推荐我们在使用 v-for 时，给对应的元素或组件添加上一个 <code>:key</code> 属性</p>
<p>为什么需要这个 key 属性呢，其实和 Vue 的虚拟 DOM 的 Diff 算法有关系，这里借用 React’s diff algorithm 中的一张图来简单说明一下：</p>
<p><img src="https://i.loli.net/2020/03/06/5ajmSBLv9rT1g2l.png" alt="图片.png"></p>
<p>当某一层有很多相同的节点时，也就是列表节点时，我们希望插入一个新的节点</p>
<p><img src="https://i.loli.net/2020/03/06/e7yd5S2Tjb1KXJa.png" alt="图片.png"></p>
<p>我们希望可以在 B 和 C 之间加一个 F，Diff 算法默认执行起来是这样的：即把 C 更新成 F，D 更新成 C，E 更新成 D，最后再插入 E：</p>
<p><img src="https://i.loli.net/2020/03/06/XDf21J7MvYTnGlU.png" alt="图片.png"><br>是不是很没有效率？</p>
<p>所以我们需要使用 key 来给每个节点做一个唯一标识，Diff 算法就可以正确的识别此节点，找到正确的位置区插入新的节点，所以，key 的作用主要是为了高效的更新虚拟 DOM</p>
<p><img src="https://i.loli.net/2020/03/06/P18Frwxb7lVnUDO.png" alt="图片.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in info"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤器-filters"><a href="#过滤器-filters" class="headerlink" title="过滤器 filters"></a>过滤器 filters</h3><h3 id="案例：图书购物车"><a href="#案例：图书购物车" class="headerlink" title="案例：图书购物车"></a>案例：图书购物车</h3><p><img src="https://i.loli.net/2020/03/06/ZSCwlJcNKVvkAhM.png" alt="图片.png"></p>
<p>index.html:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./bootstrap-3.3.7-dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./bootstrap-3.3.7-dist/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.app</span> <span class="selector-class">.table</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.app</span> <span class="selector-class">.totalPrice</span> &#123;</span></span><br><span class="line">            width: 800px;</span><br><span class="line">            margin: 20px auto;</span><br><span class="line">            padding: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"books.length"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>书本价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>购买数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in books"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.date&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- &lt;td&gt;&#123;&#123;getFinallPrice(item.price)&#125;&#125;&lt;/td&gt; --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.price | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> @<span class="attr">click</span>=<span class="string">"decrement(index)"</span> <span class="attr">:disabled</span>=<span class="string">"item.count &lt;=1"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;item.count&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> @<span class="attr">click</span>=<span class="string">"increment(index)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span> @<span class="attr">click</span>=<span class="string">"removeClick(index)"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"totalPrice"</span>&gt;</span>总价格：&#123;&#123;totalPrice | showPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"totalPrice"</span> <span class="attr">v-else</span>&gt;</span>购物车为空！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>main.js:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'.app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        books: [&#123;</span><br><span class="line">            id: <span class="number">1001</span>,</span><br><span class="line">            name: <span class="string">'计算机操作原理'</span>,</span><br><span class="line">            date: <span class="string">'2020-02-12'</span>,</span><br><span class="line">            price: <span class="number">108</span>,</span><br><span class="line">            count: <span class="number">1</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="number">1002</span>,</span><br><span class="line">            name: <span class="string">'JavaScript高级程序设计'</span>,</span><br><span class="line">            date: <span class="string">'2020-02-12'</span>,</span><br><span class="line">            price: <span class="number">99</span>,</span><br><span class="line">            count: <span class="number">1</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="number">1003</span>,</span><br><span class="line">            name: <span class="string">'计算机网络'</span>,</span><br><span class="line">            date: <span class="string">'2020-02-12'</span>,</span><br><span class="line">            price: <span class="number">28</span>,</span><br><span class="line">            count: <span class="number">1</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="number">1004</span>,</span><br><span class="line">            name: <span class="string">'数据结构'</span>,</span><br><span class="line">            date: <span class="string">'2020-02-12'</span>,</span><br><span class="line">            price: <span class="number">46</span>,</span><br><span class="line">            count: <span class="number">1</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            id: <span class="number">1005</span>,</span><br><span class="line">            name: <span class="string">'C语言'</span>,</span><br><span class="line">            date: <span class="string">'2020-02-12'</span>,</span><br><span class="line">            price: <span class="number">48</span>,</span><br><span class="line">            count: <span class="number">1</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 普通方法处理价格</span></span><br><span class="line">        getFinallPrice(price) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'￥'</span> + price.toFixed(<span class="number">2</span>)</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        increment(index) &#123;</span><br><span class="line">            <span class="keyword">this</span>.books[index].count++</span><br><span class="line">        &#125;,</span><br><span class="line">        decrement(index) &#123;</span><br><span class="line">            <span class="keyword">this</span>.books[index].count--</span><br><span class="line">        &#125;,</span><br><span class="line">        removeClick(index) &#123;</span><br><span class="line">            <span class="keyword">this</span>.books.splice(index, <span class="number">1</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        totalPrice() &#123;</span><br><span class="line">            <span class="keyword">let</span> totalPrice = <span class="number">0</span></span><br><span class="line">                <span class="comment">// 方式一：for (let i in ...)</span></span><br><span class="line">                <span class="comment">/*  for (let i in this.books) &#123;</span></span><br><span class="line"><span class="comment">                     totalPrice += this.books[i].price * this.books[i].count</span></span><br><span class="line"><span class="comment">                 &#125; */</span></span><br><span class="line">                <span class="comment">// 方式二：for (let item of ...)</span></span><br><span class="line">                <span class="comment">/* for (let item of this.books) &#123;</span></span><br><span class="line"><span class="comment">                    totalPrice += item.price * item.count</span></span><br><span class="line"><span class="comment">                &#125; */</span></span><br><span class="line">                <span class="comment">// 方式三：高阶函数reduce：汇总数组内的元素</span></span><br><span class="line">            <span class="keyword">this</span>.books.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue, book</span>) </span>&#123;</span><br><span class="line">                totalPrice += book.price * book.count</span><br><span class="line">            &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> totalPrice</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    filters: &#123;</span><br><span class="line">        <span class="comment">// 过滤器方法处理价格</span></span><br><span class="line">        showPrice(price) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'￥'</span> + price.toFixed(<span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="表单绑定-v-model"><a href="#表单绑定-v-model" class="headerlink" title="表单绑定 v-model"></a>表单绑定 v-model</h2><h3 id="v-model-基本使用"><a href="#v-model-基本使用" class="headerlink" title="v-model 基本使用"></a>v-model 基本使用</h3><p>表单控件在实际开发中是非常常见的，特别是对于用户信息的提交，需要大量的表单，vue 中使用 v-model 指令来实现表单元素和数据的双向绑定</p>
<p><img src="https://i.loli.net/2020/03/06/CDy6IJQ7ZVPj3dr.png" alt="图片.png"></p>
<p>案例解析：当我们在输入框输入内容时，因为 input 中的 v-model 绑定了 message，所以会实时将输入的内容传递给 message，message 发生改变，当 message 发生改变时，因为使用了 Mustache 语法，所以将 message 的值插入到 DOM 中，所以 DOM 会发生响应的改变，所以通过 v-model 实现了双向绑定</p>
<h3 id="v-model-原理"><a href="#v-model-原理" class="headerlink" title="v-model 原理"></a>v-model 原理</h3><p>v-model 其实是一个语法糖，它的背后本质上是包含两个操作：</p>
<ol>
<li>v-bind 绑定一个 value 属性</li>
<li>v-on 指令给当前元素绑定 input 事件</li>
</ol>
<p>也就是说：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>等同于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"message"</span> @<span class="attr">input</span>=<span class="string">"message = $event.target.value"</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="v-model-结合-radio-使用"><a href="#v-model-结合-radio-使用" class="headerlink" title="v-model 结合 radio 使用"></a>v-model 结合 radio 使用</h3><p><img src="https://i.loli.net/2020/03/06/UotMTugHVZYkhXK.png" alt="图片.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span>男</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span>女</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>您选择的性别是：&#123;&#123;gender&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      gender: <span class="string">'男'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="v-model-结合-checkbox-使用"><a href="#v-model-结合-checkbox-使用" class="headerlink" title="v-model 结合 checkbox 使用"></a>v-model 结合 checkbox 使用</h3><ul>
<li><strong>checkbox 单选框</strong></li>
</ul>
<p><img src="https://i.loli.net/2020/03/06/9rjRgIlZ21OfJTP.png" alt="图片.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- checkbox单选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"licence"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"isAgree"</span> <span class="attr">id</span>=<span class="string">"licence"</span>&gt;</span>同意协议</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>您的选择是：&#123;&#123;isAgree&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!isAgree"</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      isAgree: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>checkbox 多选框</strong></li>
</ul>
<p><img src="https://i.loli.net/2020/03/06/8zVeHDlvP7bFsYA.png" alt="图片.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>请选择您的爱好<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"sing"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">id</span>=<span class="string">"sing"</span> <span class="attr">value</span>=<span class="string">"唱"</span>&gt;</span>唱</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jump"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">id</span>=<span class="string">"jump"</span> <span class="attr">value</span>=<span class="string">"跳"</span>&gt;</span>跳</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"rap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">id</span>=<span class="string">"rap"</span> <span class="attr">value</span>=<span class="string">"rap"</span>&gt;</span>rap</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"basketball"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> <span class="attr">id</span>=<span class="string">"basketball"</span> <span class="attr">value</span>=<span class="string">"篮球"</span>&gt;</span>篮球</span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>您的爱好是：&#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      hobbies: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="v-model-结合-select-使用"><a href="#v-model-结合-select-使用" class="headerlink" title="v-model 结合 select 使用"></a>v-model 结合 select 使用</h3><p><img src="https://i.loli.net/2020/03/06/OY5t6KmxJrwq9Fz.png" alt="图片.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 选择一个值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>请选择您喜欢的水果：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"橘子"</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"西瓜"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"榴莲"</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>您选择的水果是：&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 选择多个值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"橘子"</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"西瓜"</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"榴莲"</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>您选择的水果是：&#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      fruit: <span class="string">'苹果'</span>,</span></span><br><span class="line">      fruits: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="v-model-修饰符"><a href="#v-model-修饰符" class="headerlink" title="v-model 修饰符"></a>v-model 修饰符</h3><ul>
<li><p>lazy 修饰符</p>
<ul>
<li>默认情况下，v-model 是在 input 事件中同步输入框的数据，也就是说，一旦有数据发生改变，对应的 data 中的数据就会自动发生改变</li>
<li>lazy 修饰符可以让数据在失去焦点或者回车时才会更新</li>
</ul>
</li>
<li><p>number 修饰符</p>
<ul>
<li>默认情况下，在输入框中无论输入的是字母还是数字，都会被当做字符串类型进行处理，但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理</li>
<li>number 修饰符可以让在输入框中输入的内容自动转成数字类型</li>
</ul>
</li>
<li><p>trim 修饰符</p>
<ul>
<li>如果输入的内容首尾有很多空格，通常我们希望将其去除</li>
<li>trim 修饰符可以过滤内容左右两边的空格</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1.lazy修饰符：失去焦点或按下回车才更新 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2.number修饰符：将输入框中的内容自动转为number --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;age&#125;&#125;---&#123;&#123;typeof age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 3.trim修饰符：过滤内容左右两边的空格 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>你输入的名字是:&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'.app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      name: <span class="string">'YuanyangLiao'</span>,</span></span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/06/nCPOAEDif23rdwJ.png" alt="图片.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>常用命令行记录</title>
    <url>/2020/02/28/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/4Bn7EUJHgXcqKa9.png
" style="zoom: 90%;"/>

<p>命令行工具学习</p>
</center>
<a id="more"></a>

<h1 id="window-常用命令"><a href="#window-常用命令" class="headerlink" title="window 常用命令"></a>window 常用命令</h1><ul>
<li><p>创建文件夹：<code>mkdir 文件名称</code></p>
</li>
<li><p>创建新文件或者目录：<code>New-Item</code></p>
</li>
<li><p>删除文件：<code>remove-item</code> </p>
<ul>
<li><code>rm -rf 文件名或目录</code>：强制删除一个非空目录或者一个文件</li>
</ul>
<blockquote>
<p>文件名称(别名：ri、rd、erase、rm、rmdir、del)</p>
<pre><code>eg : remove-item c:/scripts/*</code></pre></blockquote>
<ul>
<li>排除删除：<code>-exclude</code><br>eg:remove-item c:/scripts/* -exclude <em>.wav(保留</em>.wav文件)</li>
<li>选择删除：<code>-include</code><br>eg:remove-item c:/scripts/* -include .wav,.mp3(仅仅删除.wav,.mp3的文件)</li>
<li>混合使用：<br>eg：remove-item c:/scripts/* -include <em>.txt –exclude *test</em></li>
</ul>
</li>
</ul>
<h1 id="pandoc"><a href="#pandoc" class="headerlink" title="pandoc"></a>pandoc</h1><ul>
<li>md 转 html 格式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -c 代表使用 css 文件渲染</span></span><br><span class="line">pandoc a.md -o a.html -c Github.css</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --self-contained：将任何的外部文件嵌入至输出的文件中(文档中包含多个本地图片等文件)，形成一个独立的 HTML 文档。这样传送资料时只传送一个文件就可以了，就像分享 PDF 文档一样方便。</span></span><br><span class="line"> pandoc demo.md -o demo.html -c style.css</span><br></pre></td></tr></table></figure>

<ul>
<li>转 word 格式</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> md 转</span></span><br><span class="line">pandoc a.md -o a.docx</span><br><span class="line"><span class="meta">#</span><span class="bash"> html 转</span></span><br><span class="line">pandoc http://gnss.help/2017/06/12/pandoc-install-usage/ -o page.docx</span><br></pre></td></tr></table></figure>

<ul>
<li><p>md 转 PDF</p>
<p>安装 LaTex</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pandoc  a.md-o a.pdf --latex-engine=xelatex -V mainfont=heiti\</span><br></pre></td></tr></table></figure>

<ul>
<li>转 md</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> word 转</span></span><br><span class="line">pandoc demo.docx -o demo.md</span><br><span class="line"><span class="meta">#</span><span class="bash"> html 转</span></span><br><span class="line">pandoc http://gnss.help/2017/06/12/pand</span><br></pre></td></tr></table></figure>

<h1 id="非常重要的文件系统命令概览"><a href="#非常重要的文件系统命令概览" class="headerlink" title="非常重要的文件系统命令概览"></a>非常重要的文件系统命令概览</h1><ul>
<li><code>cp, cpi</code>        复制文件或者目录    Copy-Item</li>
<li><code>Dir, ls, gci</code>    列出目录的内容        Get-Childitem</li>
<li><code>type, cat, gc</code>    基于文本行来读取内容    Get-Content</li>
<li><code>gi</code>    获取指定的文件或者目录    Get-Item</li>
<li><code>gp</code>    获取文件或目录的属性    Get-ItemProperty</li>
<li><code>ii</code>    使用对应的默认windows程序运行文件或者目录    Invoke-Item</li>
<li><code>—</code>    连接两个路径为一个路径    Join-Path</li>
<li><code>mi, mv, move</code>    移动文件或者目录    Move-Item</li>
<li><code>ni</code>    创建新文件或者目录    New-Item</li>
<li><code>ri, rm, rmdir,del, erase, rd</code>    删除空目录或者文件    Remove-Item</li>
<li><code>ren</code>    重命名文件或者路径    Rename-Item</li>
<li><code>rvpa</code>    处理相对路径或者包含通配符的路径    Resolve-Path</li>
<li><code>sp</code>    设置文件或路径的属性    Set-ItemProperty</li>
<li><code>Cd,chdir, sl</code>    更改当前目录的位置    Set-Location<ul>
<li>提取路径的特定部分，例如父目录，驱动器，文件名    Split-Path</li>
<li>测试指定的路径是否存在    Test-Pat</li>
</ul>
</li>
</ul>
<h1 id="window下生成文件目录树"><a href="#window下生成文件目录树" class="headerlink" title="window下生成文件目录树"></a>window下生成文件目录树</h1><ol>
<li>命令提示：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tree /?</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>显示当前目录下的目录树(<strong>不显示文件</strong>)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tree</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>递归显示目录结构(<strong>显示文件，常用于项目说明</strong>)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tree &#x2F;F</span><br><span class="line">  &#x2F;A   使用 ASCII 字符，而不使用扩展字符。</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将显示的内容重定向到 txt</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tree &gt; info.txt</span><br><span class="line">tree &#x2F;F &gt; info.txt</span><br></pre></td></tr></table></figure>
<h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><ul>
<li>安装 hexo：<code>npm install -g hexo-cli</code></li>
<li>初始化一个博客：<code>hexo init blog</code></li>
<li>启动本地预览服务：<code>hexo s === hexo server</code>,默认是占用4000端口</li>
<li>新建文章：<code>hexo new 文章标题</code>，会自动将标题生成一级标题</li>
<li>部署：<code>hexo d === hexo deploy</code>===<code>hexo g === hexo generate</code></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP基础</title>
    <url>/2020/02/28/PHP%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/SWfE2B4qoaPFRKx.jpg
" style="zoom: 100%;"/>

<p>PHP 自学笔记</p>
</center>
<a id="more"></a>

<h1 id="PHP基础语法"><a href="#PHP基础语法" class="headerlink" title="PHP基础语法"></a>PHP基础语法</h1><ul>
<li>PHP 脚本可以放在文档中的任何位置。以<code>&lt;?php</code> 开始，以 <code>?&gt;</code>结束。（如果代码段后面没有混编代码，可以不用加<code>?&gt;</code>结尾。</li>
<li>声明变量：<code>$a=5;</code>变量名是区分大小写的。</li>
</ul>
<blockquote>
<p>一般变量和函数都是建议采用 <code>snake_case</code>方式(小写字母下划线），都是小写。</p>
</blockquote>
<h2 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h2><ul>
<li><p>防止嵌套引入过程中的出错，可以使用物理路径而不是使用相对路径。</p>
<blockquote>
<p><code>require_once(dirname(\_FILE\_).&#39;路径&#39;）；</code></p>
<p>include引入方式也是一样</p>
<p>HTML中的根目录是使用/路径</p>
</blockquote>
</li>
<li><p><code>require &#39;file.php&#39;</code></p>
</li>
</ul>
<blockquote>
<p>类似<code>css</code>中的<code>import</code>导入文件</p>
<p>require在每一次调用时都会载入对应的文件</p>
<p>文件错误报错后面的就不再执行</p>
</blockquote>
<ul>
<li><code>require_once &#39;file.php&#39;</code></li>
</ul>
<blockquote>
<p>如果之前载入过就不在执行</p>
</blockquote>
<ul>
<li><code>include &#39;file.php&#39;</code></li>
</ul>
<blockquote>
<p>文件错误报错后面的也能执行</p>
</blockquote>
<ul>
<li><code>include_once &#39;file.php&#39;</code></li>
</ul>
<blockquote>
<p>只载入一次文件，不重复载入</p>
</blockquote>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ul>
<li>PHP有四种不同的变量作用域：local、global、static、parameter。</li>
<li>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字==&gt;<code>global $x,$y;</code><br>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问.</li>
</ul>
<h2 id="输出方式"><a href="#输出方式" class="headerlink" title="输出方式"></a>输出方式</h2><ul>
<li>PHP 中有两个基本的输出方式： <code>echo</code> 和 <code>print</code>。</li>
<li><code>echo &lt;pre&gt;;</code>可以使输出的内容更直观。</li>
</ul>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?php</span></span><br><span class="line">&gt;$a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line">&gt;<span class="keyword">echo</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">&gt;print_r($a);</span><br><span class="line">&gt;<span class="meta">?&gt;</span></span><br><span class="line">&gt;<span class="comment">//输出内容：</span></span><br><span class="line">   <span class="keyword">Array</span></span><br><span class="line">&gt;(</span><br><span class="line">   [<span class="number">0</span>] =&gt; a</span><br><span class="line">   [<span class="number">1</span>] =&gt; b</span><br><span class="line">   [<span class="number">2</span>] =&gt; c</span><br><span class="line">   [<span class="number">3</span>] =&gt; d</span><br><span class="line">&gt;)</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><code>print</code>只能打印出简单类型变量的值（如<code>int</code>和<code>string</code>）。</li>
<li><code>print_r</code>可以打印出复杂类型变量的值（如数组、对象）。</li>
<li><code>printf</code>和<code>sprintf</code>是函数</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">printf(<span class="string">'who am i? my name is %s. I am $d years old'</span>, <span class="string">'zhangsan'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="comment">//结果显示：who am i? my name is zhangsan. I am 18 years old</span></span><br><span class="line"><span class="comment">//结果是一个返回值，值与sprintf相同</span></span><br><span class="line">$res = sprintf(<span class="string">'who am i? my name is %s. I am $d years old'</span>, <span class="string">'zhangsan'</span>, <span class="string">'18'</span>);</span><br></pre></td></tr></table></figure>



<ul>
<li><p><code>var_dump</code>打印出详细信息，显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。</p>
<blockquote>
<p>echo 和 print 区别:</p>
<ol>
<li>echo - 可以输出一个或多个字符串。echo 或 echo()。</li>
<li>print - 只允许输出一个字符串，返回值总为 1。 print 或 print()。</li>
<li>echo输出的速度比print快，echo没有返回值，print有返回值1。</li>
</ol>
</blockquote>
</li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><blockquote>
<p>设置常量，使用define()函数。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">"GREETING"</span>, <span class="string">"欢迎访问 Runoob.com"</span>); </span><br><span class="line"><span class="keyword">echo</span> GREETING;    <span class="comment">// 输出 "欢迎访问 Runoob.com"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>该函数有三个参数:</li>
</ul>
<blockquote>
<p>name：必选参数，常量名称，即标志符。<br>       value：必选参数，常量的值。<br>       case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。（不建议使用）</p>
</blockquote>
<ul>
<li>常量值被定义后，在脚本的其他任何地方都不能被改变,常量默认是全局变量，在整个脚本中都可以使用。</li>
<li>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。</li>
<li>一般程序的配置信息（不会在运行过程中被修改）都会在常量中定义。</li>
<li>建议是<code>SNAKE_CASE</code>命名规则。一般写入一个单独的文件，便于维护。</li>
</ul>
</blockquote>
<h2 id="定界符EOF"><a href="#定界符EOF" class="headerlink" title="定界符EOF"></a>定界符EOF</h2><blockquote>
<p><code>PHP EOF</code>是一种在命令行shell（如<code>sh</code>、<code>csh</code>、<code>ksh</code>、<code>bash</code>、<code>PowerShell</code>和<code>zsh</code>）和程序语言（像<code>Perl</code>、<code>PHP</code>、<code>Python和Ruby</code>）里定义一个字符串的方法。<br><code>PHP</code> 定界符 <code>EOF</code> 的作用就是按照原样，包括换行格式什么的，输出在其内部的东西； </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name=<span class="string">"变量会被解析"</span>;</span><br><span class="line">$a=<span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string"><span class="subst">$name</span>&lt;br&gt;&lt;a&gt;html格式会被解析&lt;/a&gt;&lt;br/&gt;双引号和Html格式外的其他内容都不会被解析</span></span><br><span class="line"><span class="string">"双引号外所有被排列好的格式都会被保留"</span></span><br><span class="line"><span class="string">"但是双引号内会保留转义符的转义效果,比如table:\t和换行：\n下一行"</span></span><br><span class="line"><span class="string">EOF; // 结束需要独立一行且前后不能空格</span></span><br><span class="line"><span class="string">echo <span class="subst">$a</span>;</span></span><br><span class="line"><span class="string">?&gt;  </span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><blockquote>
<p>字符串使用<code>.</code>连接起来。</p>
</blockquote>
<h2 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h2><ul>
<li><code>strlen($string)</code></li>
</ul>
<blockquote>
<p>函数返回字符串的长度（字节数）。中文字符一个占3个字符数，可以使用<code>strlen(&quot;中文字符&quot;,&#39;utf-8&#39;);</code>输出中文数。空格也算长度。</p>
</blockquote>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul>
<li><code>$int=strpos(&quot;asagaab&quot;,&quot;ab&quot;);</code></li>
</ul>
<blockquote>
<p>函数用于在字符串内查找一个字符或一段指定的文本。匹配则返回字符位置，未找到则返回FALSE。</p>
</blockquote>
<ul>
<li><code>stripos($string, $search[,$offset])</code></li>
</ul>
<blockquote>
<p>忽略大小写的去查找。</p>
</blockquote>
<ul>
<li><code>$int=strrpos(&quot;asagaabadfab&quot;,&quot;ab&quot;);</code></li>
</ul>
<blockquote>
<p>在指定字符串中查找目标字符串最后一次出现的位置。</p>
</blockquote>
<ul>
<li><code>strripos($string, $search[, $offset])</code></li>
</ul>
<blockquote>
<p>忽略大小写的去查找最后一次出现的位置。</p>
</blockquote>
<ul>
<li><code>$int=substr_count(&quot;abcdeabcdeablkabd&quot;,&quot;ab&quot;);</code></li>
</ul>
<blockquote>
<p>返回第二个参数字符串在第一个字符串里出现的次数。</p>
</blockquote>
<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><ul>
<li><code>isset()</code></li>
</ul>
<blockquote>
<p>判断一个传入的数据是否被定义</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($string[<span class="string">'hello'</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> $string[<span class="string">'hello'</span>];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'没有'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li><code>empty()</code></li>
</ul>
<blockquote>
<p>判断传入的数据是否为空</p>
<p><code>empty($string[&#39;hello&#39;])</code>相当于 <code>!isset($string[&#39;hello&#39;])</code> ||  <code>$string[&#39;hello&#39;] == false</code>(判断是否为空)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">if</span> (<span class="keyword">empty</span>($string[<span class="string">'hello'</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">'没有'</span>;</span><br><span class="line">&gt;&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> $string[<span class="string">'hello'</span>];</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><ul>
<li><code>$str=implode(&quot;-&quot;,array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;))</code></li>
</ul>
<blockquote>
<p>用第一个参数里的字符串，把后面数组里的每个元素连接起来，返回一个字符串。</p>
</blockquote>
<h2 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h2><ul>
<li><code>$array=explode(&quot;d&quot;,&#39;abcdefg&#39;)</code></li>
</ul>
<blockquote>
<p>把字符串打散为数组。</p>
<p>字符串分割方法，返回一个数组，用第一个参数里的字符分割后面的字符串，指定字符的前后和之间都截取。</p>
<p>如果指定字符在开头或结尾则返回的数组开头或结尾的元素为空字符串。</p>
<p>最后一个数字限制返回数组长度（最后一次分割后余下的字符串不再分割，作为一个整体放在返回数组的最后一个元素中），可不限制，则一直分割下去。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	$str =<span class="string">"a,b,c"</span>;</span><br><span class="line">	print_r(explode(<span class="string">","</span>,$str));<span class="comment">//结果是一个数组</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//输出：Array ( </span></span><br><span class="line">    [<span class="number">0</span>] =&gt; a</span><br><span class="line">    [<span class="number">1</span>] =&gt; b</span><br><span class="line">    [<span class="number">2</span>] =&gt; c  )</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul>
<li><code>$str=ltrim(&quot;a asd &quot;,&quot;a&quot;);</code></li>
</ul>
<blockquote>
<p>剔除字符串左边开头的空格,并返回。如有第二个参数则是剔除左边开头的空格换成剔除第二个参数里的字符串。</p>
</blockquote>
<ul>
<li><code>$str=rtrim(&quot; asd &quot;);</code></li>
</ul>
<blockquote>
<p>剔除字符串右边开头的空格</p>
</blockquote>
<ul>
<li><code>$str=trim(&quot; sdsdfas &quot;,&quot;a&quot;);</code></li>
</ul>
<blockquote>
<p>把第一个字符串两边以第二个参数开头的字符串剔除。如没有第二个参数，默认剔除掉字符串两边开头的空格</p>
</blockquote>
<h2 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h2><ul>
<li><code>$str=substr(&quot;abcdefgh&quot;,0,4);</code></li>
</ul>
<blockquote>
<p>从字符串第一个参数里的指定位置开始取多长（多少个）字符，字符串中第一个字符位置从0算。如果第二个参数为负则从字符串结尾倒数第几个开始取多长的字符串。结尾最后一个字符算-1，截取方向总是从左到右</p>
</blockquote>
<ul>
<li><code>$str=strstr(&quot;sdafsdgaababdsfgs&quot;,&quot;ab&quot;);</code></li>
</ul>
<blockquote>
<p>截取返回参数一中从左至右第一个参数二至参数一最后一个字符的字符串</p>
</blockquote>
<ul>
<li><code>$str=strrchr(&quot;sdafsdgaababdsfgs&quot;,&quot;ab&quot;);</code></li>
</ul>
<blockquote>
<p>截取返回参数一中从左至右最后一个参数二至参数一最后一个字符的字符串</p>
</blockquote>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ul>
<li><p><code>$str=str_replace(&quot;a&quot;,&quot;&quot;,&quot;abcabcAbca&quot;);</code></p>
</li>
<li><p><code>$str=str_ireplace(&quot;a&quot;,&quot; &quot;,&quot;abcabcAbca&quot;);</code>不区分大小写</p>
</li>
</ul>
<blockquote>
<p>将第三个参数的第一个参数字符串用参数二字符串替换</p>
</blockquote>
<h2 id="转大小写"><a href="#转大小写" class="headerlink" title="转大小写"></a>转大小写</h2><ul>
<li><code>$str=strtoupper(&quot;sdaf&quot;);</code></li>
</ul>
<blockquote>
<p>返回括号里字符串的字符全部大写的字符串。</p>
</blockquote>
<ul>
<li><code>$str=ucfirst(&quot;asdf&quot;);</code></li>
</ul>
<blockquote>
<p>将括号里第一个字符串变成大写后返回。</p>
</blockquote>
<ul>
<li><code>ucwords($str);</code></li>
</ul>
<blockquote>
<p>每一个单词的首字母转大写</p>
</blockquote>
<ul>
<li><code>strtolower($str);</code></li>
</ul>
<blockquote>
<p>字母转小写</p>
</blockquote>
<h2 id="不转义字符"><a href="#不转义字符" class="headerlink" title="不转义字符"></a>不转义字符</h2><ul>
<li><code>$str=htmlentities(&quot;&lt;br/&gt;&quot;);</code></li>
</ul>
<blockquote>
<p>用echo等将括号里字符串打印在网页上时原汁原味打印出括号里的字符串，包括标签字符。</p>
</blockquote>
<h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><ul>
<li><code>$str=addcslashes(&quot;abcdefghijklmn&quot;,&quot;akd&quot;);</code></li>
</ul>
<blockquote>
<p>将参数二中每一个字符在参数一中相同字符前加”\“。</p>
</blockquote>
<ul>
<li><code>str_pad(string,length,pad_string,pad_type)</code></li>
</ul>
<blockquote>
<p>填充字符串到另一个字符串中</p>
<p><em>string</em>：必需。规定要填充的字符串。</p>
<p><em>length</em>：必需。规定新的字符串长度。如果该值小于字符串的原始长度，则不进行任何操作。</p>
<p><em>pad_string</em>：可选。规定供填充使用的字符串。默认是空白。</p>
<p><em>pad_type</em>：可选。规定填充字符串的哪边。</p>
<ul>
<li>STR_PAD_BOTH - 填充字符串的两侧。如果不是偶数，则右侧获得额外的填充。</li>
<li>STR_PAD_LEFT - 填充字符串的左侧。</li>
<li>STR_PAD_RIGHT - 填充字符串的右侧。默认。</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?php</span></span><br><span class="line">&gt;$str = <span class="string">"Hello World"</span>;</span><br><span class="line">&gt;<span class="keyword">echo</span> str_pad($str,<span class="number">30</span>,<span class="string">"."</span>);</span><br><span class="line">&gt;<span class="meta">?&gt;</span></span><br><span class="line">&gt;<span class="comment">//输出：Hello World................... </span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="索引数组"><a href="#索引数组" class="headerlink" title="索引数组"></a>索引数组</h2><blockquote>
<p>带有数字索引的数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?php</span> </span><br><span class="line">   <span class="comment">//自动分配索引值的声明方式1</span></span><br><span class="line">$arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</span><br><span class="line">print_r($arr);<span class="comment">//Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c [3] =&gt; d )</span></span><br><span class="line">   <span class="comment">//自动分配索引值的声明方式2</span></span><br><span class="line">$arr2 = <span class="keyword">array</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</span><br><span class="line">print_r($arr2);<span class="comment">//Array ( [0] =&gt; a [1] =&gt; b [2] =&gt; c )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//手动分配索引</span></span><br><span class="line">    $cars[<span class="number">0</span>]=<span class="string">"porsche"</span>;</span><br><span class="line">    $cars[<span class="number">1</span>]=<span class="string">"BMW"</span>;</span><br><span class="line">&gt;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h3><blockquote>
<p><code>count()</code>函数用于返回数组的长度（元素数）：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"porsche"</span>,<span class="string">"BMW"</span>,<span class="string">"Volvo"</span>);</span><br><span class="line"><span class="keyword">echo</span> count($cars);  <span class="comment">//3</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//使用for循环遍历数组</span></span><br><span class="line">&gt;<span class="meta">&lt;?php</span></span><br><span class="line"> $cars=<span class="keyword">array</span>(<span class="string">"porsche"</span>,<span class="string">"BMW"</span>,<span class="string">"Volvo"</span>);</span><br><span class="line"> $arrlength=count($cars);</span><br><span class="line"> <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$arrlength;$i++)&#123;</span><br><span class="line"> <span class="keyword">echo</span> $cars[$i];</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="meta">?&gt;</span><span class="comment">// porsche BMW Volvo</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h2><blockquote>
<p>关联数组是自定义数组的健的数组  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="comment">//创建数组方式</span></span><br><span class="line">&gt;$age = <span class="keyword">array</span>(<span class="string">"a"</span>=&gt;<span class="string">"1"</span>,<span class="string">"b"</span>=&gt;<span class="string">"2"</span>,<span class="string">"c"</span>=&gt;<span class="string">"3"</span>)</span><br><span class="line">&gt;<span class="comment">//或</span></span><br><span class="line">&gt;$age[<span class="string">'a'</span>] = <span class="string">"1"</span>;</span><br><span class="line">&gt;$age[<span class="string">'b'</span>] = <span class="string">"2"</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="遍历数组-1"><a href="#遍历数组-1" class="headerlink" title="遍历数组"></a>遍历数组</h3><blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&gt;<span class="meta">&lt;?php</span></span><br><span class="line">&gt;$age=<span class="keyword">array</span>(<span class="string">"Bill"</span>=&gt;<span class="string">"63"</span>,<span class="string">"Steve"</span>=&gt;<span class="string">"56"</span>,<span class="string">"Elon"</span>=&gt;<span class="string">"47"</span>);</span><br><span class="line">&gt;<span class="keyword">foreach</span>($age <span class="keyword">as</span> $i=&gt;$i_value)&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">'key='</span>. $x .<span class="string">',Value='</span>.$x_value;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="查找-判断"><a href="#查找-判断" class="headerlink" title="查找/判断"></a>查找/判断</h2><ul>
<li><code>$bool = is_array()</code></li>
</ul>
<blockquote>
<p>检测变量是否是数组。</p>
</blockquote>
<ul>
<li><code>array_search(&#39;键值&#39;,&#39;数组&#39;)</code></li>
</ul>
<blockquote>
<p>搜索数组中某个键值，并返回对应的键名（索引）。</p>
</blockquote>
<ul>
<li><code>$bool=in_array(&quot;b&quot;,$arr);</code></li>
</ul>
<blockquote>
<p>判断第二参数的数组元素中是否有第一个参数元素</p>
</blockquote>
<ul>
<li><code>$bool=array_key_exists(&quot;k1&quot;,$arr);</code></li>
</ul>
<blockquote>
<p>判断第二个参数的数组中是否有第一个参数的键值，返回真假。</p>
</blockquote>
<ul>
<li><code>$array=array_keys($arr);</code></li>
</ul>
<blockquote>
<p>返回括号中数组所有键值组成的新数组原数组不改变。</p>
</blockquote>
<ul>
<li><code>$array=array_values($arr);</code></li>
</ul>
<blockquote>
<p>返回原数组中所有元素值组成的新数组，键值从0开始自增，原数组不变。</p>
</blockquote>
<ul>
<li><code>$key=key($arr);</code></li>
</ul>
<blockquote>
<p>返回当前数组指针指向的键值。</p>
</blockquote>
<ul>
<li><code>$value=current($arr);</code></li>
</ul>
<blockquote>
<p>返回当前数组指针指向的元素值。</p>
</blockquote>
<ul>
<li><code>$value=array_pop($arr);</code></li>
</ul>
<blockquote>
<p>返回从数组尾部提取最后一个元素值，并把最后一个元素从原数组中剔除。</p>
</blockquote>
<h2 id="合并-增加"><a href="#合并-增加" class="headerlink" title="合并/增加"></a>合并/增加</h2><hr>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Hello world!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">sayhi(); <span class="comment">// 调用函数</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>函数名能够以字母或下划线开头（而非数字）。</li>
<li>函数名对大小写不敏感。</li>
</ul>
</blockquote>
<h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><ul>
<li><code>time();</code></li>
</ul>
<blockquote>
<p>time()得到的是以秒为单位的时间戳</p>
</blockquote>
<ul>
<li><code>date(&#39;Y-m-d H:i:s&#39;,time());</code></li>
</ul>
<blockquote>
<p>格式化时间</p>
<p>第一个参数是一个时间格式，默认获取的是格林威治时间（比中国少8小时），获取中国时间需要在前面添加一行<code>date_default_timezone_set(&#39;PRC&#39;);</code>来<strong>设置中国时区</strong>。</p>
<p>第二个参数是一个时间戳(默认可省略)。</p>
</blockquote>
<ul>
<li><code>strtotime($string)</code></li>
</ul>
<blockquote>
<p>将一个有格式的时间字符串转化成一个时间戳，可以用来修改一个时间的格式。</p>
</blockquote>
<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><ul>
<li><code>basename()</code>：返回路径中的文件名部分。</li>
<li><code>copy()</code>：复制文件。</li>
<li><code>dirname()</code>：返回路径中的目录名部分。</li>
<li><code>disk_free_space()</code>：返回目录的可用空间。</li>
<li><code>disk_total_space()</code>：返回一个目录的磁盘总容量。</li>
<li><code>file()</code>：把文件读入一个数组中。</li>
<li><code>file_exists()</code>：检查文件或目录是否存在。</li>
<li><code>file_get_contents()</code>：将文件读入字符串。</li>
<li><code>file_put_contents()</code> ：将字符串写入文件。</li>
<li><code>filesize()</code>：返回文件大小。</li>
<li><code>is_dir()</code>：判断指定的文件名是一个目录。</li>
<li><code>id_file()</code>：判断指定文件是否为常规的文件。</li>
<li><code>mkdir()</code>：创建目录。</li>
<li><code>move_uploaded_file()</code>：将上传的文件移动到新位置。</li>
<li><code>pathinfo()</code>：返回关于文件路径的信息。</li>
<li><code>rename()</code>：重命名文件或目录。</li>
<li><code>rmdir()</code>：删除空的目录。</li>
<li><code>unlink()</code>：删除文件。</li>
</ul>
<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="表单语法"><a href="#表单语法" class="headerlink" title="表单语法"></a>表单语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF'] ?&gt;"</span> <span class="attr">method</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    //默认action不填写为当前页面，建议$_SERVER['PHP_SELF']动态获取当前页面路径</span><br><span class="line">    //method默认为get方式</span><br><span class="line">    //必须有一个提交的方法，submit、button、img等。</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h2><p>PHP 超全局变量 <code>$_GET</code> 和 <code>$_POST</code> 用于收集表单数据（form-data）。</p>
<blockquote>
<ul>
<li><code>$_GET</code>：接受URL地址问号参数里的数据。不要使用GET来发送密码或其他敏感信息。</li>
<li><code>$_POST</code>：接受请求体中的数据。(推荐)</li>
<li><code>$_REQUEST</code>：相当于<code>$_GET</code>和<code>$_POST</code>的并集。</li>
<li><code>$_SERVER[&#39;REQUEST_METHOD&#39;]===&#39;POST&#39;</code>：判断请求的方式。</li>
</ul>
</blockquote>
<h2 id="文件上传-接收"><a href="#文件上传-接收" class="headerlink" title="文件上传/接收"></a>文件上传/接收</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端表单提交文件</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//enctype 必须设置文件格式</span></span><br><span class="line"> <span class="comment">//method 必须是post</span></span><br><span class="line">&lt;form action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF']; method="</span>post<span class="string">" enctype="</span>multipart/form-data<span class="string">" ?&gt;"</span>&gt;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//accept="audio/*"是规定上传的文件种类为音频文件</span></span><br><span class="line">    <span class="comment">//multiple可以让一个文件域多选</span></span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"file1"</span> accept=<span class="string">"audio/*"</span> multiple&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;button&gt;提交&lt;/botton&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//服务端接收文件：$_FILES['表单的name']</span></span><br><span class="line"> 使用 $_FILES接收到的数据是一个数组：</span><br><span class="line">    <span class="keyword">array</span> (size=<span class="number">1</span>)</span><br><span class="line">    <span class="string">'file1'</span> =&gt;   <span class="comment">//input里的name值</span></span><br><span class="line">    <span class="keyword">array</span> (size=<span class="number">5</span>)</span><br><span class="line">    <span class="string">'name'</span> =&gt; string <span class="string">'l.jpg'</span> (length=<span class="number">5</span>) <span class="comment">//文件名称</span></span><br><span class="line">    <span class="string">'type'</span> =&gt; string <span class="string">'image/jpeg'</span> (length=<span class="number">10</span>)  <span class="comment">//文件格式</span></span><br><span class="line">    <span class="string">'tmp_name'</span> =&gt; string <span class="string">'D:\wamp64\tmp\php99A5.tmp'</span> (length=<span class="number">25</span>)<span class="comment">//临时存放路径，会删除</span></span><br><span class="line">    <span class="string">'error'</span> =&gt; int <span class="number">0</span>  <span class="comment">//0代表是接收成功</span></span><br><span class="line">    <span class="string">'size'</span> =&gt; int <span class="number">16699</span></span><br></pre></td></tr></table></figure>

<h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p>服务器端接收的文件存在一个临时文件夹中，会被删除，所以需要移动到一个固定文件夹中。</p>
<p>完整的文件上传、接收、移动的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//使用函数嵌套代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//判断客户端的表单内容中有没有文本域（在浏览器端是可以删除文本域代码的）</span></span><br><span class="line">	<span class="keyword">if</span> ( !<span class="keyword">isset</span>($_FILES[<span class="string">'avatar'</span>]) ) &#123;</span><br><span class="line">		<span class="comment">//提示信息</span></span><br><span class="line">		$GLOBALS[<span class="string">'message'</span>] = <span class="string">'别玩我了'</span>;</span><br><span class="line">		<span class="comment">//结束函数</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//接收文件（数组）</span></span><br><span class="line">	$avatar = $_FILES[<span class="string">'avatar'</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//error是数组中的一个参数，专门用来判断上传成功与否。(常量)UPLOAD_ERR_OK=0; 0代表上传成功。</span></span><br><span class="line">	<span class="keyword">if</span>( $avatar[<span class="string">'error'</span>] != UPLOAD_ERR_OK )&#123;</span><br><span class="line">		$GLOBALS[<span class="string">'message'</span>] = <span class="string">'上传失败'</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将文件从临时目录移动到网站范围之内</span></span><br><span class="line">	<span class="comment">//源文件位置</span></span><br><span class="line">	$source = $avatar[<span class="string">'tmp_name'</span>];</span><br><span class="line">	<span class="comment">//移动的位置</span></span><br><span class="line">	$target = <span class="string">'./php_dir/'</span>.$avatar[<span class="string">'name'</span>];</span><br><span class="line">	<span class="comment">//返回的是一个布尔值</span></span><br><span class="line">	$moved = move_uploaded_file($source,$target);</span><br><span class="line">	<span class="comment">//判断移动是否成功</span></span><br><span class="line">	<span class="keyword">if</span>(!$moved)&#123;</span><br><span class="line">		$GLOBALS[<span class="string">'message'</span>] = <span class="string">'上传失败'</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">"上传成功"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>] === <span class="string">'POST'</span>) &#123;</span><br><span class="line">	upload();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">	&lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;form action=<span class="string">"&lt;?php echo $_SERVER['PHP_SELF']; ?&gt;"</span> method = <span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">		&lt;input type=<span class="string">"file"</span> name=<span class="string">"avatar"</span>&gt;</span><br><span class="line">		&lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">		<span class="meta">&lt;?php</span> <span class="keyword">if</span> ( <span class="keyword">isset</span>($message) ): <span class="meta">?&gt;</span></span><br><span class="line">		&lt;p&gt; <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $message; <span class="meta">?&gt;</span> &lt;/p&gt;</span><br><span class="line">		<span class="meta">&lt;?php</span> <span class="keyword">endif</span> <span class="meta">?&gt;</span></span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><ul>
<li><p>JSON是一种类似于js的字面量的表述数据的手段。是现如今使用最多的数据格式。</p>
</li>
<li><p>JSON和JS字面量的区别。</p>
<ol>
<li>JSON中属性名称必须用双引号包裹。</li>
<li>JSON中字符串必须用双引号包裹。</li>
<li>JSON中不允许使用注释。</li>
</ol>
</li>
<li><p><code>JSON.parse(str)</code>：js的方法解析JSON对象。</p>
</li>
<li><p><code>JSON.stringify(arr)</code>：js的方法转换成JSON对象。</p>
</li>
<li><p><code>JSON_decode()</code>：php的方法解码JSON对象。转换为php中stdClass类型的对象。如果想得到一个关联数组，可以传入第二个参数为true，得到的是一个关联数组。</p>
</li>
</ul>
<h1 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h1><h2 id="命令行语句"><a href="#命令行语句" class="headerlink" title="命令行语句"></a>命令行语句</h2><ul>
<li><p><code>show databases;</code>：列出所有数据库。</p>
</li>
<li><p><code>create database demo;</code>：创建一个叫demo的数据库。</p>
</li>
<li><p><code>use demo;</code>：进入demo数据库。</p>
</li>
<li><p><code>show tables;</code>：打印当前数据库中的表。</p>
</li>
<li><p><code>create table users (id int,name char(5),age int,gender int);</code>：创建一个表。</p>
</li>
<li><p><code>desc 表名;</code>：查看指定表的结构。</p>
</li>
<li><p><code>drop table 表名/数据库名;</code>：删除表或者数据库。（不可逆的操作）</p>
</li>
<li><p><code>exit|quit;</code>：退出数据库终端。</p>
</li>
</ul>
<h2 id="数据库语句"><a href="#数据库语句" class="headerlink" title="数据库语句"></a>数据库语句</h2><p>常见的查询函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 新增</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span> <span class="keyword">values</span> (内容);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">''</span> <span class="keyword">and</span> title;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">users</span> <span class="keyword">set</span> title = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列出总条目数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">from</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最大值、最小值、平均值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">from</span> <span class="keyword">users</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(<span class="keyword">id</span>) <span class="keyword">from</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 限制取几条数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">limit</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 越过多少条数据取几条</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//建立与数据库服务器之间的联系</span></span><br><span class="line"><span class="comment">//函数名前加上 @ 能忽略(不显示)错误信息</span></span><br><span class="line">$connection = @mysqli_connect(<span class="string">'127.0.0.1'</span>,<span class="string">'root'</span>,<span class="string">'123456'</span>,<span class="string">'demo'</span>);</span><br><span class="line"><span class="keyword">if</span> (!$connection) &#123;</span><br><span class="line">	<span class="keyword">exit</span>(<span class="string">'连接数据库失败'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">mysqli_close($connection);</span><br></pre></td></tr></table></figure>

<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基于刚刚创建的连接对象执行一次查询操作。得到的是一个查询对象（数据集）,暂存在数据库服务器上</span></span><br><span class="line"><span class="comment">// limit 1:在查询语句后面加上表示找到第一条后就不再继续查找，提高查询效率。</span></span><br><span class="line">$query = mysqli_query($connection, <span class="string">'select * from users;'</span>);</span><br><span class="line"><span class="keyword">if</span> (!$query) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'查询失败'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出一行数据</span></span><br><span class="line">$row = mysqli_fetch_assoc($query);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历查询对象，取出所有的数据</span></span><br><span class="line"><span class="keyword">while</span>($row = mysqli_fetch_assoc($query)) &#123;</span><br><span class="line">    var_dump($row);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放查询对象（数据集）</span></span><br><span class="line">mysqli_free_result($query);</span><br></pre></td></tr></table></figure>

<h3 id="增删改操作"><a href="#增删改操作" class="headerlink" title="增删改操作"></a>增删改操作</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$query = mysqli_query($connection, <span class="string">'delect * from users where id = 2;'</span>);</span><br><span class="line"><span class="keyword">if</span> (!$query) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'查询失败'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拿到受影响行，传入的是连接对象，得到的是距离上次连接所产生的影响</span></span><br><span class="line">$rows = mysqli_affected_rows($connection);</span><br></pre></td></tr></table></figure>

<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setcookie 是专门用于设置 cookie 的函数</span></span><br><span class="line">setcookie(<span class="string">'key'</span>,<span class="string">'value'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只传一个参数是删除，原理：设置过期时间为一个过去时间</span></span><br><span class="line">setcookie(<span class="string">'key'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传递第三个参数是设置过期时间，不传递就是会话级别的cookie（关闭浏览器会自动删除）</span></span><br><span class="line">setcookie(<span class="string">'key'</span>,<span class="string">'value'</span>,time()+<span class="number">1</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关联数组的方式访问客户端提交过来的 Cookie</span></span><br><span class="line">$_COOKIE;</span><br></pre></td></tr></table></figure>

<p><code>path</code>是设置<code>cookie</code>的作用范围。</p>
<p><code>domain</code>设置<code>cookie</code>的作用域名范围。</p>
<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>为cookie加密。将值保存到服务器端</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启session</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//存</span></span><br><span class="line">$_SESSION[<span class="string">'name'</span>] = $num;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除session</span></span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'num'</span>]);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>异步编程</title>
    <url>/2020/02/28/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/DmIhMPYWlKT5UyE.png
" style="zoom: 75%;"/>


<p>回调地狱</p>
</center>
<a id="more"></a>

<blockquote>
<p>JS 和 Node 中的异步操作都会在最后执行，ajax 、readFile 、writeFile 、setTimeout 等</p>
<p>获取异步操作的值 只能使用回调函数的方式,异步操作都是最后执行</p>
</blockquote>
<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><blockquote>
<p>回调函数的方式获取异步操作内的数据</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">x,y,callback</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">let</span> ret = x + y</span><br><span class="line">		callback(ret)</span><br><span class="line">	&#125;,<span class="number">1000</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ret</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(ret)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// log ：1 2 30</span></span><br></pre></td></tr></table></figure>

<h1 id="封装-ajax"><a href="#封装-ajax" class="headerlink" title="封装 ajax"></a>封装 ajax</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span> (<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oReq = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  <span class="comment">// 当请求加载成功之后要调用指定的函数</span></span><br><span class="line">  oReq.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    callback(oReq.responseText)</span><br><span class="line">  &#125;</span><br><span class="line">  oReq.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</span><br><span class="line">  oReq.send()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span>('data.json', function (data) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>参考文档：<span class="exturl" data-url="aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcy9wcm9taXNl" title="http://es6.ruanyifeng.com/#docs/promise">http://es6.ruanyifeng.com/#docs/promise<i class="fa fa-external-link"></i></span></p>
<p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p>
</blockquote>
<ol>
<li><code>callback hell</code> : 回调地狱，异步套异步，代码相当恶心</li>
</ol>
<p><img src="https://raw.githubusercontent.com/iamyujian/PicGo/master/img/image-20200210094428858.png" alt="image-20200210094428858.png"></p>
<ol start="2">
<li>如果有多个异步同时执行，无法确认他们的执行顺序，所以通过嵌套的方式能保证代码的执行顺序问题</li>
<li>为了解决嵌套所带来的问题，es6 里引进了<code>promise</code>，有了<code>Promise</code>对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。<code>Promise</code>对象提供统一的接口，使得控制异步操作更加容易。</li>
</ol>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li><code>Promise</code>对象有以下两个特点。</li>
</ul>
<ol>
<li>对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>resolved</code>（已成功）和<code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是<code>Promise</code>这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</li>
<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>pending</code>变为<code>resolved</code>和从<code>pending</code>变为<code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对<code>Promise</code>对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</li>
</ol>
<ul>
<li><p>缺点</p>
<p><code>Promise</code>也有一些缺点。首先，无法取消<code>Promise</code>，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反应到外部。第三，当处于<code>pending</code>状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<p>如果某些事件不断地反复发生，一般来说，使用 <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9zdHJlYW0uaHRtbA==" title="https://nodejs.org/api/stream.html">Stream<i class="fa fa-external-link"></i></span> 模式是比部署<code>Promise</code>更好的选择</p>
</li>
</ul>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><blockquote>
<p>ES6 规定，<code>Promise</code>对象是一个构造函数，用来生成<code>Promise</code>实例。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some 异步 code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);	<span class="comment">//value 里是异步执行后的返回值</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);	<span class="comment">//error 里是异步执行错误后的错误信息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p>
<p><code>resolve</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<code>reject</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="comment">//这里对 value 就可以进行数据拿取操作了</span></span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>then</code>方法可以接受两个回调函数作为参数。第一个回调函数是<code>Promise</code>对象的状态变为<code>resolved</code>时调用，第二个回调函数是<code>Promise</code>对象的状态变为<code>rejected</code>时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受<code>Promise</code>对象传出的值作为参数。</p>
<p>一般来说，调用<code>resolve</code>或<code>reject</code>以后，Promise 的使命就完成了，后继操作应该放到<code>then</code>方法里面，而不应该直接写在<code>resolve</code>或<code>reject</code>的后面。所以，最好在它们前面加上<code>return</code>语句，这样就不会有意外。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> resolve(<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 后面的语句不会执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>art-template模板引擎</title>
    <url>/2020/02/28/art-template%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/5vBSzW3fjQnkLyu.png
" style="zoom: 130%;"/>

<p>art-template 的使用方式</p>
</center>
<a id="more"></a>

<h1 id="模板引擎art-template"><a href="#模板引擎art-template" class="headerlink" title="模板引擎art-template"></a>模板引擎art-template</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install art-template</span><br><span class="line"><span class="meta">#</span><span class="bash"> 该命令在哪执行就会把包下载到哪里，默认会下载到 node_modules 目录，不要修改里面的文件，也不支持改</span></span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9hdWkuZ2l0aHViLmlvL2FydC10ZW1wbGF0ZS96aC1jbi9kb2NzL2luc3RhbGxhdGlvbi5odG1s" title="https://aui.github.io/art-template/zh-cn/docs/installation.html">官方文档<i class="fa fa-external-link"></i></span></p>
<h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><h3 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line">&#123;&#123;extend './layout.html'&#125;&#125; ---&gt;显示所有 layout 页面中的内容</span><br><span class="line">&#123;&#123;block 'head'&#125;&#125; ... &#123;&#123;/block&#125;&#125; ---&gt; 重编这里面的内容</span><br><span class="line">  </span><br><span class="line"> <span class="comment">&lt;!-- layout.html --&gt;</span></span><br><span class="line">		内容</span><br><span class="line">&#123;&#123;block 'head'&#125;&#125; 默认内容... &#123;&#123;/block&#125;&#125;</span><br><span class="line">		内容</span><br></pre></td></tr></table></figure>

<h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123;include './header.html'&#125;&#125; ---&gt; 相当于PHP 中的 include</span><br><span class="line">&#123;&#123;include './header.html' data&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在浏览器中使用"><a href="#在浏览器中使用" class="headerlink" title="在浏览器中使用"></a>在浏览器中使用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意：在浏览器中需要引用lib/template-web.js文件 </span></span><br><span class="line"><span class="comment">		强调：模板引擎不关心你的字符串内容，只关心自己能认识的模板标记语法，例如 &#123;&#123;&#125;&#125;(被称为 mustache 语法，八字胡)--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/art-template/lib/template-web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"tpl"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    大家好，我叫：</span><span class="template-variable">&#123;&#123; name &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    我今年 </span><span class="template-variable">&#123;&#123; age &#125;&#125;</span><span class="xml"> 岁了</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    我来自 </span><span class="template-variable">&#123;&#123; province &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    我喜欢： </span><span class="template-variable">&#123;&#123;<span class="builtin-name">each</span> hobbies&#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; $value &#125;&#125;</span><span class="xml"> </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ret = template(<span class="string">'tpl'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">'Tom'</span>,</span></span><br><span class="line">      age: 23,</span><br><span class="line"><span class="actionscript">      province: <span class="string">'杭州市'</span>,</span></span><br><span class="line">      hobbies: [</span><br><span class="line"><span class="actionscript">        <span class="string">'写代码'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'唱歌'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'打游戏'</span></span></span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ret);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span>1</span><br></pre></td></tr></table></figure>

<h2 id="在Node中使用"><a href="#在Node中使用" class="headerlink" title="在Node中使用"></a>在Node中使用</h2><ol>
<li>安装文件</li>
<li>在需要使用的文件模块中加载 <code>art-template</code></li>
<li>查文档，使用模板引擎的 API ( render 渲染)</li>
<li>语法：<code>.render(渲染对象,替换对象)</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>)</span><br><span class="line"><span class="keyword">var</span> tplStr = <span class="string">`</span></span><br><span class="line"><span class="string">大家好，我叫：&#123;&#123; name &#125;&#125;</span></span><br><span class="line"><span class="string">我今年 &#123;&#123; age &#125;&#125; 岁了</span></span><br><span class="line"><span class="string">我来自 &#123;&#123; province &#125;&#125;</span></span><br><span class="line"><span class="string">我喜欢： &#123;&#123;each hobbies&#125;&#125; &#123;&#123; $value &#125;&#125; &#123;&#123;/each&#125;&#125;`</span></span><br><span class="line"><span class="comment">// tplStr 接受的是字符串类型</span></span><br><span class="line"><span class="keyword">var</span> ret = template.render(tplStr, &#123;</span><br><span class="line">  name: <span class="string">'Tom'</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  province: <span class="string">'杭州市'</span>,</span><br><span class="line">  hobbies: [</span><br><span class="line">    <span class="string">'写代码'</span>,</span><br><span class="line">    <span class="string">'唱歌'</span>,</span><br><span class="line">    <span class="string">'打游戏'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出结果同上</span></span><br><span class="line"><span class="built_in">console</span>.log(ret);</span><br></pre></td></tr></table></figure>

<h2 id="在Express中使用"><a href="#在Express中使用" class="headerlink" title="在Express中使用"></a>在Express中使用</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save art-template</span><br><span class="line">npm install --save express-art-template</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>配置引擎<ul>
<li><code>.engine</code>配置使用<code>art-template</code>模板引擎</li>
<li>第一个参数表示：当渲染以<code>.art</code>结尾的文件的时候，使用<code>art-template</code>模板引擎</li>
<li><code>express-art-template</code>是专门用来在 <code>Express</code> 中把 <code>art-template</code>整合到<code>Express</code>中</li>
<li>虽然外面这里不需要加载 <code>art-template</code>，但是也必须安装，原因在于<code>express-art-template</code>依赖了<code>art-template</code></li>
</ul>
</li>
<li>渲染<ul>
<li><code>Express</code>为 <code>Response</code>相应对象提供了一个方法：<code>render</code></li>
<li><code>render</code>方法默认是不可以使用，但是如果配置了模板引擎就可以使用了</li>
<li>语法：<code>res.render(&#39;html模板名&#39;,{模板数据})</code></li>
<li>第一个参数不能写路径，默认会去项目中的 <code>views</code>目录查找该模板文件</li>
<li>也就是说 <code>Express</code>有一个约定：开发人员把所有的视图文件都放到 <code>views</code>目录中</li>
<li>修改默认的 <code>views</code>目录：<code>app.set(&#39;views&#39;,render函数的默认路径)</code></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置引擎</span></span><br><span class="line">app.engine(<span class="string">'art'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//渲染</span></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;  </span><br><span class="line">  res.render(<span class="string">'index.art'</span>, &#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running~'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB和MySQL</title>
    <url>/2020/02/28/MongoDB%E5%92%8CMySQL/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/5XmqxfNZAlvu4CT.jpg
" style="zoom: 80%;"/>

<p>node 环境下操作数据库</p>
</center>
<a id="more"></a>

<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>数据库</li>
<li>集合（数组）   —&gt;  相当于表</li>
<li>文档   —&gt;   表里的数据</li>
<li>文档结构很灵活，没有任何限制</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储结构</span></span><br><span class="line">&#123;</span><br><span class="line">  数据库: &#123;</span><br><span class="line">    集合：[ &#123;文档&#125;,&#123;文档&#125;,&#123;文档&#125; ],集合1[ &#123;文档&#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">	数据库1：&#123;  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="关系型数据库和非关系型数据库"><a href="#关系型数据库和非关系型数据库" class="headerlink" title="关系型数据库和非关系型数据库"></a>关系型数据库和非关系型数据库</h2><ul>
<li><p>关系型数据库</p>
<blockquote>
<p>表就是关系，或者说表与表之间存在关系</p>
</blockquote>
<ol>
<li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li>
<li>所有的关系型数据库在操作之前都需要设计表结构</li>
<li>而且数据表还支持约束<ul>
<li>唯一的</li>
<li>主键</li>
<li>默认值</li>
<li>非空</li>
</ul>
</li>
</ol>
</li>
<li><p>非关系型数据库</p>
<ul>
<li>非常的灵活</li>
<li>有的非关系数据库就是 key-value 对儿</li>
<li>但是 MongoDB 是长得最像关系型数据库的非关系型数据库</li>
<li>MongoDB 不需要设计表结构，你可以任意的往里面存数据，没有结构性这么一说</li>
</ul>
</li>
</ul>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20v" title="https://www.mongodb.com/">官网地址<i class="fa fa-external-link"></i></span>：没进去？！</p>
<p>下载地址1：<span class="exturl" data-url="aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG93bmxvYWQtY2VudGVyL2NvbW11bml0eQ==" title="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community<i class="fa fa-external-link"></i></span></p>
<p>下载地址2：<span class="exturl" data-url="aHR0cDovL2RsLm1vbmdvZGIub3JnL2RsL3dpbjMyLw==" title="http://dl.mongodb.org/dl/win32/">http://dl.mongodb.org/dl/win32/<i class="fa fa-external-link"></i></span></p>
<p>文件名格式：win32/mongodb-win32-x86_64-2012plus-v4.2-latest-signed.msi</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE1OTgwNzIxL2FydGljbGUvZGV0YWlscy8xMDI1ODY1MTg=" title="https://blog.csdn.net/qq_15980721/article/details/102586518">安装文档<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Zlcm5fMTM5Ny9hcnRpY2xlL2RldGFpbHMvOTMzODY5ODk=" title="https://blog.csdn.net/Fern_1397/article/details/93386989">安装的时候需要注意的几点坑<i class="fa fa-external-link"></i></span></p>
<p>配置环境变量： C:\Program Files\MongoDB\Server\4.2\bin</p>
<p><code>mongod --version</code>: 在 cmd 上查看版本</p>
</blockquote>
<ul>
<li><p>遇到的问题</p>
<p><code>MongoDB Server</code>服务启动失败，验证您是否有足够的权限启动系统服务<br><img src="https://raw.githubusercontent.com/iamyujian/PicGo/master/img/image-20200209181444970.png" alt="image-20200209181444970.png"></p>
<p>解决方法：打开(services.msc)服务界面,找到 MongoDB Server，右键-&gt;属性-&gt;登录，登录身份选择<strong>本地系统账户(L)</strong>。<br>设置完成后自己手动启动 MongoDB Server 服务，或者在刚刚正在安装的 MongoDB 弹窗提示点击<strong>Retry</strong>重试，安装程序会帮你启动 MongoDB Server 服务。</p>
</li>
</ul>
<h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><blockquote>
<p>推荐菜鸟教程：<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9tb25nb2RiL21vbmdvZGItdHV0b3JpYWwuaHRtbA==" title="https://www.runoob.com/mongodb/mongodb-tutorial.html">https://www.runoob.com/mongodb/mongodb-tutorial.html<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="创建数据目录"><a href="#创建数据目录" class="headerlink" title="创建数据目录"></a>创建数据目录</h3><blockquote>
<p>MongoDB 将数据目录存储在 /data/db 目录下。但是这个数据目录不会主动创建，我们在安装完成后需要创建它。请注意，数据目录应该放在根目录下（(如： C:\ 或者 D:\ 等 )。不创建目录启动不了服务</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">c:\&gt;cd c:\</span><br><span class="line">c:\&gt;mkdir data</span><br><span class="line">c:\&gt;cd data</span><br><span class="line">c:\data&gt;mkdir db</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果想要修改默认的数据存储目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod --dbpath=数据存储目录路径</span><br></pre></td></tr></table></figure>

<h3 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h3><ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果是在 C 盘启动，就把数据目录创建在 C 盘根目录，其他盘同理</span></span><br><span class="line">mongod</span><br></pre></td></tr></table></figure>

<ul>
<li>停止</li>
</ul>
<blockquote>
<p>Ctrl + c 或者关闭控制台</p>
</blockquote>
<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><ul>
<li>连接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 该命令默认连接本机的 MongoDB 服务</span></span><br><span class="line">mongo</span><br></pre></td></tr></table></figure>

<ul>
<li><p>退出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul>
<li><p>查看显示所有数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show dbs</span></span><br><span class="line">admin   0.000GB	---&gt;这三个是默认的，不要动</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前操作的数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db</span></span><br><span class="line">test 	---&gt;默认是在这个数据库中，没有数据的时候通过 show dbs 查询不显示</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到制定的数据库（如果没有会新建）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use 数据库名称</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="在-Node-中操作-MongoDB"><a href="#在-Node-中操作-MongoDB" class="headerlink" title="在 Node 中操作 MongoDB"></a>在 Node 中操作 MongoDB</h2><h3 id="使用官方的-mongodb-包来操作"><a href="#使用官方的-mongodb-包来操作" class="headerlink" title="使用官方的 mongodb 包来操作"></a>使用官方的 mongodb 包来操作</h3><blockquote>
<p>使用文档：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbmdvZGIvbm9kZS1tb25nb2RiLW5hdGl2ZQ==" title="https://github.com/mongodb/node-mongodb-native">https://github.com/mongodb/node-mongodb-native<i class="fa fa-external-link"></i></span></p>
<p>开发的时候不用这个，比较原生</p>
</blockquote>
<h3 id="mongoose-操作"><a href="#mongoose-操作" class="headerlink" title="mongoose 操作"></a>mongoose 操作</h3><blockquote>
<p>第三方包 mongoose 是基于官方包</p>
<p>官方网址：<span class="exturl" data-url="aHR0cHM6Ly9tb25nb29zZWpzLmNvbS8=" title="https://mongoosejs.com/">https://mongoosejs.com/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol>
<li><p>导入 mongoose 包</p>
</li>
<li><p>连接数据库</p>
<ul>
<li><p><code>mongoose.connect(&#39;mongodb://localhost:27017/itcast&#39;, { useNewUrlParser: true, useUnifiedTopology: true})</code></p>
</li>
<li><p>数据库名称<code>itcast</code>如果不存在，当你插入第一条数据之后就会自动被创建</p>
</li>
</ul>
</li>
<li><p>设计集合结构</p>
<ul>
<li>先要定义架构 <code>mongoose.Schema</code></li>
<li>通过 <code>new Schema()</code>实例化一个对象</li>
</ul>
</li>
<li><p>将文档结构发布为模型</p>
<ul>
<li><code>mongoose.model(&#39;User&#39;, 实例化架构对象)</code> 用来将一个架构发布为 <code>model</code></li>
<li>第一个参数：传入一个<code>大写名词单数字符串</code>，用来表示你的数据库名称 ，<code>mongoose</code>会自动将大写名词的字符串生成 <code>小写复数</code> 的集合名称，例如这里的 <code>User</code> 最终会变成 <code>users</code> 集合名称</li>
<li>返回值：模型构造函数</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost:27017/itcast'</span>, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>, <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">// 定义架构</span></span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema </span><br><span class="line"><span class="comment">// 设计集合结构</span></span><br><span class="line"><span class="keyword">let</span> userSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="built_in">require</span>: <span class="literal">true</span> <span class="comment">// 这里可以加约束，不能为空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    <span class="built_in">require</span>: <span class="literal">true</span> <span class="comment">// 不能为空</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 将文档结构发布为模型</span></span><br><span class="line"><span class="keyword">let</span> User = mongoose.model(<span class="string">'User'</span>, userSchema)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p><strong>通过模型构造函数操作数据</strong></p>
<ul>
<li><p>增加数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User 为模型构造函数</span></span><br><span class="line"><span class="keyword">let</span> admin = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span></span><br><span class="line">&#125;)</span><br><span class="line">admin.save(<span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'保存失败'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(ret); </span><br><span class="line">  <span class="comment">/* ret 为添加的数据</span></span><br><span class="line"><span class="comment">  &#123;_id: 5e4008e680121b1a9c335652,</span></span><br><span class="line"><span class="comment">  username: 'zs',</span></span><br><span class="line"><span class="comment">  password: '123456',</span></span><br><span class="line"><span class="comment">  __v: 0 &#125;  */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">User.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret); <span class="comment">// ret 为数组结构，查不到为[]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按条件查询</span></span><br><span class="line">User.find(&#123;<span class="attr">username</span>:<span class="string">'zs'</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret); <span class="comment">// ret 为数组结构，查不到为[]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按条件查询一条，如果没有条件默认为第一条</span></span><br><span class="line">User.findOne(&#123;<span class="attr">username</span>:<span class="string">'zs'</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret); <span class="comment">// ret 为对象，查不到为 null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 id 更新一个</span></span><br><span class="line">User.findByIdAndUpdate(<span class="string">'5e400bbb22acb92a6cea8842'</span>, &#123;</span><br><span class="line">  password: <span class="string">'123'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'更新失败'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'更新成功'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(ret);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据条件更新所有</span></span><br><span class="line">Model.update(conditions,doc, [options], [callback])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据条件更新一个</span></span><br><span class="line">Model.findByIdAndUpdate([conditions],[update], [options], [callback])</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按条件删除所有</span></span><br><span class="line">User.remove(&#123;<span class="attr">username</span>:<span class="string">'zs'</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除失败'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除成功'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(ret); <span class="comment">// ret 为 &#123; n: 1, ok: 1, deletedCount: 1 &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据条件删除一个</span></span><br><span class="line">Model.findOneAndRemove(conditions, [options], [callback])</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 根据id删除一个</span></span><br><span class="line">Model.findByIdAndRemove(id, [options], [callback])</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><blockquote>
<p>使用 Node 调用 mysql</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure>

<h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建连接</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  user: <span class="string">'me'</span>,</span><br><span class="line">  password: <span class="string">'secret'</span>,</span><br><span class="line">  database: <span class="string">'my_db'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.连接数据库</span></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.执行数据操作(增删改查直接写 sql 语句)</span></span><br><span class="line">connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, results);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.关闭连接</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure>

<h1 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h1><p>安装：<code>npm i blueimp-md5</code></p>
<p>使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'blueimp-md5'</span>)</span><br><span class="line">body.password = md5(md5(body.password))<span class="comment">// 重复加密</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js</title>
    <url>/2020/02/28/Node.js/</url>
    <content><![CDATA[<center><img src="https://i.loli.net/2020/02/28/Vf9Pu8plSRAUHzN.png" style="zoom: 100%;"/> 

<p>nodejs 学习文档</center></p>
<a id="more"></a>


<h1 id="Node-js介绍"><a href="#Node-js介绍" class="headerlink" title="Node.js介绍"></a>Node.js介绍</h1><h2 id="node-js是什么"><a href="#node-js是什么" class="headerlink" title="node.js是什么"></a>node.js是什么</h2><p>Node.js不是一门语言，不是库，不是框架，是一个<code>javascript</code>运行时环境，可以解析和执行<code>javascript</code>代码。是一个平台</p>
<ul>
<li><p>浏览器中的<code>javascript</code>：</p>
<ul>
<li>EcmaScript</li>
<li>BOM</li>
<li>DOM</li>
</ul>
</li>
<li><p>Node.js 中的<code>javascript</code>：</p>
<ul>
<li>没有<code>BOM</code>、<code>DOM</code>，服务端不处理页面(DOM)</li>
<li><code>EcmaScript</code></li>
<li>在Node这个<code>javascript</code>执行环境中为<code>javascript</code>提供了一些服务器级别的<code>API</code><ul>
<li>例如文件读写</li>
<li>网络服务的构建</li>
<li>网络通信</li>
<li>……</li>
</ul>
</li>
</ul>
</li>
<li><p>Node.js的特性：</p>
<ul>
<li><code>event-driven</code>事件驱动</li>
<li><code>non-blocking I/O model</code> 非阻塞IO模型(异步)</li>
<li><code>lightweight and efficient</code> 轻量和高效</li>
</ul>
</li>
<li><p>npm</p>
<ul>
<li>npm是世界上最大的开源库生态系统</li>
<li>绝大多数<code>javascript</code>相关的包都存放在了<code>npm</code>上，这样做的目的是为了让开发人员更方便的去下载使用</li>
<li><code>npm install jquery</code></li>
</ul>
</li>
<li><p>构建在 Chrome 的 V8 引擎之上</p>
<ul>
<li>代码只是具有特定格式的字符串而已</li>
<li>引擎可以认识它，可以帮你去解析和执行</li>
<li>Google Chrome 的 V8 引擎是目前公认的解析执行 javascript 代码最快的</li>
</ul>
</li>
</ul>
<h2 id="Node-js-能做什么"><a href="#Node-js-能做什么" class="headerlink" title="Node.js 能做什么"></a>Node.js 能做什么</h2><ul>
<li>Web服务器后台</li>
<li>命令行工具</li>
<li>对于前端工程师来讲，接触Node最多的是它的命令行工具<ul>
<li>自己写的很少，主要是使用别人第三方的</li>
<li>webpack</li>
<li>gulp</li>
<li>npm</li>
</ul>
</li>
</ul>
<h2 id="一些资源"><a href="#一些资源" class="headerlink" title="一些资源"></a>一些资源</h2><p><img src="https://raw.githubusercontent.com/iamyujian/PicGo/master/img/image-20200202211841081.png" alt="image-20200202211841081.png"></p>
<h2 id="能学习到什么"><a href="#能学习到什么" class="headerlink" title="能学习到什么"></a>能学习到什么</h2><ul>
<li>B/S 编程模型<ul>
<li>Browser - Server</li>
<li>back-end</li>
<li>任何服务端技术这种BS编程模型都是一样，和语言无关</li>
<li>Node 只是作为我们学习BS模型的一个工具而已</li>
</ul>
</li>
<li>模块化编程</li>
<li>Node 常用 API</li>
<li>异步编程</li>
<li>Express 开发框架</li>
<li>Ecmascript 6</li>
<li>……</li>
</ul>
<h1 id="node-js模块化开发"><a href="#node-js模块化开发" class="headerlink" title="node.js模块化开发"></a>node.js模块化开发</h1><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><ul>
<li>文件操作中的相对路径可以省略 <code>./</code>，在模块加载中，相对路径中的<code>./</code>不能省略，如果省略了 <code>.</code> 则是磁盘根目录</li>
<li>Nodejs 规定一个<code>JavaScript</code>文件就是一个模块，模块内部定义的变量和函数默认情况下在外部无法得到，只能得到输出结果，但是可以通过导出得到变量等数据</li>
<li>我们一个项目中有且只有一个<code>node_module</code>，放在项目根目录中</li>
<li>如果想要了解更多底层细节，可以自行参考：《深入浅出Node.js》中的模块系统章节</li>
</ul>
<h2 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h2><ul>
<li><p><code>exports</code>导出模块，是<code>module.exports</code>的引用（地址引用关系），导岀对象最终以 <code>module.exports</code> 为准，如果你实在分不清楚 <code>exports</code> 和 <code>module.exports</code> 的区别，可以忘记 exports 而只使用 <code>module.exports</code></p>
<ul>
<li><p><code>module.exports</code>和<code>exports</code>的关系</p>
<blockquote>
<p>在 Node 中，每个模块内部都有一个自己的 module 对象，该 module 对象中，有一个成员叫：exports 也是一个对象，require 的得到的结果是 module.exports,默认在代码的最后一句：<code>return module.exports</code></p>
<p><code>exports === module.exports</code>：exports 是 module.exports 的一个引用</p>
<p>exports 的值的地址指向 module.exports 的值得指向，修改 exports 值会断开和 module.exports 的引用关系，反过来同理，但是最后 return 的是 module.exports 的值</p>
</blockquote>
</li>
<li><p>导出多个成员(必须在对象中)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line">exports.a = <span class="number">123</span></span><br><span class="line">exports.b = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  add:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">  &#125;,</span><br><span class="line">  str: <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>导出单个成员(拿到的就是：函数、字符串)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'hello'</span>  <span class="comment">//后面的会覆盖前面的</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h2 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5mb3EuY24vYXJ0aWNsZS9ub2RlanMtbW9kdWxlLW1lY2hhbmlzbQ==" title="https://www.infoq.cn/article/nodejs-module-mechanism">深入浅出 Node.js（三）：深入 Node.js 的模块机制<i class="fa fa-external-link"></i></span></p>
<h3 id="模块有路径但没有后缀时"><a href="#模块有路径但没有后缀时" class="headerlink" title="模块有路径但没有后缀时"></a>模块有路径但没有后缀时</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./find.js'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./find'</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>加载规则</li>
</ul>
<ol>
<li><code>require</code> 方法根据模块路径查找模块，如果是完整路径，直接引入模块</li>
<li>如果模块后缀省略，先找同名 JS 文件再找同名 JS 文件夹</li>
<li>如果找到了同名文件夹，找文件夹中的 <code>index.js</code></li>
<li>如果文件夹中没有 <code>index.js</code> 就会去当前文件夹中的 <code>package.js</code> 文件中查找 <code>main</code> 选项中的入口文件</li>
<li>如果找指定的入口文件不存在或者没有指定入口文件就会报错，模块没有被找到</li>
</ol>
<h3 id="模块没有路径且没有后缀时"><a href="#模块没有路径且没有后缀时" class="headerlink" title="模块没有路径且没有后缀时"></a>模块没有路径且没有后缀时</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'find'</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>加载规则</li>
</ul>
<ol>
<li><code>Node.js</code>会假设它是系统模块</li>
<li><code>Node.js</code>去当前文件所处目录中的<code>node_modules</code>文件夹中</li>
<li>首先看是否有该名字的文件夹</li>
<li>再找<code>package.json</code>文件中的<code>main</code>属性，然后加载成功</li>
<li>如果 <code>package.json</code>文件不存在或者 <code>main</code> 指定的入口模块为空或没有</li>
<li>则看该目录里面是否有<code>index.js</code>，有则默认加载</li>
<li>没有则进入上一级目录中的<code>node_module</code>目录查找，如果没有，返回上上级，直到当前磁盘根目录还找不到</li>
<li>报错：<code>can not find module xxx</code></li>
</ol>
<h3 id="优先从缓存加载"><a href="#优先从缓存加载" class="headerlink" title="优先从缓存加载"></a>优先从缓存加载</h3><blockquote>
<p>加载模块的时候，先看一下这个模块有没有别加载过，如果缓存里面有就直接拿，没有就从新加载</p>
</blockquote>
<h2 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h2><p>Node运行环境提供的API.因为这些API都是以模块化的方式逬行开发的，所以我们又称Node运行环境提脚API为系统模块</p>
<p><img src="https://raw.githubusercontent.com/iamyujian/PicGo/master/img/image-20200203191338074.png" alt="image-20200203191338074.png"></p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p> f: file 文件，s: system 系统，文件操作系统。</p>
<p>注意：<strong>文件操作中的路径指的是：执行当前文件的命令工具所处的文件路径</strong></p>
<p><code>const fs = require (&#39;fs&#39;)</code></p>
<ul>
<li><p><strong>读取文件内容</strong></p>
</li>
<li><p>语法：<code>fs.readFile (&#39;文件路径&#39;[,&#39;文件编码&#39;],callback);</code></p>
<ul>
<li>读取的文件内容默认是二进制数据，可以加入第二个参数转，也可以转字符串：<code>toString()</code></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="comment">//读取上—级css目录下中的base.css</span></span><br><span class="line">fs.readFile(<span class="string">'../css/base.css'</span>,<span class="string">'utf-8'</span> (err, doc) =&gt;</span><br><span class="line"><span class="comment">//如果文件读取发生错误参数err的值为错误对象,否则err的值为null </span></span><br><span class="line"><span class="comment">//doc參数为文件内容，失败则是 underfund </span></span><br><span class="line"><span class="keyword">if</span> (err = <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//在控制台中输出文件内容</span></span><br><span class="line"><span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>读取目录</strong></p>
<p><code>fs.readdir(&#39;文件路径&#39;, callback);</code>输出的是文件名称拼成的数组</p>
</li>
<li><p><strong>写入文件内容</strong></p>
<p><code>fs. writeFile (&#39;文件路径&#39;,&#39;数据&#39;,callback);</code></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> content = <span class="string">'&lt;h3&gt; 正在使用 fs.writeFile 写入文件内容 &lt;/h3&gt;'</span>;</span><br><span class="line">fs.writeFile(<span class="string">'./index.html'</span>, content, err =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (err != <span class="literal">null</span>) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(err);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span> .log(<span class="string">"文件写入成功');</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>

<h3 id="路径操作"><a href="#路径操作" class="headerlink" title="路径操作"></a>路径操作</h3><blockquote>
<p>使用 path 需要导入先 path 模块<br>const path = require(‘path’)</p>
</blockquote>
<ul>
<li><p>文件操作的相对路径</p>
<ul>
<li><code>./data/</code>：相对于当前目录</li>
<li><code>data/a.txt</code>：相对于当前目录</li>
<li><code>/data/a.txt</code>：绝对路径，当前文件模块所处磁盘根目录</li>
<li><code>c:/xx/xx</code>：绝对路径</li>
</ul>
</li>
<li><p><strong>相对路径vs绝对路径</strong></p>
<ul>
<li>绝对路径：<code>path.join(__dirname, &#39;./public/&#39;)</code></li>
<li>大多数情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前工作目录</li>
<li>在读取文件或者设置文件路径时都会选择绝对路径</li>
<li>使用<code>_dirname</code>获取当前文件所在的绝对路径</li>
</ul>
</li>
<li><p>常用<code>path</code>方法</p>
<ul>
<li><p>获取目录中文件名部分，第二个参数隐藏文件后缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.basename(<span class="string">'c:/a/b/c/index.js'</span>) <span class="comment">// index.js</span></span><br><span class="line">path.basename(<span class="string">'c:/a/b/c/index.js'</span>,<span class="string">'.js'</span>) <span class="comment">// index</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取目录名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.dirname(<span class="string">'c:/a/b/c/index.js'</span>) <span class="comment">// 'c:/a/b/c'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取文件后缀</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.extname(<span class="string">'c:/a/b/c/index.js'</span>) <span class="comment">// .js</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>判断是否为绝对路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.isAbsolute(<span class="string">'c:/a/b/c/index.js'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>解析路径，将一个路径转换为一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.parse(<span class="string">'c:/a/b/c/index.js'</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;root: 'c:/'</span></span><br><span class="line"><span class="comment"> dir: 'c:/a/b/c'</span></span><br><span class="line"><span class="comment"> base: 'index.js'</span></span><br><span class="line"><span class="comment"> ext: '.js'</span></span><br><span class="line"><span class="comment"> name: 'index'</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>路径拼接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">path.join(<span class="string">'itcast'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c.css'</span>) <span class="comment">// itcast\\a\\b\\c.css </span></span><br><span class="line"><span class="comment">// windows 中的路径使用反斜杠，反斜杠有转义的意思。所以使用两个</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="Node-中的其他成员"><a href="#Node-中的其他成员" class="headerlink" title="Node 中的其他成员"></a>Node 中的其他成员</h2><blockquote>
<p>在每个模块中，除了<code>require</code>、<code>exports</code>等模块相关 API 之外，还有两个特殊的成员，这两个成员是动态获取的路径，会随着文件的位置变化而变化</p>
</blockquote>
<ul>
<li><code>__dirname</code>：用来获取当前文件模块所属目录的绝对路径</li>
<li><code>__filename</code>：用来获取当前文件的绝对路径</li>
</ul>
<h2 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h2><ul>
<li><p><strong>什么是第三方模块</strong></p>
<blockquote>
<p>别人写好的、具有特定功能的，我们能直接使用的模块即第三方模块，由于第三方模块通常都是由多个文件组成并且被放置在一个文件夹中，所以又名包。</p>
</blockquote>
</li>
<li><p><strong>存在形式</strong></p>
<ul>
<li>以<code>js</code>文件的形式存在，提供实现项目具体功能的<code>API</code>接口。</li>
<li>以命令行工具形式存在，辅助项目开发。</li>
</ul>
</li>
</ul>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><blockquote>
<p><code>npm</code> (node package manager): node 的第三方模块管理工具</p>
<p><a href="npmjs.com">官方网站</a></p>
</blockquote>
<ul>
<li><p>常用命令</p>
<ul>
<li><p><code>npm install 模块名称 模块名称 模块名称</code>或者<code>npm i 模块名称…</code>：下载包</p>
</li>
<li><p><code>npm install 模块名称@版本号</code>：下载固定版本的包</p>
</li>
<li><p><code>--save</code></p>
<p> 会在<code>package.json</code>文件中生成所安装模块的依赖信息<code>dependencies</code>，建议安装包时都加上来保存依赖项信息，简写<code>-S</code></p>
<p> npm 5 版本以后可以不用加，默认会生成依赖信息</p>
</li>
<li><p><code>-g</code>：全局安装</p>
</li>
<li><p><code>--save-dev</code>：表示安装的包不是必须安装的，会将包的依赖单独写在<code>devDependencies</code>中</p>
</li>
<li><p>卸载</p>
<p><code>npm uninstall package 模块名称</code>：只删除，如果有依赖项会依然保存，uninstall 可以简写成 <code>un</code></p>
<p><code>npm uninstall --save</code>：删除的时候把依赖也删除</p>
</li>
<li><p>查看帮助</p>
<p><code>npm --help</code>：查看所有的命令</p>
<p><code>npm 命令 --help</code>：查看具体命令的使用帮助</p>
</li>
<li><p>升级：<code>npm install --global npm</code></p>
</li>
<li><p>查看 npm 配置信息：<code>npm config list</code> </p>
</li>
</ul>
</li>
</ul>
<h3 id="替换-npm-下载地址"><a href="#替换-npm-下载地址" class="headerlink" title="替换 npm 下载地址"></a>替换 npm 下载地址</h3><blockquote>
<p>npm 默认的下载地址在国外，国内下载速度慢</p>
<p>淘宝的开发团队把 npm 在国内做了一个备份，<span class="exturl" data-url="aHR0cDovL25wbS50YW9iYW8ub3JnLw==" title="http://npm.taobao.org/">网址<i class="fa fa-external-link"></i></span></p>
</blockquote>
<ul>
<li><p><code>nrm</code> (npm registry manager) : npm 下载地址切换工具（解决 npm 下载速度慢）</p>
<p>使用步骤：</p>
<ol>
<li>使用 <code>npm install nrm -g</code> 下载它</li>
<li>查询可用下载地址列表 <code>nrm ls</code></li>
<li>切换 <code>npm</code> 下载地址 <code>nrm use</code> 下载地址名称 (推荐使用<code>taobao</code>)</li>
</ol>
</li>
<li><p>使用 <code>cnpm</code>：</p>
<ol>
<li><p><code>npm install cnpm -g</code>安装 cnpm</p>
</li>
<li><p>下载包时使用 cnpm 代替 npm</p>
</li>
</ol>
</li>
<li><p>配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 每次安装时在后面加入 --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或在配置文件中加入，一劳永逸</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h3><blockquote>
<p><code>nodemon</code> 是一个命令行工具，用以辅助项目开发。在 Node.js 中，每次修改文件都要在命令行工具中重新执行该文件，非常繁琐。</p>
</blockquote>
<p>使用步骤：</p>
<ol>
<li>下载： <code>npm install nodemon -g</code> </li>
<li>在命令行工具中用 nodemon 命令替代 node 命令执行文件</li>
<li>终止使用 <code>Ctrl + c</code></li>
</ol>
<h3 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h3><blockquote>
<p>基于node平台开发的前端构建工具，将机械化操作编写成任务，想要执行机械化操作时执行一个命令任务就能自动执行了，用机器代替手工，提高开发效率。</p>
</blockquote>
<ul>
<li><p>安装：  <code>npm install gulp-cli -g</code></p>
</li>
<li><p>Gulp作用</p>
<ul>
<li>项目上线，HTML，CSS，JS文件压缩合并</li>
<li>语法转换(es6、less…)</li>
<li>公共文件抽离</li>
</ul>
</li>
<li><p>修改文件浏览器自动刷新</p>
</li>
<li><p>Gulp使用</p>
<ol>
<li>使用 <code>npm install gulp</code> 下载 gulp 库文件</li>
<li>在项目更目录下建立 <code>gulpfile.js</code>文件</li>
<li>重构项目的文件夹结构 src 目录放置源代码文件 dist 目录放置构建后文件</li>
<li>在 <code>gulpfile.js</code> 文件中编写任务</li>
<li>在命令行工具中执行 gulp 文件</li>
</ol>
</li>
<li><p>gulp 中提供的方法</p>
<ul>
<li><code>gulp.src()</code>：获取任务要处理的文件</li>
<li><code>gulp.dest()</code>：输出文件</li>
<li><code>gulp.task()</code>：建立gulp任务</li>
<li><code>gulp.watch()</code>：监控文件的变化</li>
</ul>
<p>通过命令行运行代码：<code>gulp first</code></p>
</li>
<li><p>gulp插件</p>
<ul>
<li><code>gulp-htmlmin</code>：HTML 文件压缩</li>
<li><code>gulp-csso</code>：压缩 css</li>
<li><code>gulp-babel</code>：JavaScript 语法转换</li>
<li><code>gulp-less</code>：less语法转换</li>
<li><code>gulp-uglify</code>：压缩混淆 JavaScript</li>
<li><code>gulp-file-include</code>：公共文件包含</li>
<li><code>browsersync</code>：浏览器实时同步</li>
</ul>
</li>
<li><p>gulp插件使用流程（配合npmjs.com 官网使用）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用模块</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">const</span> fileinclude = <span class="built_in">require</span>(<span class="string">'gulp-file-include'</span>);</span><br><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"><span class="keyword">const</span> csso = <span class="built_in">require</span>(<span class="string">'gulp-csso'</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="comment">// 建立任务</span></span><br><span class="line">gulp.task(<span class="string">'first'</span>, (done) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'第一个任务'</span>);</span><br><span class="line">  <span class="comment">// 获取要处理的文件</span></span><br><span class="line">  gulp.src(<span class="string">'./src/demo.js'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>));</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// html任务</span></span><br><span class="line"><span class="comment">// 通过gulp插件压缩代码</span></span><br><span class="line">gulp.task(<span class="string">'htmlmin'</span>, (done) =&gt; &#123;</span><br><span class="line">  gulp.src(<span class="string">'./src/*.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽取html文件中的公共代码</span></span><br><span class="line">    .pipe(fileinclude())</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过gulp插件压缩代码</span></span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">//输出到dist文件夹</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>));</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// css任务</span></span><br><span class="line">gulp.task(<span class="string">'cssmin'</span>, (done) =&gt; &#123;</span><br><span class="line">  gulp.src(<span class="string">'./src/css/a.less'</span>)</span><br><span class="line">    <span class="comment">//less转css</span></span><br><span class="line">    .pipe(less())</span><br><span class="line">    <span class="comment">//压缩css代码</span></span><br><span class="line">    .pipe(csso())</span><br><span class="line">    <span class="comment">//结果输出</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>))</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//js任务</span></span><br><span class="line">gulp.task(<span class="string">'jsmin'</span>, (done) =&gt; &#123;</span><br><span class="line">  gulp.src(<span class="string">'./src/demo.js'</span>)</span><br><span class="line">    <span class="comment">// 语法转换</span></span><br><span class="line">    .pipe(babel(&#123;</span><br><span class="line">      <span class="comment">// @babel/env可以判断当前代码的运行环境，将代码转换成当前运行环境所支持的代码</span></span><br><span class="line">      presets: [<span class="string">'@babel/env'</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="comment">// 压缩</span></span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    <span class="comment">// 结果输出</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/js'</span>))</span><br><span class="line">  done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制文件夹</span></span><br><span class="line">gulp.task(<span class="string">'copy'</span>, (done) =&gt; &#123;</span><br><span class="line">  gulp.src(<span class="string">'./src/images/*'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist/images'</span>));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建任务,执行default时，依次执行任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, gulp.series(<span class="string">'htmlmin'</span>, <span class="string">'cssmin'</span>,<span class="string">'jsmin'</span>,<span class="string">'copy'</span>, done =&gt; done()));</span><br></pre></td></tr></table></figure>

<h3 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h3><blockquote>
<ul>
<li>包描述文件，记录了当前项目的信息，eg 项目名称、版本、作者、github地址、当前项目依赖了哪些第三方模块等，建议每一个项目都要有一个</li>
<li>通过 <code>npm init -y</code>生成 ，<code>-y</code>代表生成默认信息，不加的话需要逐条手动填写信息</li>
<li>通过<code>npm install</code>能把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项都下载下来</li>
</ul>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"> 文件会记录npm下载的模块</span><br><span class="line"> </span><br><span class="line">"name": "demo",      ---项目名称</span><br><span class="line">"version": "1.0.0",  ---项目版本</span><br><span class="line">"description": "",   ---项目描述</span><br><span class="line">"main": "index.js",   ---主入口文件，主模块</span><br><span class="line"></span><br><span class="line">  "scripts": &#123;          </span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1" ---存储命令的别名，使用 npm+run+别名 使用</span><br><span class="line">  &#125;,                  </span><br><span class="line"></span><br><span class="line">  "keywords": [],     ---使用关键字描述项目</span><br><span class="line">  "author": "",       ---项目作者</span><br><span class="line">  "license": "ISC"      ---遵循的协议，默认isc：开放源代码</span><br><span class="line"></span><br><span class="line"> "dependencies": &#123;</span><br><span class="line">    "csso": "^4.0.2"	---通过npm install下载的模块（项目依赖），还原使用npm install --production命令进行下载，不下载`devDependencies`中的依赖</span><br><span class="line">  &#125;</span><br><span class="line">	"devDependencies": &#123;</span><br><span class="line">    "gulp": "^3.9.1"	---通过 --save-dev下载的模块（开发依赖），可以使用npm install 命令进行下载</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/iamyujian/PicGo/master/img/image-20200122130426646.png" alt="image-20200122130426646.png"><br><img src="https://raw.githubusercontent.com/iamyujian/PicGo/master/img/image-20200122130538922.png" alt="image-20200122130538922.png"></p>
<p>通过命令<code>npm install</code>可以下载项目所需要的所有的依赖</p>
<p><code>npm install --production</code> 下载项目运行所需要的依赖，而不下载开发依赖</p>
<h3 id="package-lock-json文件"><a href="#package-lock-json文件" class="headerlink" title="package-lock.json文件"></a>package-lock.json文件</h3><blockquote>
<p>npm 版本 5 以前没有这个文件，5 后面版本会自动生成这个文件</p>
<p>当你安装包的时候，会自动更新这个文件</p>
<p>当下载模块后会自动生成，主要记录模块与模块之间的依赖关系，保存了所有包的信息，有这个文件重载 node_modules 时会更快</p>
<p>锁定包的版本号，防止自动升级到新版</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "@babel/code-frame": &#123;</span><br><span class="line">      "version": "7.8.3", ---版本</span><br><span class="line">      "resolved": "https://registry.npm.taobao.org/@babel/code-frame/download/@babel/code-frame-7.8.3.tgz", ---地址</span><br><span class="line">      "integrity": "sha1-M+JZA9dIEYFTThLsCiXxa2/PQZ4=",</span><br><span class="line">      "requires": &#123;</span><br><span class="line">        "@babel/highlight": "^7.8.3"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="创建web服务器"><a href="#创建web服务器" class="headerlink" title="创建web服务器"></a>创建web服务器</h1><h2 id="IP地址和端口号"><a href="#IP地址和端口号" class="headerlink" title="IP地址和端口号"></a>IP地址和端口号</h2><ul>
<li>IP地址用来定位计算机</li>
<li>端口号来定位具体的应用程序</li>
<li>一切需要联网通信的软件都会占用一个端口号</li>
<li>端口号的范围从 0 - 65536 之间</li>
<li>在计算机中有一些默认端口号，最好不要去使用 eg：http 服务中的 80</li>
<li>我们在开发过程中使用一些简单好记的就可以了，例如3000，5000等没什么含义的</li>
<li>可以同时开启多个服务，但一定要确保不同服务端口号不一致才可以，在一台计算机中，同一个端口号同一时间只能被一个程序占用</li>
</ul>
<h2 id="建立服务器"><a href="#建立服务器" class="headerlink" title="建立服务器"></a>建立服务器</h2><ul>
<li><p>nodejs是基于事件驱动的语言，当客户端有请求的时候，这个请求在服务端是通过事件来触发的</p>
</li>
<li><p>在服务端默认发送的数据，其实是 utf8 编码的内容，但是浏览器不知道你是 utf8 编码内容，此时浏览器会按照当前操作系统的默认编码(gbk)去解析，所以中文就会乱码</p>
<p>解决：<code>res.setHeader(&#39;Content-Type&#39;, &#39;text/plain; charset=utf-8&#39;)</code>，图片格式的内容不需要设置编码格式，会报错</p>
</li>
<li><p>Content-Type：不同的资源对应的 Content-Type 是不一样的</p>
<p> 图片类型不需要指定编码，一般只为字符数据才指定编码格式</p>
<p> 类型选择对照表：<span class="exturl" data-url="aHR0cHM6Ly90b29sLm9zY2hpbmEubmV0Lw==" title="https://tool.oschina.net/">https://tool.oschina.net/<i class="fa fa-external-link"></i></span> –&gt; HTTP Mine-type</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于创建网站服务器的系统模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// app对象就是网站服务器对象</span></span><br><span class="line"><span class="keyword">const</span> app = http.createServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过on为网站服务器对象添加请求对象，请求名称为request，当有请求的时候，执行后面的事件处理函数,req中保存着请求相关的信息，通过res对象下的方法对客户端进行响应</span></span><br><span class="line">app.on(<span class="string">'request'</span>, (req,res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// req.method来获取请求方式</span></span><br><span class="line">  <span class="comment">//req.url 来获取请求地址，默认是 /</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//告诉浏览器编码格式</span></span><br><span class="line">  res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//res.end后的响应内容只能是二进制数据或者字符串(JSON.stringifoy转换)</span></span><br><span class="line">  res.end(<span class="string">'&lt;h2&gt;hello user&lt;/h2&gt;'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//网站服务器建立好后，必须要监听一个端口来对外进行服务</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'网站服务器启动成功！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的简写方式</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.end(<span class="string">'hello'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/iamyujian/PicGo/master/img/image-20200122141535489.png" alt="image-20200122141535489.png"><br><img src="https://raw.githubusercontent.com/iamyujian/PicGo/master/img/image-20200122141600511.png" alt="image-20200122141600511.png"></p>
<h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><blockquote>
<p><code>url.parse(地址,true)</code>：解析地址中的内容，得到的是一个 url 对象</p>
<p>true：将对象中的 query 的值(字符串)转换成对象</p>
<p>pathname：路径中 ? 之前的路径内容</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> a = url.parse(<span class="string">'http://localhost:8080/one?a=index&amp;t=article'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">&#123; </span><br><span class="line">    protocol : <span class="string">'http'</span> ,</span><br><span class="line">    auth : <span class="literal">null</span> ,</span><br><span class="line">    host : <span class="string">'localhost:8080'</span> ,</span><br><span class="line">    port : <span class="string">'8080'</span> ,</span><br><span class="line">    hostname : <span class="string">'localhost'</span> ,</span><br><span class="line">    hash : <span class="literal">null</span> ,</span><br><span class="line">    search : <span class="string">'?a=index&amp;t=article'</span>,</span><br><span class="line">    query : <span class="string">'a=index&amp;t=article'</span>,</span><br><span class="line">    pathname : <span class="string">'/one'</span>,</span><br><span class="line">    path : <span class="string">'/one?a=index&amp;t=article'</span>,</span><br><span class="line">    href : <span class="string">'http://localhost:8080/one?a=index&amp;t=article'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>JSON.stringfy()</code>：将 JavaScript 对象转换为字符串，也可以将 JavaScript 数组转换为 JSON 字符串</p>
</blockquote>
<blockquote>
<p><code>req.method</code> 来获取请求方式<br><code>req.url</code> 来获取请求地址<br><code>req.headers</code> 获取请求报文（res.headers[‘accept’]）<br><code>res.writeHead(200,&#39;content-type&#39;: &#39;text/html;charset=utf8&#39;)</code> 编写响应报文的信息</p>
</blockquote>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><blockquote>
<p>如何通过服务器让客户端重定向？</p>
<ol>
<li>状态码设置成 302 (临时重定向)，301是永久重定向</li>
<li>在响应头中通过 <code>Location</code> 告诉客户端往哪儿重定向</li>
</ol>
<p>如果客户端发现收到服务器的响应的状态码是 302 就会自动去响应头中找 Location ，然后对该地址发起新的请求</p>
<p>服务端重定向只针对同步请求才有效，异步请求无效，这时候可以使用客户端跳转：<code>window.location.href = &#39;/&#39;</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一：</span></span><br><span class="line">res.statusCode = <span class="number">302</span></span><br><span class="line">res.setHeader(<span class="string">'Location'</span>, <span class="string">'/'</span>)</span><br><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line">res.redirect(<span class="string">'/'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="案例：留言板"><a href="#案例：留言板" class="headerlink" title="案例：留言板"></a>案例：留言板</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comments = [&#123;</span><br><span class="line">    name: <span class="string">'张三'</span>,</span><br><span class="line">    message: <span class="string">'今天天气不错！'</span>,</span><br><span class="line">    datatime: <span class="string">'2020-10-14'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'李四'</span>,</span><br><span class="line">    message: <span class="string">'今天天气不错！+1'</span>,</span><br><span class="line">    datatime: <span class="string">'2020-10-14'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'王五'</span>,</span><br><span class="line">    message: <span class="string">'今天天气不错！+2'</span>,</span><br><span class="line">    datatime: <span class="string">'2020-10-14'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'钢蛋'</span>,</span><br><span class="line">    message: <span class="string">'今天天气不错！+3'</span>,</span><br><span class="line">    datatime: <span class="string">'2020-10-14'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 得到路径对象</span></span><br><span class="line">    <span class="keyword">let</span> parseObj = url.parse(req.url, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">let</span> pathname = parseObj.pathname</span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">'/'</span> || pathname === <span class="string">'/index'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/index.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.end(<span class="string">'404 Not Found'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 渲染</span></span><br><span class="line">        <span class="keyword">var</span> htmlStr = template.render(data.toString(), &#123;</span><br><span class="line">          comments: comments</span><br><span class="line">        &#125;)</span><br><span class="line">        res.end(htmlStr)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 设置请求资源文件路径，公开静态资源目录public</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.indexOf(<span class="string">'/public/'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'.'</span> + pathname, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.end(<span class="string">'404 Not Found'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">'/post'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/post.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.end(<span class="string">'404 Not Found'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">'/comment'</span>) &#123;</span><br><span class="line">        <span class="comment">// 将当前时间日期添加到数据对象中，然后存储到数组中</span></span><br><span class="line">        <span class="keyword">let</span> comment = parseObj.query</span><br><span class="line">        comment.datatime = <span class="string">'2019-11-2 15:11:12'</span></span><br><span class="line">        comments.unshift(comment)</span><br><span class="line">        <span class="comment">// 重定向(设置状态码和响应头)</span></span><br><span class="line">        res.statusCode = <span class="number">302</span></span><br><span class="line">        res.setHeader(<span class="string">'Location'</span>, <span class="string">'/'</span>)</span><br><span class="line">        res.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/404.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.end(<span class="string">'404 Not Found'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(data)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  .listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h1><blockquote>
<p>原生的 http 在某些方面表现不足以应对我们的开发需求，所以我们就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码更高度统一</p>
<p>在 Node 中，有很多 Web 开发框架，我们这里以学习 express 为主</p>
<p><span class="exturl" data-url="aHR0cDovL2V4cHJlc3Nqcy5jb20v" title="http://expressjs.com/">官方网址<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">const express = require('express')</span><br><span class="line"></span><br><span class="line">let app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公开指定目录，可以通过 /public/xx 的方式访问 public 目录中的所有资源</span></span><br><span class="line">app.use('/public/', express.static('./public/'))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本路由，当服务器收到 get 请求 / 的时候，执行</span></span><br><span class="line">app.get('/', function (req, res) &#123;  </span><br><span class="line">  res.send('hello world!')</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本路由，当服务器收到 post 请求 / 的时候，执行</span></span><br><span class="line">app.post('/', function (req, res) &#123;  </span><br><span class="line">  res.send('hello world!')</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000, function () &#123;  </span><br><span class="line">  console.log('running~');</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="接收表单数据"><a href="#接收表单数据" class="headerlink" title="接收表单数据"></a>接收表单数据</h3><ul>
<li><p><code>get</code>请求</p>
<blockquote>
<p>express 内置了一个 API ，可以直接通过 <code>req.query</code>来获取</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/comment'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取 url 地址中传递的参数</span></span><br><span class="line">  <span class="keyword">let</span> comment = req.query</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>post</code>请求</p>
<blockquote>
<p>在 Express 中没有内置获取表单 POST 请求体的 API ，这里我们需要使用一个第三方包：<code>body-parser</code></p>
<p><span class="exturl" data-url="aHR0cDovL2V4cHJlc3Nqcy5jb20vZW4vcmVzb3VyY2VzL21pZGRsZXdhcmUvYm9keS1wYXJzZXIuaHRtbA==" title="http://expressjs.com/en/resources/middleware/body-parser.html">官方文档<i class="fa fa-external-link"></i></span></p>
</blockquote>
<ul>
<li><p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save body-parser</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 body-parser</span></span><br><span class="line"><span class="comment">// 只要加入这个配置，则在 req 请求对象上会多出来一个属性：body，通过 req.body 来获取表单 POST 请求体数据了</span></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="keyword">var</span> jsonParser = bodyParser.json()</span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// POST /login gets urlencoded bodies</span></span><br><span class="line">app.post(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'welcome, '</span> + req.body.username)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// POST /api/users gets JSON bodies</span></span><br><span class="line">    app.post(<span class="string">'/api/users'</span>, jsonParser, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="路由处理"><a href="#路由处理" class="headerlink" title="路由处理"></a>路由处理</h3></li>
</ul>
</li>
</ul>
<blockquote>
<p>将所有路由代码单独写到一个文件中</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件 router.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="comment">// 创建一个路由容器</span></span><br><span class="line"><span class="keyword">let</span> router = express.Router()</span><br><span class="line"><span class="comment">// 把路由都挂载到 router 路由容器中</span></span><br><span class="line">router.get(<span class="string">'./student'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;&#125;)</span><br><span class="line"><span class="comment">// 将 router 导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件 app.js 挂载路由</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line"><span class="comment">// 挂载 放到配置信息后面</span></span><br><span class="line">app.use(router)</span><br></pre></td></tr></table></figure>

<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><blockquote>
<p>在 Express 这个框架中，默认不支持 Session 和 Cookie，但是我们可以使用第三方中间件：<code>express-session</code>来解决。</p>
</blockquote>
<ul>
<li><p>安装：<code>npm install express-session</code></p>
</li>
<li><p>使用：</p>
<p>添加 Session 数据：<code>req.session.foo = &#39;bar&#39;</code></p>
<p>访问 Session 数据：<code>req.session.foo</code></p>
<p>清除：<code>req.session.foo = null</code>,对象还在<br>删除：<code>delete req.session.xxx</code></p>
<p>Session 数据是存储在内存中的，服务器重启后就会消失，真正的生产环境会进行持久化存储</p>
<p><code>secret</code>: 配置加密字符串，它会在原有加密基础之上和这个字符串拼起来其加密，目的是为了增加安全性，防止客户端恶意伪造</p>
<p><code>saveUninitialized</code>: 决定是否默认分配一把钥匙。默认为 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 session </span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">'keyboard cat'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">false</span> </span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>当请求进来，会从第一个中间件开始进行匹配，如果匹配则进来，如果进入了却没有调用 next 则不会进行下一个<br>在 Express 中，对中间件有几种分类</p>
<ol>
<li><p>不关心请求路径和请求方法的中间件,也就是说任何请求都会进入这个中间件,中间件本身是一个方法，该方法接受三个参数</p>
<ul>
<li><p><code>Request</code> 请求对象</p>
</li>
<li><p><code>Response</code> 响应对象</p>
</li>
<li><p><code>next</code> 下一个中间件,不加这个会默认执行第一个，不会往下执行，加上会执行下一个中间件，next 可以进行匹配调用后面的，而不是一定是执行紧挨着的下一个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//1 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// next 传错误对象</span></span><br><span class="line"> app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">  next(err)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, next</span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'错误信息'</span>)</span><br><span class="line">&#125;) </span><br><span class="line"><span class="comment">// 输出为：错误信息</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>以 /xx 开头的路径中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以 /b 开头的路径都可以访问</span></span><br><span class="line">app.use(<span class="string">'/b'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res, next</span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(req.url) <span class="comment">// /b 后面的路径</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>严格匹配请求方法和请求路径的中间件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;  &#125;)</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h2 id="案例：留言板-1"><a href="#案例：留言板-1" class="headerlink" title="案例：留言板"></a>案例：留言板</h2>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> comments = [&#123;</span><br><span class="line">    name: <span class="string">'张三'</span>,</span><br><span class="line">    message: <span class="string">'今天天气不错！'</span>,</span><br><span class="line">    datatime: <span class="string">'2020-10-14'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'李四'</span>,</span><br><span class="line">    message: <span class="string">'今天天气不错！+1'</span>,</span><br><span class="line">    datatime: <span class="string">'2020-10-14'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'王五'</span>,</span><br><span class="line">    message: <span class="string">'今天天气不错！+2'</span>,</span><br><span class="line">    datatime: <span class="string">'2020-10-14'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'钢蛋'</span>,</span><br><span class="line">    message: <span class="string">'今天天气不错！+3'</span>,</span><br><span class="line">    datatime: <span class="string">'2020-10-14'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置模板引擎</span></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置接受 post 请求体</span></span><br><span class="line"><span class="keyword">var</span> jsonParser = bodyParser.json()</span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放文件资源</span></span><br><span class="line">app.use(<span class="string">'/public/'</span>, express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">    comments: comments</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/post'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'post.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/index'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受 get 提交的请求</span></span><br><span class="line"><span class="comment">// app.get('/comment',function (req, res) &#123;</span></span><br><span class="line"><span class="comment">//   // 获取 url 地址中传递的参数</span></span><br><span class="line"><span class="comment">//   let comment = req.query</span></span><br><span class="line"><span class="comment">//   comments.datatime = '2012-12-3'</span></span><br><span class="line"><span class="comment">//   comments.unshift(comment)</span></span><br><span class="line"><span class="comment">//   // 重定向</span></span><br><span class="line"><span class="comment">//   res.redirect('/')</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受 post 提交的请求</span></span><br><span class="line">app.post(<span class="string">'/comment'</span>, urlencodedParser,<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取 请求体中的数据</span></span><br><span class="line">  <span class="keyword">let</span> comment = req.body</span><br><span class="line">  comments.datatime = <span class="string">'2012-12-3'</span></span><br><span class="line">  comments.unshift(comment)</span><br><span class="line">  <span class="comment">// 重定向</span></span><br><span class="line">  res.redirect(<span class="string">'/'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running!'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="案例：crud"><a href="#案例：crud" class="headerlink" title="案例：crud"></a>案例：crud</h2><blockquote>
<p>实现文件的增删改查</p>
</blockquote>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://raw.githubusercontent.com/iamyujian/PicGo/master/img/image-20200208212828302.png" alt="image-20200208212828302.png"></p>
<h3 id="文档结构图"><a href="#文档结构图" class="headerlink" title="文档结构图"></a>文档结构图</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crud-express</span><br><span class="line">│  app.js				───────────── 项目启动文件</span><br><span class="line">│  db.json			───────────── 数据文件</span><br><span class="line">│  operate-data.js	───────── 数据操作文件</span><br><span class="line">│  package-lock.json	───────	项目依赖</span><br><span class="line">│  package.json	─────────────	项目信息</span><br><span class="line">│  </span><br><span class="line">├─node_modules	─────────────	包</span><br><span class="line">│          </span><br><span class="line">├─public				─────────────	公用文件</span><br><span class="line">│  ├─css</span><br><span class="line">│  │      dashboard.css</span><br><span class="line">│  │      </span><br><span class="line">│  └─js</span><br><span class="line">│          router.js ──────── 路由文件</span><br><span class="line">│          </span><br><span class="line">└─views		───────────────────	视图文件夹</span><br><span class="line">        add.html ──────────── 数据添加页面</span><br><span class="line">        edit.html	─────────── 修改页面</span><br><span class="line">        index.html	───────── 入口页面</span><br></pre></td></tr></table></figure>

<h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "art-template": "^4.13.2",</span><br><span class="line">    "body-parser": "^1.19.0",</span><br><span class="line">    "bootstrap": "^3.3.7",</span><br><span class="line">    "express": "^4.17.1",</span><br><span class="line">    "express-art-template": "^1.0.1"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h3><table>
<thead>
<tr>
<th align="center">请求方法</th>
<th align="center">请求路径</th>
<th align="center">get 参数</th>
<th align="center">post 参数</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET</td>
<td align="center">/</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">渲染首页</td>
</tr>
<tr>
<td align="center">GET</td>
<td align="center">/add</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">渲染添加页面</td>
</tr>
<tr>
<td align="center">POST</td>
<td align="center">/add</td>
<td align="center"></td>
<td align="center">name、age、gender、hobbies</td>
<td align="center">处理添加请求</td>
</tr>
<tr>
<td align="center">GET</td>
<td align="center">/edit</td>
<td align="center">id</td>
<td align="center"></td>
<td align="center">渲染编辑页面</td>
</tr>
<tr>
<td align="center">POST</td>
<td align="center">/edit</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">处理编辑请求</td>
</tr>
<tr>
<td align="center">GET</td>
<td align="center">/delete</td>
<td align="center">id</td>
<td align="center">name、age、gender、hobbies</td>
<td align="center">处理删除请求</td>
</tr>
</tbody></table>
<h3 id="views"><a href="#views" class="headerlink" title="views"></a>views</h3><h4 id="head信息"><a href="#head信息" class="headerlink" title="head信息"></a>head信息</h4><blockquote>
<p>所有 html 页面头信息一样</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"../../favicon.ico"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dashboard Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/node_modules/bootstrap/dist/css/bootstrap.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/public/css/dashboard.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"sub-header"</span>&gt;</span>Section title<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/add"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>添加信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table-responsive"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          &#123;&#123; each students &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; $value.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; $value.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; $value.gender &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; $value.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; $value.hobbies &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/edit?id=&#123;&#123; $value.id &#125;&#125;"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/delete?id=&#123;&#123; $value.id &#125;&#125;"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          &#123;&#123;/each&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="add-html"><a href="#add-html" class="headerlink" title="add.html"></a>add.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"sub-header"</span>&gt;</span>添加信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/add"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"names"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"names"</span> <span class="attr">minlength</span>=<span class="string">"2"</span> <span class="attr">maxlength</span>=<span class="string">"6"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span> 男</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"girl"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span> 女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"age"</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">maxlength</span>=<span class="string">"2"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox1"</span> <span class="attr">value</span>=<span class="string">"吃饭"</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span> 吃饭</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox2"</span> <span class="attr">value</span>=<span class="string">"睡觉"</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span> 睡觉</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox3"</span> <span class="attr">value</span>=<span class="string">"打豆豆"</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span> 打豆豆</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="edit-html"><a href="#edit-html" class="headerlink" title="edit.html"></a>edit.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"sub-header"</span>&gt;</span>添加信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"/edit"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置隐藏提交给服务器的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; student.id &#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"names"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"names"</span> <span class="attr">minlength</span>=<span class="string">"2"</span> <span class="attr">maxlength</span>=<span class="string">"6"</span> <span class="attr">name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">value</span>=<span class="string">"&#123;&#123; student.name &#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span> 男</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"girl"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span> 女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"age"</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"age"</span> <span class="attr">maxlength</span>=<span class="string">"2"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; student.age &#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox1"</span> <span class="attr">value</span>=<span class="string">"吃饭"</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span> 吃饭</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox2"</span> <span class="attr">value</span>=<span class="string">"睡觉"</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span> 睡觉</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox3"</span> <span class="attr">value</span>=<span class="string">"打豆豆"</span> <span class="attr">name</span>=<span class="string">"hobbies"</span>&gt;</span> 打豆豆</span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="db-json"><a href="#db-json" class="headerlink" title="db.json"></a>db.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"students"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">      <span class="attr">"gender"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">"hobbies"</span>: <span class="string">"吃饭、睡觉、打豆豆"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">      <span class="attr">"gender"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">"hobbies"</span>: <span class="string">"吃饭、睡觉、打豆豆"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./public/js/router'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="comment">// 配置模板引擎</span></span><br><span class="line">app.engine(<span class="string">'html'</span>, <span class="built_in">require</span>(<span class="string">'express-art-template'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置body-parser</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.use(router)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> operate_data = <span class="built_in">require</span>(<span class="string">'../../operate-data'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成路由容器</span></span><br><span class="line"><span class="keyword">let</span> router = express.Router()</span><br><span class="line"></span><br><span class="line"><span class="comment">//开放资源文件夹</span></span><br><span class="line">router.use(<span class="string">'/node_modules/'</span>,express.static(<span class="string">'./node_modules/'</span>))</span><br><span class="line">router.use(<span class="string">'/public/'</span>, express.static(<span class="string">'./public/'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染首页</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里将数据操作封装成函数调用</span></span><br><span class="line">  operate_data.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(<span class="string">'index.html'</span>, &#123;</span><br><span class="line">      <span class="comment">// data数据是字符串，转成对象</span></span><br><span class="line">      students: data</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染添加页面</span></span><br><span class="line">router.get(<span class="string">'/add'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'add.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理添加请求</span></span><br><span class="line">router.post(<span class="string">'/add'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> student = req.body</span><br><span class="line">  operate_data.save(student, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染编辑页面</span></span><br><span class="line">router.get(<span class="string">'/edit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  operate_data.findById(<span class="built_in">parseInt</span>(req.query.id), <span class="function"><span class="keyword">function</span> (<span class="params">err, student</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(<span class="string">'edit.html'</span>, &#123;</span><br><span class="line">      student: student</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理编辑请求</span></span><br><span class="line">router.post(<span class="string">'/edit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  operate_data.updataById(req.body, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// console.log(req.body);</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理删除请求</span></span><br><span class="line">router.get(<span class="string">'/delete'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> id = req.query.id</span><br><span class="line">  operate_data.delect(id, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">'Server error.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(<span class="string">'/'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导出路由</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>

<h3 id="operate-data-js-难点"><a href="#operate-data-js-难点" class="headerlink" title="operate-data.js (难点)"></a>operate-data.js (难点)</h3><blockquote>
<p>封装了数据增删改查操作，对异步请求数据的获取方式：回调函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dbpath = <span class="string">'./db.json'</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数据</span></span><br><span class="line"><span class="comment"> * 通过回调函数的方式获取异步读取文件的数据</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">exports.find = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(dbpath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// null 是为了区分 err</span></span><br><span class="line">    callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data).students)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *通过 ID 获取数据 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.findById = <span class="function"><span class="keyword">function</span> (<span class="params">id, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(dbpath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">    <span class="keyword">let</span> ret = students.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item.id === <span class="built_in">parseInt</span>(id)</span><br><span class="line">    &#125;)</span><br><span class="line">    callback(<span class="literal">null</span>, ret)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存数据</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">exports.save = <span class="function"><span class="keyword">function</span> (<span class="params">student, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(dbpath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">    student.id = students[students.length - <span class="number">1</span>].id + <span class="number">1</span></span><br><span class="line">    students.push(student)</span><br><span class="line">    <span class="comment">// 将字符串转为对象</span></span><br><span class="line">    <span class="keyword">let</span> fileData = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      students: students</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 将对象数据写入文件</span></span><br><span class="line">    fs.writeFile(dbpath, fileData, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新数据</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">exports.updataById = <span class="function"><span class="keyword">function</span> (<span class="params">student, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(dbpath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">    student.id = <span class="built_in">parseInt</span>(student.id)</span><br><span class="line">    <span class="comment">// es6的数组方法，如果item.id === student.id 条件的时候，find 会终止遍历，同时返回 item </span></span><br><span class="line">    <span class="keyword">let</span> stu = students.find(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item.id === student.id</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> student) &#123;</span><br><span class="line">      stu[key] = student[key]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> fileData = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      students: students</span><br><span class="line">    &#125;)</span><br><span class="line">    fs.writeFile(dbpath, fileData, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">exports.delect = <span class="function"><span class="keyword">function</span> (<span class="params">id, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(dbpath, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> students = <span class="built_in">JSON</span>.parse(data).students</span><br><span class="line">		<span class="comment">// es6的数组方法，如果item.id === id 条件的时候，会终止遍历，同时返回 item 的下标</span></span><br><span class="line">    <span class="keyword">let</span> delected = students.findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item.id === <span class="built_in">parseInt</span>(id)</span><br><span class="line">    &#125;)</span><br><span class="line">    students.splice(delected, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> fileData = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      students: students</span><br><span class="line">    &#125;)</span><br><span class="line">    fs.writeFile(dbpath, fileData, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err)</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown常用语法</title>
    <url>/2020/02/28/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/eoFLkWCOjcGH6VB.png" style="zoom: 50%;" />

<p>markdown 常用基础语法</p>
</center>
<a id="more"></a>

<h1 id="markdown基础语法"><a href="#markdown基础语法" class="headerlink" title="markdown基础语法"></a>markdown基础语法</h1><hr>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown支持六种级别的标题，对应的HTML标题h1~h6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># h1</span><br><span class="line"># h2</span><br><span class="line">## h3</span><br><span class="line">## h4</span><br><span class="line">### h5</span><br><span class="line">### h6</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="段落和区块引用"><a href="#段落和区块引用" class="headerlink" title="段落和区块引用"></a>段落和区块引用</h2><blockquote>
<p>使用 &gt; 可以强调文字使其高亮显示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<hr>
<h2 id="插入链接和图片"><a href="#插入链接和图片" class="headerlink" title="插入链接和图片"></a>插入链接和图片</h2><p>链接和图片的唯一区别就是最前方添加了一个感叹号。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[点击跳转至百度](http:&#x2F;&#x2F;www.baidu.com)或者直接使用链接地址&lt;www.baidu.com&gt;</span><br><span class="line">![图片](1.png &quot;提示信息&quot;)</span><br><span class="line"></span><br><span class="line">还可以使用：&lt;img src&#x3D;&quot;1.jpg&quot; style&#x3D;&quot;zoom: 15%;&quot; &#x2F;&gt;，还可以通过style调整显示大小</span><br></pre></td></tr></table></figure>
<p>效果如下：<br>&lt;<span class="exturl" data-url="aHR0cDovL3d3dy5iYWlkdS5jb20mZ3Q7" title="http://www.baidu.com&gt;">www.baidu.com&gt;<i class="fa fa-external-link"></i></span><br><a href="www.baidu.com">点击跳转至百度</a></p>
<p><img src="https://i.loli.net/2020/02/28/z5pHRyv8ieYXQfj.png" alt=""></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>无序列表使用*或+或-标识</li>
<li>有序列表使用数字加 . 标识</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 黄瓜</span><br><span class="line">+ 玉米</span><br><span class="line">- 茄子</span><br><span class="line">1.黄瓜</span><br><span class="line">2.玉米</span><br><span class="line">3.茄子</span><br></pre></td></tr></table></figure>

<ul>
<li>黄瓜</li>
</ul>
<ul>
<li>玉米</li>
</ul>
<ul>
<li>茄子</li>
</ul>
<ol>
<li>黄瓜</li>
<li>玉米</li>
<li>茄子</li>
</ol>
<hr>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*这里是斜体*</span><br><span class="line">_这里是斜体_</span><br><span class="line"></span><br><span class="line">**这里是加粗**</span><br><span class="line">__这里是加粗__</span><br><span class="line"></span><br><span class="line">~~这是删除线~~</span><br><span class="line"></span><br><span class="line">&lt;u&gt;这是下划线&lt;&#x2F;u&gt;</span><br><span class="line"></span><br><span class="line">脚注[^要注明的文本]</span><br></pre></td></tr></table></figure>

<p><em>这里是斜体</em><br><em>这里是斜体</em></p>
<p><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p>
<p><del>这是删除线</del></p>
<p><u>这是下划线</u></p>
<p>脚注[^要注明的文本]</p>
<hr>
<h2 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h2><ul>
<li><p>行内代码使用反引号包裹起来</p>
</li>
<li><p>整段代码使用两个以上的反引号进行包裹</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一段&#96;var x &#x3D; 3&#96;行内代码</span><br><span class="line"></span><br><span class="line">&#96;&#96;fun (x: Int, y: Int): Int &#123;</span><br><span class="line">  return x + y</span><br><span class="line">&#125;&#96;&#96;</span><br></pre></td></tr></table></figure>

<p>这是一段<code>var x = 3</code>行内代码</p>
<p><code>fun (x: Int, y: Int): Int {
  return x + y
}</code></p>
<hr>
<h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :----- | -----: | :------: |</span><br><span class="line">| 单元格 | 单元格 |  单元格  |</span><br><span class="line">| 单元格 | 单元格 |  单元格  |</span><br><span class="line">或</span><br><span class="line">| | | | 即可</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<p>注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。</p>
<hr>
<h2 id="特殊符号处理"><a href="#特殊符号处理" class="headerlink" title="特殊符号处理"></a>特殊符号处理</h2><p>使用反斜杠 \  插入语法中用到的特殊符号。主要有一下几种特殊符号需要处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">&#96;   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure>

<p>例如：如果你需要插入反斜杠，就连续输入两个反斜杠即可：\\=&gt;\</p>
<p>注：在内容中输入以上特殊符号的时候一定要注意转义，否则将导致内容显示不全，甚至排版混乱。</p>
<hr>
<h2 id="文字上色"><a href="#文字上色" class="headerlink" title="文字上色"></a>文字上色</h2><p>markdown不能给文字上色。但你可以这么做：</p>
<ol>
<li>先用markdown编辑完成</li>
<li>导出为html，在需要上色的部分手动添加标签<code>&lt;font color=&#39;#ff000&#39;&gt;&lt;/font&gt;</code>保存即可。</li>
</ol>
<hr>
<h2 id="typora画流程图等"><a href="#typora画流程图等" class="headerlink" title="typora画流程图等"></a>typora画流程图等</h2><p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p>支持 html 语法<br>直接使用：<code>&lt;center&gt;&lt;/center&gt;</code> 标签内的内容都会居中</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript风格指南-Airbnb</title>
    <url>/2020/02/28/JavaScript%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97-Airbnb/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/GOegLivSJwnFt2s.jpg" style="zoom: 50%;"/>

<p>JavaScript最合理的方法 A mostly reasonable approach to JavaScript</p>
</center>
<a id="more"></a>

<blockquote>
<p><strong>注意</strong>: 这个指南假定你正在使用<span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmlv" title="https://babeljs.io">Babel<i class="fa fa-external-link"></i></span>， 并且需要你使用或等效的使用<span class="exturl" data-url="aHR0cHM6Ly9ucG1qcy5jb20vYmFiZWwtcHJlc2V0LWFpcmJuYg==" title="https://npmjs.com/babel-preset-airbnb">babel-preset-airbnb<i class="fa fa-external-link"></i></span>。 同时假定你在你的应用里安装了带有或等效的<span class="exturl" data-url="aHR0cHM6Ly9ucG1qcy5jb20vYWlyYm5iLWJyb3dzZXItc2hpbXM=" title="https://npmjs.com/airbnb-browser-shims">airbnb-browser-shims<i class="fa fa-external-link"></i></span>的<br><code>shims/polyfills</code></p>
</blockquote>
<p>这个指南支持的其他语言翻译版请看 <a href="#translation">Translation</a></p>
<p>Other Style Guides</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L3RyZWUvZXM1LWRlcHJlY2F0ZWQvZXM1" title="https://github.com/airbnb/javascript/tree/es5-deprecated/es5">ES5 (已废弃)<i class="fa fa-external-link"></i></span></li>
<li><a href="react/">React</a></li>
<li><a href="css-in-javascript/">CSS-in-JavaScript</a></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9jc3M=" title="https://github.com/airbnb/css">CSS &amp; Sass<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9ydWJ5" title="https://github.com/airbnb/ruby">Ruby<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol>
<li><a href="#types">Types</a></li>
<li><a href="#references">References</a></li>
<li><a href="#objects">Objects</a></li>
<li><a href="#arrays">Arrays</a></li>
<li><a href="#destructuring">Destructuring</a></li>
<li><a href="#strings">Strings</a></li>
<li><a href="#functions">Functions</a></li>
<li><a href="#arrow-functions">Arrow Functions</a></li>
<li><a href="#classes--constructors">Classes &amp; Constructors</a></li>
<li><a href="#modules">Modules</a></li>
<li><a href="#iterators-and-generators">Iterators and Generators</a></li>
<li><a href="#properties">Properties</a></li>
<li><a href="#variables">Variables</a></li>
<li><a href="#hoisting">Hoisting</a></li>
<li><a href="#comparison-operators--equality">Comparison Operators &amp; Equality</a></li>
<li><a href="#blocks">Blocks</a></li>
<li><a href="#control-statements">Control Statements</a></li>
<li><a href="#comments">Comments</a></li>
<li><a href="#whitespace">Whitespace</a></li>
<li><a href="#commas">Commas</a></li>
<li><a href="#semicolons">Semicolons</a></li>
<li><a href="#type-casting--coercion">Type Casting &amp; Coercion</a></li>
<li><a href="#naming-conventions">Naming Conventions</a></li>
<li><a href="#accessors">Accessors</a></li>
<li><a href="#events">Events</a></li>
<li><a href="#jquery">jQuery</a></li>
<li><a href="#ecmascript-5-compatibility">ECMAScript 5 Compatibility</a></li>
<li><a href="#ecmascript-6-es-2015-styles">ECMAScript 6+ (ES 2015+) Styles</a></li>
<li><a href="#standard-library">Standard Library</a></li>
<li><a href="#testing">Testing</a></li>
<li><a href="#performance">Performance</a></li>
<li><a href="#resources">Resources</a></li>
<li><a href="#in-the-wild">In the Wild</a></li>
<li><a href="#translation">Translation</a></li>
<li><a href="#the-javascript-style-guide-guide">The JavaScript Style Guide Guide</a></li>
<li><a href="#chat-with-us-about-javascript">Chat With Us About JavaScript</a></li>
<li><a href="#contributors">Contributors</a></li>
<li><a href="#license">License</a></li>
<li><a href="#amendments">Amendments</a></li>
</ol>
<h1 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h1><p>  <a name="1.1"></a><br>  <a name="types--primitives"></a></p>
<ul>
<li><p><a href="#types--primitives">1.1</a> 基本类型: 你可以直接获取到基本类型的值</p>
<ul>
<li><code>string</code></li>
<li><code>number</code></li>
<li><code>boolean</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
<li><code>symbol</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Symbols 不能被正确的polyfill。 所以在不能原生支持symbol类型的环境[浏览器]中，不应该使用 symbol 类型。</li>
</ul>
<p><a name="1.2"></a><br><a name="types--complex"></a></p>
</li>
<li><p><a href="#types--complex">1.2</a>  复杂类型: 复杂类型赋值是获取到他的引用的值。 相当于传引用</p>
<ul>
<li><code>object</code></li>
<li><code>array</code></li>
<li><code>function</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>  <a name="2.1"></a><br>  <a name="references--prefer-const"></a></p>
<ul>
<li><p><a href="#references--prefer-const">2.1</a> 所有的赋值都用<code>const</code>，避免使用<code>var</code>. eslint: <a href="http://eslint.org/docs/rules/prefer-const.html" target="_blank" rel="noopener"><code>prefer-const</code></a>, <a href="http://eslint.org/docs/rules/no-const-assign.html" target="_blank" rel="noopener"><code>no-const-assign</code></a></p>
<blockquote>
<p>Why? 因为这个确保你不会改变你的初始值，重复引用会导致bug和代码难以理解</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p><a name="2.2"></a><br><a name="references--disallow-var"></a></p>
</li>
<li><p><a href="#references--disallow-var">2.2</a> 如果你一定要对参数重新赋值，那就用<code>let</code>，而不是<code>var</code>. eslint: <a href="http://eslint.org/docs/rules/no-var.html" target="_blank" rel="noopener"><code>no-var</code></a></p>
<blockquote>
<p>Why? 因为<code>let</code>是块级作用域，而<code>var</code>是函数级作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, use the let.</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="2.3"></a><br><a name="references--block-scope"></a></p>
</li>
<li><p><a href="#references--block-scope">2.3</a> 注意： <code>let</code>、<code>const</code>都是块级作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const 和 let 都只存在于它定义的那个块级作用域</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h1><p>  <a name="3.1"></a><br>  <a name="objects--no-new"></a></p>
<ul>
<li><p><a href="#objects--no-new">3.1</a> 使用字面值创建对象. eslint: <a href="http://eslint.org/docs/rules/no-new-object.html" target="_blank" rel="noopener"><code>no-new-object</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="3.2"></a><br><a name="es6-computed-properties"></a></p>
</li>
<li><p><a href="#es6-computed-properties">3.2</a> 当创建一个带有动态属性名的对象时，用计算后属性名</p>
<blockquote>
<p>Why? 这可以使你将定义的所有属性放在对象的一个地方.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`a key named <span class="subst">$&#123;k&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good getKey('enabled')是动态属性名</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="3.3"></a><br><a name="es6-object-shorthand"></a></p>
</li>
<li><p><a href="#es6-object-shorthand">3.3</a> 用对象方法简写. eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="noopener"><code>object-shorthand</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象的方法</span></span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="3.4"></a><br><a name="es6-object-concise"></a></p>
</li>
<li><p><a href="#es6-object-concise">3.4</a> 用属性值缩写. eslint: <a href="http://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="noopener"><code>object-shorthand</code></a></p>
<blockquote>
<p>Why? 这样写的更少且更可读</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker: lukeSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="3.5"></a><br><a name="objects--grouped-shorthand"></a></p>
</li>
<li><p><a href="#objects--grouped-shorthand">3.5</a> 将你的所有缩写放在对象声明的开始.</p>
<blockquote>
<p>Why? 这样也是为了更方便的知道有哪些属性用了缩写.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</span><br><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJediWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="3.6"></a><br><a name="objects--quoted-props"></a></p>
</li>
<li><p><a href="#objects--quoted-props">3.6</a> 只对那些无效的标示使用引号 <code>&#39;&#39;</code>. eslint: <a href="http://eslint.org/docs/rules/quote-props.html" target="_blank" rel="noopener"><code>quote-props</code></a></p>
<blockquote>
<p>Why? 通常我们认为这种方式主观上易读。他优化了代码高亮，并且页更容易被许多JS引擎压缩。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bad = &#123;</span><br><span class="line">  <span class="string">'foo'</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">'bar'</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> good = &#123;</span><br><span class="line">  foo: <span class="number">3</span>,</span><br><span class="line">  bar: <span class="number">4</span>,</span><br><span class="line">  <span class="string">'data-blah'</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="3.7"></a><br><a name="objects--prototype-builtins"></a></p>
</li>
<li><p><a href="#objects--prototype-builtins">3.7</a> 不要直接调用<code>Object.prototype</code>上的方法，如<code>hasOwnProperty</code>, <code>propertyIsEnumerable</code>, <code>isPrototypeOf</code>。</p>
<blockquote>
<p>Why? 在一些有问题的对象上， 这些方法可能会被屏蔽掉 - 如：<code>{ hasOwnProperty: false }</code> - 或这是一个空对象<code>Object.create(null)</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(object.hasOwnProperty(key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, key));</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> has = <span class="built_in">Object</span>.prototype.hasOwnProperty; <span class="comment">// 在模块作用内做一次缓存</span></span><br><span class="line"><span class="comment">/* or */</span></span><br><span class="line"><span class="keyword">import</span> has <span class="keyword">from</span> <span class="string">'has'</span>; <span class="comment">// https://www.npmjs.com/package/has</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">console</span>.log(has.call(object, key));</span><br></pre></td></tr></table></figure>

<p><a name="3.8"></a><br><a name="objects--rest-spread"></a></p>
</li>
<li><p><a href="#objects--rest-spread">3.8</a> 对象浅拷贝时，更推荐使用扩展运算符[就是<code>...</code>运算符]，而不是<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener"><code>Object.assign</code></a>。获取对象指定的几个属性时，用对象的rest解构运算符[也是<code>...</code>运算符]更好。</p>
<ul>
<li>这一段不太好翻译出来， 大家看下面的例子就懂了。^.^</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(original, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;); <span class="comment">// this mutates `original` ಠ_ಠ</span></span><br><span class="line"><span class="keyword">delete</span> copy.a; <span class="comment">// so does this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, original, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;); <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good es6扩展运算符 ...</span></span><br><span class="line"><span class="keyword">const</span> original = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> copy = &#123; ...original, <span class="attr">c</span>: <span class="number">3</span> &#125;; <span class="comment">// copy =&gt; &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rest 赋值运算符</span></span><br><span class="line"><span class="keyword">const</span> &#123; a, ...noA &#125; = copy; <span class="comment">// noA =&gt; &#123; b: 2, c: 3 &#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>  <a name="4.1"></a><br>  <a name="arrays--literals"></a></p>
<ul>
<li><p><a href="#arrays--literals">4.1</a> 用字面量赋值。 eslint: <a href="http://eslint.org/docs/rules/no-array-constructor.html" target="_blank" rel="noopener"><code>no-array-constructor</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = [];</span><br></pre></td></tr></table></figure>

<p><a name="4.2"></a><br><a name="arrays--push"></a></p>
</li>
<li><p><a href="#arrays--push">4.2</a> 用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvcHVzaA==" title="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array#push<i class="fa fa-external-link"></i></span> 代替直接向数组中添加一个值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure>

<p><a name="4.3"></a><br><a name="es6-array-spreads"></a></p>
</li>
<li><p><a href="#es6-array-spreads">4.3</a> 用扩展运算符做数组浅拷贝，类似上面的对象浅拷贝</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i += <span class="number">1</span>) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure>

<p><a name="4.4"></a><br><a name="arrays--from-iterable"></a></p>
</li>
<li><p><a href="#arrays--from-iterable">4.4</a> 用 <code>...</code> 运算符而不是<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener"><code>Array.from</code></a>来将一个可迭代的对象转换成数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> nodes = [...foo];</span><br></pre></td></tr></table></figure>

<p><a name="4.5"></a><br><a name="arrays--from-array-like"></a></p>
</li>
<li><p><a href="#arrays--from-array-like">4.5</a> 用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener"><code>Array.from</code></a> 去将一个类数组对象转成一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrLike = &#123; <span class="number">0</span>: <span class="string">'foo'</span>, <span class="number">1</span>: <span class="string">'bar'</span>, <span class="number">2</span>: <span class="string">'baz'</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.prototype.slice.call(arrLike);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.from(arrLike);</span><br></pre></td></tr></table></figure>

<p><a name="4.6"></a><br><a name="arrays--mapping"></a></p>
</li>
<li><p><a href="#arrays--mapping">4.6</a> 用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener"><code>Array.from</code></a> 而不是 <code>...</code> 运算符去做map遍历。 因为这样可以避免创建一个临时数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = [...foo].map(bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="built_in">Array</span>.from(foo, bar);</span><br></pre></td></tr></table></figure>

<p><a name="4.7"></a><br><a name="arrays--callback-return"></a></p>
</li>
<li><p><a href="#arrays--callback-return">4.7</a> 在数组方法的回调函数中使用 return 语句。 如果函数体由一条返回一个表达式的语句组成， 并且这个表达式没有副作用， 这个时候可以忽略return，详见 <a href="#arrows--implicit-return">8.2</a>. eslint: <a href="http://eslint.org/docs/rules/array-callback-return" target="_blank" rel="noopener"><code>array-callback-return</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good 函数只有一个语句</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 没有返回值， 因为在第一次迭代后acc 就变成undefined了</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">acc, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = acc.concat(item);</span><br><span class="line">  acc[index] = flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params">acc, item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> flatten = acc.concat(item);</span><br><span class="line">  acc[index] = flatten;</span><br><span class="line">  <span class="keyword">return</span> flatten;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">inbox.filter(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; subject, author &#125; = msg;</span><br><span class="line">  <span class="keyword">if</span> (subject === <span class="string">'Mockingbird'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> author === <span class="string">'Harper Lee'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a name="4.8"></a><br><a name="arrays--bracket-newline"></a></p>
</li>
<li><p><a href="#arrays--bracket-newline">4.8</a> 如果一个数组有很多行，在数组的 <code>[</code> 后和 <code>]</code> 前断行。 请看下面示例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectInArray = [&#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  id: <span class="number">2</span>,</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberInArray = [</span><br><span class="line">  <span class="number">1</span>, <span class="number">2</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectInArray = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberInArray = [</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h1><p>  <a name="5.1"></a><br>  <a name="destructuring--object"></a></p>
<ul>
<li><p><a href="#destructuring--object">5.1</a> 用对象的解构赋值来获取和使用对象某个或多个属性值。 eslint: <a href="https://eslint.org/docs/rules/prefer-destructuring" target="_blank" rel="noopener"><code>prefer-destructuring</code></a></p>
<blockquote>
<p>Why? 解构保存了这些属性的临时值/引用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = user;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="5.2"></a><br><a name="destructuring--array"></a></p>
</li>
<li><p><a href="#destructuring--array">5.2</a> 用数组解构.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure>

<p><a name="5.3"></a><br><a name="destructuring--object-over-array"></a></p>
</li>
<li><p><a href="#destructuring--object-over-array">5.3</a> 多个返回值用对象的解构，而不是数据解构。</p>
<blockquote>
<p>Why? 你可以在后期添加新的属性或者变换变量的顺序而不会打破原有的调用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 然后就是见证奇迹的时刻</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者需要想一想返回值的顺序</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// oops， 奇迹又发生了</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者只需要选择他想用的值就好了</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, top &#125; = processInput(input);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h1><p>  <a name="6.1"></a><br>  <a name="strings--quotes"></a></p>
<ul>
<li><p><a href="#strings--quotes">6.1</a> 对string用单引号 <code>&#39;&#39;</code> 。 eslint: <a href="https://eslint.org/docs/rules/quotes.html" target="_blank" rel="noopener"><code>quotes</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Capt. Janeway"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 样例应该包含插入文字或换行</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">`Capt. Janeway`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Capt. Janeway'</span>;</span><br></pre></td></tr></table></figure>

<p><a name="6.2"></a><br><a name="strings--line-length"></a></p>
</li>
<li><p><a href="#strings--line-length">6.2</a> 超过100个字符的字符串不应该用string串联成多行。</p>
<blockquote>
<p>Why? 被折断的字符串工作起来是糟糕的而且使得代码更不易被搜索。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></span><br><span class="line"><span class="string">of Batman. When you stop to think about how Batman had anything to do \</span></span><br><span class="line"><span class="string">with this, you would get nowhere \</span></span><br><span class="line"><span class="string">fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</span><br><span class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</span><br><span class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</span><br></pre></td></tr></table></figure>

<p><a name="6.3"></a><br><a name="es6-template-literals"></a></p>
</li>
<li><p><a href="#es6-template-literals">6.3</a> 用字符串模板而不是字符串拼接来组织可编程字符串。 eslint: <a href="https://eslint.org/docs/rules/prefer-template.html" target="_blank" rel="noopener"><code>prefer-template</code></a> <a href="https://eslint.org/docs/rules/template-curly-spacing" target="_blank" rel="noopener"><code>template-curly-spacing</code></a></p>
<blockquote>
<p>Why? 模板字符串更具可读性、语法简洁、字符串插入参数。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123; name &#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="6.4"></a><br><a name="strings--eval"></a></p>
</li>
<li><p><a href="#strings--eval">6.4</a> 永远不要在字符串中用<code>eval()</code>，他就是潘多拉盒子。 eslint: <a href="https://eslint.org/docs/rules/no-eval" target="_blank" rel="noopener"><code>no-eval</code></a></p>
<p><a name="6.5"></a><br><a name="strings--escaping"></a></p>
</li>
<li><p><a href="#strings--escaping">6.5</a> 不要使用不必要的转义字符。eslint: <a href="http://eslint.org/docs/rules/no-useless-escape" target="_blank" rel="noopener"><code>no-useless-escape</code></a></p>
<blockquote>
<p>Why? 反斜线可读性差，所以他们只在必须使用时才出现哦</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' \i\s \"quoted\"'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'\'this\' is "quoted"'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//best</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">`my name is '<span class="subst">$&#123;name&#125;</span>'`</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><p>  <a name="7.1"></a><br>  <a name="functions--declarations"></a></p>
<ul>
<li><p><a href="#functions--declarations">7.1</a> 用命名函数表达式而不是函数声明。eslint: <a href="http://eslint.org/docs/rules/func-style" target="_blank" rel="noopener"><code>func-style</code></a></p>
<blockquote>
<p>函数表达式： const func = function () {}</p>
</blockquote>
<blockquote>
<p>函数声明： function func() {}</p>
</blockquote>
<blockquote>
<p>Why? 函数声明时作用域被提前了，这意味着在一个文件里函数很容易（太容易了）在其定义之前被引用。这样伤害了代码可读性和可维护性。如果你发现一个函数有大又复杂，这个函数妨碍这个文件其他部分的理解性，这可能就是时候把这个函数单独抽成一个模块了。别忘了给表达式显示的命名，不用管这个名字是不是由一个确定的变量推断出来的，这消除了由匿名函数在错误调用栈产生的所有假设，这在现代浏览器和类似babel编译器中很常见 (<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L2lzc3Vlcy83OTQ=" title="https://github.com/airbnb/javascript/issues/794">Discussion<i class="fa fa-external-link"></i></span>)</p>
</blockquote>
<blockquote>
<p>Why? 这一段还不理解这种错误发生的场景，所以只能直译过来了， 另附<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0I2Z1bmN0aW9ucy0tZGVjbGFyYXRpb25z" title="https://github.com/airbnb/javascript#functions--declarations">原文<i class="fa fa-external-link"></i></span><br>Why? Function declarations are hoisted, which means that it’s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function’s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it’s time to extract it to its own module! Don’t forget to explicitly name the expression, regardless of whether or not the name is inferred from the containing variable (which is often the case in modern browsers or when using compilers such as Babel). This eliminates any assumptions made about the Error’s call stack. (<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L2lzc3Vlcy83OTQ=" title="https://github.com/airbnb/javascript/issues/794">Discussion<i class="fa fa-external-link"></i></span>)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// lexical name distinguished from the variable-referenced invocation(s)</span></span><br><span class="line"><span class="comment">// 函数表达式名和声明的函数名是不一样的</span></span><br><span class="line"><span class="keyword">const</span> short = <span class="function"><span class="keyword">function</span> <span class="title">longUniqueMoreDescriptiveLexicalFoo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="7.2"></a><br><a name="functions--iife"></a></p>
</li>
<li><p><a href="#functions--iife">7.2</a> 把立即执行函数包裹在圆括号里。 eslint: <a href="http://eslint.org/docs/rules/wrap-iife.html" target="_blank" rel="noopener"><code>wrap-iife</code></a></p>
<blockquote>
<p>Why? immediately invoked function expression = IIFE<br>Why? 一个立即调用的函数表达式是一个单元 - 把它和他的调用者（圆括号）包裹起来，在括号中可以清晰的地表达这些。<br>Why? 注意：在模块化世界里，你几乎用不着 IIFE</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// immediately-invoked function expression (IIFE)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>

<p><a name="7.3"></a><br><a name="functions--in-blocks"></a></p>
</li>
<li><p><a href="#functions--in-blocks">7.3</a> 不要在非函数块（if、while等等）内声明函数。把这个函数分配给一个变量。浏览器会允许你这样做，但浏览器解析方式不同，这是一个坏消息。【详见<code>no-loop-func</code>】 eslint: <a href="http://eslint.org/docs/rules/no-loop-func.html" target="_blank" rel="noopener"><code>no-loop-func</code></a></p>
<p><a name="7.4"></a><br><a name="functions--note-on-blocks"></a></p>
</li>
<li><p><a href="#functions--note-on-blocks">7.4</a> <strong>Note:</strong> 在ECMA-262中 [块 <code>block</code>] 的定义是： 一系列的语句； 但是函数声明不是一个语句。 函数表达式是一个语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="7.5"></a><br><a name="functions--arguments-shadow"></a></p>
</li>
<li><p><a href="#functions--arguments-shadow">7.5</a> 不要用<code>arguments</code>命名参数。他的优先级高于每个函数作用域自带的 <code>arguments</code> 对象， 这会导致函数自带的 <code>arguments</code> 值被覆盖</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name, options, arguments</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name, options, args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="7.6"></a><br><a name="es6-rest"></a></p>
</li>
<li><p><a href="#es6-rest">7.6</a> 不要使用<code>arguments</code>，用rest语法<code>...</code>代替。 eslint: <a href="http://eslint.org/docs/rules/prefer-rest-params" target="_blank" rel="noopener"><code>prefer-rest-params</code></a></p>
<blockquote>
<p>Why? <code>...</code>明确你想用那个参数。而且rest参数是真数组，而不是类似数组的<code>arguments</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="7.7"></a><br><a name="es6-default-parameters"></a></p>
</li>
<li><p><a href="#es6-default-parameters">7.7</a> 用默认参数语法而不是在函数里对参数重新赋值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不， 我们不该改arguments</span></span><br><span class="line">  <span class="comment">// 第二： 如果 opts 的值为 false, 它会被赋值为 &#123;&#125;</span></span><br><span class="line">  <span class="comment">// 虽然你想这么写， 但是这个会带来一些细微的bug</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="7.8"></a><br><a name="functions--default-side-effects"></a></p>
</li>
<li><p><a href="#functions--default-side-effects">7.8</a> 默认参数避免副作用</p>
<blockquote>
<p>Why? 他会令人迷惑不解， 比如下面这个， a到底等于几， 这个需要想一下。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">a = b++</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">count();  <span class="comment">// 1</span></span><br><span class="line">count();  <span class="comment">// 2</span></span><br><span class="line">count(<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line">count();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p><a name="7.9"></a><br><a name="functions--defaults-last"></a></p>
</li>
<li><p><a href="#functions--defaults-last">7.9</a> 把默认参数赋值放在最后</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;, name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">name, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="7.10"></a><br><a name="functions--constructor"></a></p>
</li>
<li><p><a href="#functions--constructor">7.10</a> 不要用函数构造器创建函数。 eslint: <a href="http://eslint.org/docs/rules/no-new-func" target="_blank" rel="noopener"><code>no-new-func</code></a></p>
<blockquote>
<p>Why? 以这种方式创建函数将类似于字符串 eval()，这会打开漏洞。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="keyword">var</span> subtract = <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a - b'</span>);</span><br></pre></td></tr></table></figure>

<p><a name="7.11"></a><br><a name="functions--signature-spacing"></a></p>
</li>
<li><p><a href="#functions--signature-spacing">7.11</a> 函数签名部分要有空格。eslint: <a href="http://eslint.org/docs/rules/space-before-function-paren" target="_blank" rel="noopener"><code>space-before-function-paren</code></a> <a href="http://eslint.org/docs/rules/space-before-blocks" target="_blank" rel="noopener"><code>space-before-blocks</code></a></p>
<blockquote>
<p>Why? 统一性好，而且在你添加/删除一个名字的时候不需要添加/删除空格</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> y = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="7.12"></a><br><a name="functions--mutate-params"></a></p>
</li>
<li><p><a href="#functions--mutate-params">7.12</a> 不要改参数. eslint: <a href="http://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="noopener"><code>no-param-reassign</code></a></p>
<blockquote>
<p>Why? 操作参数对象对原始调用者会导致意想不到的副作用。 就是不要改参数的数据结构，保留参数原始值和数据结构。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.key = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(obj, <span class="string">'key'</span>) ? obj.key : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="7.13"></a><br><a name="functions--reassign-params"></a></p>
</li>
<li><p><a href="#functions--reassign-params">7.13</a> 不要对参数重新赋值。 eslint: <a href="http://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="noopener"><code>no-param-reassign</code></a></p>
<blockquote>
<p>Why? 参数重新赋值会导致意外行为，尤其是对 <code>arguments</code>。这也会导致优化问题，特别是在V8里</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!a) &#123; a = <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = a || <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f4</span>(<span class="params">a = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="7.14"></a><br><a name="functions--spread-vs-apply"></a></p>
</li>
<li><p><a href="#functions--spread-vs-apply">7.14</a> 用<code>spread</code>操作符<code>...</code>去调用多变的函数更好。 eslint: <a href="http://eslint.org/docs/rules/prefer-spread" target="_blank" rel="noopener"><code>prefer-spread</code></a></p>
<blockquote>
<p>Why? 这样更清晰，你不必提供上下文，而且你不能轻易地用<code>apply</code>来组成<code>new</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">new</span> (<span class="built_in">Function</span>.prototype.bind.apply(<span class="built_in">Date</span>, [<span class="literal">null</span>, <span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(...[<span class="number">2016</span>, <span class="number">8</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure>

<p><a name="7.15"></a><br><a name="functions--signature-invocation-indentation"></a></p>
</li>
<li><p><a href="#functions--signature-invocation-indentation">7.15</a> 调用或者书写一个包含多个参数的函数应该像这个指南里的其他多行代码写法一样： 每行值包含一个参数，每行逗号结尾。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar,</span></span></span><br><span class="line"><span class="function"><span class="params">             baz,</span></span></span><br><span class="line"><span class="function"><span class="params">             quux</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good 缩进不要太过分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  bar,</span></span></span><br><span class="line"><span class="function"><span class="params">  baz,</span></span></span><br><span class="line"><span class="function"><span class="params">  quux,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">console</span>.log(foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  foo,</span><br><span class="line">  bar,</span><br><span class="line">  baz,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h1><p>  <a name="8.1"></a><br>  <a name="arrows--use-them"></a></p>
<ul>
<li><p><a href="#arrows--use-them">8.1</a> 当你一定要用函数表达式（在回调函数里）的时候就用箭头表达式吧。 eslint: <a href="http://eslint.org/docs/rules/prefer-arrow-callback.html" target="_blank" rel="noopener"><code>prefer-arrow-callback</code></a>, <a href="http://eslint.org/docs/rules/arrow-spacing.html" target="_blank" rel="noopener"><code>arrow-spacing</code></a></p>
<blockquote>
<p>Why? 他创建了一个<code>this</code>的当前执行上下文的函数的版本，这通常就是你想要的；而且箭头函数是更简洁的语法</p>
</blockquote>
<blockquote>
<p>Why? 什么时候不用箭头函数： 如果你有一个相当复杂的函数，你可能会把这个逻辑移出到他自己的函数声明里。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a name="8.2"></a><br><a name="arrows--implicit-return"></a></p>
</li>
<li><p><a href="#arrows--implicit-return">8.2</a> 如果函数体由一个没有副作用的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9FeHByZXNzaW9uc19hbmRfT3BlcmF0b3JzI0V4cHJlc3Npb25z" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions">表达式<i class="fa fa-external-link"></i></span>语句组成，删除大括号和return。否则，继续用大括号和 <code>return</code> 语句。 eslint: <a href="https://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="noopener"><code>arrow-parens</code></a>, <a href="https://eslint.org/docs/rules/arrow-body-style.html" target="_blank" rel="noopener"><code>arrow-body-style</code></a></p>
<blockquote>
<p>Why? 语法糖，当多个函数链在一起的时候好读</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> <span class="string">`A string containing the <span class="subst">$&#123;number&#125;</span>.`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nextNumber = number + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`A string containing the <span class="subst">$&#123;nextNumber&#125;</span>.`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">number, index</span>) =&gt;</span> (&#123;</span><br><span class="line">  [index]: number</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式有副作用就不要用隐式return</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> val = callback();</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// Do something if callback returns true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// 这种情况会return bool = true, 不好</span></span><br><span class="line">foo(<span class="function"><span class="params">()</span> =&gt;</span> bool = <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">foo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  bool = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a name="8.3"></a><br><a name="arrows--paren-wrap"></a></p>
</li>
<li><p><a href="#arrows--paren-wrap">8.3</a> 万一表达式涉及多行，把他包裹在圆括号里更可读。</p>
<blockquote>
<p>Why? 这样清晰的显示函数的开始和结束</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod</span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>].map(<span class="function"><span class="params">httpMethod</span> =&gt;</span> (</span><br><span class="line">  <span class="built_in">Object</span>.prototype.hasOwnProperty.call(</span><br><span class="line">    httpMagicObjectWithAVeryLongName,</span><br><span class="line">    httpMethod</span><br><span class="line">  )</span><br><span class="line">));</span><br></pre></td></tr></table></figure>

<p><a name="8.4"></a><br><a name="arrows--one-arg-parens"></a></p>
</li>
<li><p><a href="#arrows--one-arg-parens">8.4</a> 如果你的函数只有一个参数并且函数体没有大括号，就删除圆括号。否则，参数总是放在圆括号里。 注意： 一直用圆括号也是没问题，只需要配置 <span class="exturl" data-url="aHR0cHM6Ly9lc2xpbnQub3JnL2RvY3MvcnVsZXMvYXJyb3ctcGFyZW5zI2Fsd2F5cw==" title="https://eslint.org/docs/rules/arrow-parens#always">“always” option<i class="fa fa-external-link"></i></span> for eslint. eslint: <a href="https://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="noopener"><code>arrow-parens</code></a></p>
<blockquote>
<p>Why? 这样少一些混乱， 其实没啥语法上的讲究，就保持一个风格。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">number</span> =&gt;</span> (</span><br><span class="line">  <span class="string">`A long string with the <span class="subst">$&#123;number&#125;</span>. It’s so long that we don’t want it to take up space on the .map line!`</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a name="8.5"></a><br><a name="arrows--confusing"></a></p>
</li>
<li><p><a href="#arrows--confusing">8.5</a> 避免箭头函数(<code>=&gt;</code>)和比较操作符（<code>&lt;=, &gt;=</code>）混淆. eslint: <a href="http://eslint.org/docs/rules/no-confusing-arrow" target="_blank" rel="noopener"><code>no-confusing-arrow</code></a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function"><span class="params">item</span> =&gt;</span> item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function">(<span class="params">item</span>) =&gt;</span> item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function"><span class="params">item</span> =&gt;</span> (item.height &gt; <span class="number">256</span> ? item.largeSize : item.smallSize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemHeight = <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; height, largeSize, smallSize &#125; = item;</span><br><span class="line">  <span class="keyword">return</span> height &gt; <span class="number">256</span> ? largeSize : smallSize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="8.6"></a><br><a name="whitespace--implicit-arrow-linebreak"></a></p>
</li>
<li><p><a href="#whitespace--implicit-arrow-linebreak">8.6</a> 在隐式return中强制约束函数体的位置， 就写在箭头后面。 eslint: <a href="https://eslint.org/docs/rules/implicit-arrow-linebreak" target="_blank" rel="noopener"><code>implicit-arrow-linebreak</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(foo) =&gt;</span><br><span class="line">  bar;</span><br><span class="line"></span><br><span class="line">(foo) =&gt;</span><br><span class="line">  (bar);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(foo) =&gt; bar;</span><br><span class="line">(foo) =&gt; (bar);</span><br><span class="line">(foo) =&gt; (</span><br><span class="line">   bar</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Classes-amp-Constructors"><a href="#Classes-amp-Constructors" class="headerlink" title="Classes &amp; Constructors"></a>Classes &amp; Constructors</h1><p>  <a name="9.1"></a><br>  <a name="constructors--use-class"></a></p>
<ul>
<li><p><a href="#constructors--use-class">9.1</a> 常用<code>class</code>，避免直接操作<code>prototype</code></p>
<blockquote>
<p>Why? <code>class</code>语法更简洁更易理解</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.queue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="9.2"></a><br><a name="constructors--extends"></a></p>
</li>
<li><p><a href="#constructors--extends">9.2</a> 用<code>extends</code>实现继承</p>
<blockquote>
<p>Why? 它是一种内置的方法来继承原型功能而不打破<code>instanceof</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">  Queue.apply(<span class="keyword">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="9.3"></a><br><a name="constructors--chaining"></a></p>
</li>
<li><p><a href="#constructors--chaining">9.3</a> 方法可以返回<code>this</code>来实现方法链</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> (<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  jump() &#123;</span><br><span class="line">    <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p>  <a name="9.4"></a><br>  <a name="constructors--tostring"></a></p>
<ul>
<li><p><a href="#constructors--tostring">9.4</a> 写一个定制的toString()方法是可以的，只要保证它是可以正常工作且没有副作用的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Jedi - <span class="subst">$&#123;<span class="keyword">this</span>.getName()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="9.5"></a><br><a name="constructors--no-useless"></a></p>
</li>
<li><p><a href="#constructors--no-useless">9.5</a> 如果没有具体说明，类有默认的构造方法。一个空的构造函数或只是代表父类的构造函数是不需要写的。 eslint: <a href="http://eslint.org/docs/rules/no-useless-constructor" target="_blank" rel="noopener"><code>no-useless-constructor</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 这种构造函数是不需要写的</span></span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rey</span> <span class="keyword">extends</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">    <span class="keyword">super</span>(...args);</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'Rey'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="9.6"></a><br><a name="classes--no-duplicate-members"></a></p>
</li>
<li><p><a href="#classes--no-duplicate-members">9.6</a> 避免重复类成员。 eslint: <a href="http://eslint.org/docs/rules/no-dupe-class-members" target="_blank" rel="noopener"><code>no-dupe-class-members</code></a></p>
<blockquote>
<p>Why? 重复类成员会默默的执行最后一个 —— 重复本身也是一个bug</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  bar() &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><p>  <a name="10.1"></a><br>  <a name="modules--use-them"></a></p>
<ul>
<li><p><a href="#modules--use-them">10.1</a> 用(<code>import</code>/<code>export</code>) 模块而不是无标准的模块系统。你可以随时转到你喜欢的模块系统。</p>
<blockquote>
<p>Why? 模块化是未来，让我们现在就开启未来吧。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = <span class="built_in">require</span>(<span class="string">'./AirbnbStyleGuide'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure>

<p><a name="10.2"></a><br><a name="modules--no-wildcard"></a></p>
</li>
<li><p><a href="#modules--no-wildcard">10.2</a> 不要用import通配符， 就是 <code>*</code> 这种方式</p>
<blockquote>
<p>Why? 这确保你有单个默认的导出</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br></pre></td></tr></table></figure>

<p><a name="10.3"></a><br><a name="modules--no-export-from-import"></a></p>
</li>
<li><p><a href="#modules--no-export-from-import">10.3</a> 不要直接从import中直接export</p>
<blockquote>
<p>Why? 虽然一行是简洁的，有一个明确的方式进口和一个明确的出口方式来保证一致性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure>

<p><a name="10.4"></a><br><a name="modules--no-duplicate-imports"></a></p>
</li>
<li><p><a href="#modules--no-duplicate-imports">10.4</a> 一个路径只 import 一次。<br>eslint: <a href="http://eslint.org/docs/rules/no-duplicate-imports" target="_blank" rel="noopener"><code>no-duplicate-imports</code></a></p>
<blockquote>
<p>Why? 从同一个路径下import多行会使代码难以维护</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="comment">// … some other imports … //</span></span><br><span class="line"><span class="keyword">import</span> &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123; named1, named2 &#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo, &#123;</span><br><span class="line">  named1,</span><br><span class="line">  named2,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br></pre></td></tr></table></figure>

<p><a name="10.5"></a><br><a name="modules--no-mutable-exports"></a></p>
</li>
<li><p><a href="#modules--no-mutable-exports">10.5</a> 不要到处可变的东西<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md" target="_blank" rel="noopener"><code>import/no-mutable-exports</code></a></p>
<blockquote>
<p>Why? 变化通常都是需要避免，特别是当你要输出可变的绑定。虽然在某些场景下可能需要这种技术，但总的来说应该导出常量。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; foo &#125;</span><br></pre></td></tr></table></figure>

<p><a name="10.6"></a><br><a name="modules--prefer-default-export"></a></p>
</li>
<li><p><a href="#modules--prefer-default-export">10.6</a> 在一个单一导出模块里，用 <code>export default</code> 更好。<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md" target="_blank" rel="noopener"><code>import/prefer-default-export</code></a></p>
<blockquote>
<p>Why? 鼓励使用更多文件，每个文件只做一件事情并导出，这样可读性和可维护性更好。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><a name="10.7"></a><br><a name="modules--imports-first"></a></p>
</li>
<li><p><a href="#modules--imports-first">10.7</a> <code>import</code> 放在其他所有语句之前。<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md" target="_blank" rel="noopener"><code>import/first</code></a></p>
<blockquote>
<p>Why? 让<code>import</code>放在最前面防止意外行为。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line">foo.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span>;</span><br><span class="line"><span class="keyword">import</span> bar <span class="keyword">from</span> <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line">foo.init();</span><br></pre></td></tr></table></figure>

<p><a name="10.8"></a><br><a name="modules--multiline-imports-over-newlines"></a></p>
</li>
<li><p><a href="#modules--multiline-imports-over-newlines">10.8</a> 多行import应该缩进，就像多行数组和对象字面量</p>
<blockquote>
<p>Why?  花括号与样式指南中每个其他花括号块遵循相同的缩进规则，逗号也是。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123;longNameA, longNameB, longNameC, longNameD, longNameE&#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  longNameA,</span><br><span class="line">  longNameB,</span><br><span class="line">  longNameC,</span><br><span class="line">  longNameD,</span><br><span class="line">  longNameE,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br></pre></td></tr></table></figure>

<p><a name="10.9"></a><br><a name="modules--no-webpack-loader-syntax"></a></p>
</li>
<li><p><a href="#modules--no-webpack-loader-syntax">10.9</a> 在import语句里不允许Webpack loader语法<br>eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md" target="_blank" rel="noopener"><code>import/no-webpack-loader-syntax</code></a></p>
<blockquote>
<p>Why? 一旦用Webpack语法在import里会把代码耦合到模块绑定器。最好是在<code>webpack.config.js</code>里写webpack loader语法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">'css!sass!foo.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">'style!css!bar.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> fooSass <span class="keyword">from</span> <span class="string">'foo.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> barCss <span class="keyword">from</span> <span class="string">'bar.css'</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Iterators-and-Generators"><a href="#Iterators-and-Generators" class="headerlink" title="Iterators and Generators"></a>Iterators and Generators</h1><p>  <a name="11.1"></a><br>  <a name="iterators--nope"></a></p>
<ul>
<li><p><a href="#iterators--nope">11.1</a> 不要用遍历器。用JavaScript高级函数代替<code>for-in</code>、 <code>for-of</code>。 eslint: <a href="http://eslint.org/docs/rules/no-iterator.html" target="_blank" rel="noopener"><code>no-iterator</code></a> <a href="http://eslint.org/docs/rules/no-restricted-syntax" target="_blank" rel="noopener"><code>no-restricted-syntax</code></a></p>
<blockquote>
<p>Why? 这强调了我们不可变的规则。 处理返回值的纯函数比副作用更容易。</p>
</blockquote>
<blockquote>
<p>Why? 用数组的这些迭代方法： <code>map()</code> / <code>every()</code> / <code>filter()</code> / <code>find()</code> / <code>findIndex()</code> / <code>reduce()</code> / <code>some()</code> / … , 用对象的这些方法 <code>Object.keys()</code> / <code>Object.values()</code> / <code>Object.entries()</code>  去产生一个数组， 这样你就能去遍历对象了。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">numbers.forEach(<span class="function"><span class="params">num</span> =&gt;</span> sum += num);</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best (use the functional force)</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> increasedByOne = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">  increasedByOne.push(numbers[i] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> increasedByOne = [];</span><br><span class="line">numbers.forEach(<span class="function"><span class="params">num</span> =&gt;</span> increasedByOne.push(num + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// best (keeping it functional)</span></span><br><span class="line"><span class="keyword">const</span> increasedByOne = numbers.map(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p><a name="11.2"></a><br><a name="generators--nope"></a></p>
</li>
<li><p><a href="#generators--nope">11.2</a> 现在不要用generator</p>
<blockquote>
<p>Why? 它在es5上支持的不好</p>
</blockquote>
<p><a name="11.3"></a><br><a name="generators--spacing"></a></p>
</li>
<li><p><a href="#generators--spacing">11.3</a> 如果你一定要用，或者你忽略<a href="#generators--nope">我们的建议</a>, 请确保它们的函数签名空格是得当的。 eslint: <a href="http://eslint.org/docs/rules/generator-star-spacing" target="_blank" rel="noopener"><code>generator-star-spacing</code></a></p>
<blockquote>
<p>Why? <code>function</code> 和 <code>*</code> 是同一概念关键字 - <code>*</code>不是<code>function</code>的修饰符，<code>function*</code>是一个和<code>function</code>不一样的独特结构</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="function"><span class="keyword">function</span> * (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> quux = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function"><span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very bad</span></span><br><span class="line"><span class="keyword">const</span> wat = <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">*</span></span><br><span class="line"><span class="function">(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h1><p>  <a name="12.1"></a><br>  <a name="properties--dot"></a></p>
<ul>
<li><p><a href="#properties--dot">12.1</a> 访问属性时使用点符号. eslint: <a href="http://eslint.org/docs/rules/dot-notation.html" target="_blank" rel="noopener"><code>dot-notation</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke[<span class="string">'jedi'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke.jedi;</span><br></pre></td></tr></table></figure>

<p><a name="12.2"></a><br><a name="properties--bracket"></a></p>
</li>
<li><p><a href="#properties--bracket">12.2</a> 当获取的属性是变量时用方括号<code>[]</code>取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isJedi = getProp(<span class="string">'jedi'</span>);</span><br></pre></td></tr></table></figure>

<p><a name="12.3"></a><br><a name="es2016-properties--exponentiation-operator"></a></p>
</li>
<li><p><a href="#es2016-properties--exponentiation-operator">12.3</a> 做幂运算时用幂操作符 <code>**</code> 。 eslint: <a href="https://eslint.org/docs/rules/no-restricted-properties" target="_blank" rel="noopener"><code>no-restricted-properties</code></a>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> binary = <span class="number">2</span> ** <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h1><p>  <a name="13.1"></a><br>  <a name="variables--const"></a></p>
<ul>
<li><p><a href="#variables--const">13.1</a>  用<code>const</code>或<code>let</code>声明变量。不这样做会导致全局变量。 我们想要避免污染全局命名空间。首长这样警告我们。 eslint: <a href="http://eslint.org/docs/rules/no-undef" target="_blank" rel="noopener"><code>no-undef</code></a> <a href="http://eslint.org/docs/rules/prefer-const" target="_blank" rel="noopener"><code>prefer-const</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">superPower = <span class="keyword">new</span> SuperPower();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superPower = <span class="keyword">new</span> SuperPower();</span><br></pre></td></tr></table></figure>

<p><a name="13.2"></a><br><a name="variables--one-const"></a></p>
</li>
<li><p><a href="#variables--one-const">13.2</a> 每个变量都用一个 <code>const</code> 或 <code>let</code>。 eslint: <a href="http://eslint.org/docs/rules/one-var.html" target="_blank" rel="noopener"><code>one-var</code></a></p>
<blockquote>
<p>Why? 这种方式很容易去声明新的变量，你不用去考虑把<code>;</code>调换成<code>,</code>，或者引入一个只有标点的不同的变化。这种做法也可以是你在调试的时候单步每个声明语句，而不是一下跳过所有声明。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// (compare to above, and try to spot the mistake)</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> dragonball = <span class="string">'z'</span>;</span><br></pre></td></tr></table></figure>

<p><a name="13.3"></a><br><a name="variables--const-let-group"></a></p>
</li>
<li><p><a href="#variables--const-let-group">13.3</a> <code>const</code>放一起，<code>let</code>放一起</p>
<blockquote>
<p>Why? 在你需要分配一个新的变量， 而这个变量依赖之前分配过的变量的时候，这种做法是有帮助的</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i, len, dragonball,</span><br><span class="line">    items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">let</span> length;</span><br></pre></td></tr></table></figure>

<p><a name="13.4"></a><br><a name="variables--define-where-used"></a></p>
</li>
<li><p><a href="#variables--define-where-used">13.4</a> 在你需要的地方声明变量，但是要放在合理的位置</p>
<blockquote>
<p>Why? <code>let</code> 和 <code>const</code> 都是块级作用域而不是函数级作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad - unnecessary function call</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setName(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hasName === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在需要的时候分配</span></span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setName(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a name="13.5"></a><br><a name="variables--no-chain-assignment"></a></p>
</li>
<li><p><a href="#variables--no-chain-assignment">13.5</a> 不要使用链接变量分配。 eslint: <a href="https://eslint.org/docs/rules/no-multi-assign" target="_blank" rel="noopener"><code>no-multi-assign</code></a></p>
<blockquote>
<p>Why? 链接变量分配创建隐式全局变量。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// JavaScript 将这一段解释为</span></span><br><span class="line">  <span class="comment">// let a = ( b = ( c = 1 ) );</span></span><br><span class="line">  <span class="comment">// let 只对变量 a 起作用; 变量 b 和 c 都变成了全局变量</span></span><br><span class="line">  <span class="keyword">let</span> a = b = c = <span class="number">1</span>;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b = a;</span><br><span class="line">  <span class="keyword">let</span> c = a;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `const` 也是如此</span></span><br></pre></td></tr></table></figure>

<p><a name="13.6"></a><br><a name="variables--unary-increment-decrement"></a></p>
</li>
<li><p><a href="#variables--unary-increment-decrement">13.6</a> 不要使用一元自增自减运算符（<code>++</code>， <code>--</code>）. eslint <a href="http://eslint.org/docs/rules/no-plusplus" target="_blank" rel="noopener"><code>no-plusplus</code></a></p>
<blockquote>
<p>Why? 根据eslint文档，一元增量和减量语句受到自动分号插入的影响，并且可能会导致应用程序中的值递增或递减的无声错误。 使用<code>num + = 1</code>而不是<code>num ++</code>或<code>num ++</code>语句来表达你的值也是更有表现力的。 禁止一元增量和减量语句还会阻止您无意地预增/预减值，这也会导致程序出现意外行为。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">num++;</span><br><span class="line">--num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> truthyCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> value = array[i];</span><br><span class="line">  sum += value;</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    truthyCount++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line">num += <span class="number">1</span>;</span><br><span class="line">num -= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = array.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> truthyCount = array.filter(<span class="built_in">Boolean</span>).length;</span><br></pre></td></tr></table></figure>

<p><a name="13.7"></a><br><a name="variables--linebreak"></a></p>
</li>
<li><p><a href="#variables--linebreak">13.7</a> 在赋值的时候避免在 <code>=</code> 前/后换行。 如果你的赋值语句超出 <a href="https://eslint.org/docs/rules/max-len.html" target="_blank" rel="noopener"><code>max-len</code></a>， 那就用小括号把这个值包起来再换行。 eslint <a href="https://eslint.org/docs/rules/operator-linebreak.html" target="_blank" rel="noopener"><code>operator-linebreak</code></a>.</p>
<blockquote>
<p>Why? 在 <code>=</code> 附近换行容易混淆这个赋值语句。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo =</span><br><span class="line">  superLongLongLongLongLongLongLongLongFunctionName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo</span><br><span class="line">  = <span class="string">'superLongLongLongLongLongLongLongLongString'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = (</span><br><span class="line">  superLongLongLongLongLongLongLongLongFunctionName()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'superLongLongLongLongLongLongLongLongString'</span>;</span><br></pre></td></tr></table></figure>

<p><a name="13.8"></a><br><a name="variables--no-unused-vars"></a></p>
</li>
<li><p><a href="#variables--no-unused-vars">13.8</a> 不允许有未使用的变量。 eslint: <a href="https://eslint.org/docs/rules/no-unused-vars" target="_blank" rel="noopener"><code>no-unused-vars</code></a></p>
<blockquote>
<p>Why? 一个声明了但未使用的变量更像是由于重构未完成产生的错误。这种在代码中出现的变量会使阅读者迷惑。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> some_unused_var = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写了没用</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">10</span>;</span><br><span class="line">y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量改了自己的值，也没有用这个变量</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="number">0</span>;</span><br><span class="line">z = z + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数定义了但未使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getX</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getXPlusY</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> y = a + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">alert(getXPlusY(x, y));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 'type' 即使没有使用也可以可以被忽略， 因为这个有一个 rest 取值的属性。</span></span><br><span class="line"><span class="comment">// 这是从对象中抽取一个忽略特殊字段的对象的一种形式</span></span><br><span class="line"><span class="keyword">var</span> &#123; type, ...coords &#125; = data;</span><br><span class="line"><span class="comment">// 'coords' 现在就是一个没有 'type' 属性的 'data' 对象</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h1><p>  <a name="14.1"></a><br>  <a name="hoisting--about"></a></p>
<ul>
<li><p><a href="#hoisting--about">14.1</a> <code>var</code>声明会被提前到他的作用域的最前面，它分配的值还没有提前。<code>const</code> 和 <code>let</code>被赋予了新的调用概念<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9sZXQjVGVtcG9yYWxfZGVhZF96b25lX2FuZF9lcnJvcnNfd2l0aF9sZXQ=" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let">时效区 —— Temporal Dead Zones (TDZ)<i class="fa fa-external-link"></i></span>。  重要的是要知道为什么 <span class="exturl" data-url="aHR0cDovL2VzLWRpc2NvdXJzZS5jb20vdC93aHktdHlwZW9mLWlzLW5vLWxvbmdlci1zYWZlLzE1" title="http://es-discourse.com/t/why-typeof-is-no-longer-safe/15">typeof不再安全<i class="fa fa-external-link"></i></span>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们知道这个不会工作，假设没有定义全局的notDefined</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在你引用的地方之后声明一个变量，他会正常输出是因为变量作用域上升。</span></span><br><span class="line"><span class="comment">// 注意： declaredButNotAssigned的值没有上升</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释器把变量声明提升到作用域最前面，</span></span><br><span class="line"><span class="comment">// 可以重写成如下例子， 二者意义相同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> declaredButNotAssigned;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 const， let就不一样了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> declaredButNotAssigned); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="keyword">const</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="14.2"></a><br><a name="hoisting--anon-expressions"></a></p>
</li>
<li><p><a href="#hoisting--anon-expressions">14.2</a> 匿名函数表达式和 <code>var</code> 情况相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="14.3"></a><br><a name="hoisting--named-expresions"></a></p>
</li>
<li><p><a href="#hoisting--named-expresions">14.3</a> 已命名函数表达式提升他的变量名，不是函数名或函数体</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数名和变量名一样是也如此</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="14.4"></a><br><a name="hoisting--declarations"></a></p>
</li>
<li><p><a href="#hoisting--declarations">14.4</a> 函数声明则提升了函数名和函数体</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>详情请见<span class="exturl" data-url="aHR0cDovL3d3dy5hZGVxdWF0ZWx5Z29vZC5jb20vMjAxMC8yL0phdmFTY3JpcHQtU2NvcGluZy1hbmQtSG9pc3Rpbmcv" title="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/">JavaScript Scoping &amp; Hoisting<i class="fa fa-external-link"></i></span> by <span class="exturl" data-url="aHR0cDovL3d3dy5hZGVxdWF0ZWx5Z29vZC5jb20v" title="http://www.adequatelygood.com/">Ben Cherry<i class="fa fa-external-link"></i></span>.</p>
</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Comparison-Operators-amp-Equality"><a href="#Comparison-Operators-amp-Equality" class="headerlink" title="Comparison Operators &amp; Equality"></a>Comparison Operators &amp; Equality</h1><p>  <a name="15.1"></a><br>  <a name="comparison--eqeqeq"></a></p>
<ul>
<li><p><a href="#comparison--eqeqeq">15.1</a> 用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>. eslint: <a href="http://eslint.org/docs/rules/eqeqeq.html" target="_blank" rel="noopener"><code>eqeqeq</code></a></p>
<p><a name="15.2"></a><br><a name="comparison--if"></a></p>
</li>
<li><p><a href="#comparison--if">15.2</a> 条件语句如’if’语句使用强制`ToBoolean’抽象方法来评估它们的表达式，并且始终遵循以下简单规则：</p>
<ul>
<li><strong>Objects</strong>   计算成 <strong>true</strong></li>
<li><strong>Undefined</strong> 计算成 <strong>false</strong></li>
<li><strong>Null</strong>      计算成 <strong>false</strong></li>
<li><strong>Booleans</strong>  计算成 <strong>the value of the boolean</strong></li>
<li><strong>Numbers</strong><ul>
<li><strong>+0, -0, or NaN</strong> 计算成 <strong>false</strong></li>
<li>其他 <strong>true</strong></li>
</ul>
</li>
<li><strong>Strings</strong><ul>
<li><code>&#39;&#39;</code> 计算成 <strong>false</strong></li>
<li>其他 <strong>true</strong></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="number">0</span>] &amp;&amp; []) &#123;</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// 数组（即使是空数组）是对象，对象会计算成true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="15.3"></a><br><a name="comparison--shortcuts"></a></p>
</li>
<li><p><a href="#comparison--shortcuts">15.3</a> 布尔值用缩写，而字符串和数字要明确比较对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (isValid === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isValid) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="15.4"></a><br><a name="comparison--moreinfo"></a></p>
</li>
<li><p><a href="#comparison--moreinfo">15.4</a> 更多信息请见Angus Croll的<span class="exturl" data-url="aHR0cHM6Ly9qYXZhc2NyaXB0d2VibG9nLndvcmRwcmVzcy5jb20vMjAxMS8wMi8wNy90cnV0aC1lcXVhbGl0eS1hbmQtamF2YXNjcmlwdC8jbW9yZS0yMTA4" title="https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108">真理、平等和JavaScript —— Truth Equality and JavaScript<i class="fa fa-external-link"></i></span></p>
<p><a name="15.5"></a><br><a name="comparison--switch-blocks"></a></p>
</li>
<li><p><a href="#comparison--switch-blocks">15.5</a> 在<code>case</code>和<code>default</code>分句里用大括号创建一块包含语法声明的区域(e.g. <code>let</code>, <code>const</code>, <code>function</code>, and <code>class</code>). eslint rules: <a href="http://eslint.org/docs/rules/no-case-declarations.html" target="_blank" rel="noopener"><code>no-case-declarations</code></a>.</p>
<blockquote>
<p>Why? 语法声明在整个<code>switch</code>的代码块里都可见，但是只有当其被分配后才会初始化，他的初始化时当这个<code>case</code>被执行时才产生。 当多个<code>case</code>分句试图定义同一个事情时就出问题了</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    bar();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: &#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="15.6"></a><br><a name="comparison--nested-ternaries"></a></p>
</li>
<li><p><a href="#comparison--nested-ternaries">15.6</a> 三元表达式不应该嵌套，通常是单行表达式。</p>
<p>eslint rules: <a href="http://eslint.org/docs/rules/no-nested-ternary.html" target="_blank" rel="noopener"><code>no-nested-ternary</code></a>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">"bar"</span></span><br><span class="line">  : value1 &gt; value2 ? <span class="string">"baz"</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2</span><br><span class="line">  ? <span class="string">'bar'</span></span><br><span class="line">  : maybeNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> maybeNull = value1 &gt; value2 ? <span class="string">'baz'</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = maybe1 &gt; maybe2 ? <span class="string">'bar'</span> : maybeNull;</span><br></pre></td></tr></table></figure>

<p><a name="15.7"></a><br><a name="comparison--unneeded-ternary"></a></p>
</li>
<li><p><a href="#comparison--unneeded-ternary">15.7</a> 避免不需要的三元表达式</p>
<p>eslint rules: <a href="http://eslint.org/docs/rules/no-unneeded-ternary.html" target="_blank" rel="noopener"><code>no-unneeded-ternary</code></a>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = a ? a : b;</span><br><span class="line"><span class="keyword">const</span> bar = c ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> baz = c ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = a || b;</span><br><span class="line"><span class="keyword">const</span> bar = !!c;</span><br><span class="line"><span class="keyword">const</span> baz = !c;</span><br></pre></td></tr></table></figure>

<p><a name="15.8"></a><br><a name="comparison--no-mixed-operators"></a></p>
</li>
<li><p><a href="#comparison--no-mixed-operators">15.8</a> 用圆括号来混合这些操作符。 只有当标准的算术运算符(<code>+</code>, <code>-</code>, <code>*</code>, &amp; <code>/</code>)， 并且它们的优先级显而易见时，可以不用圆括号括起来。 eslint: <a href="https://eslint.org/docs/rules/no-mixed-operators.html" target="_blank" rel="noopener"><code>no-mixed-operators</code></a></p>
<blockquote>
<p>Why? 这提高了可读性，并且明确了开发者的意图</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = a &amp;&amp; b &lt; <span class="number">0</span> || c &gt; <span class="number">0</span> || d + <span class="number">1</span> === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> bar = a ** b - <span class="number">5</span> % d;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// 别人会陷入(a || b) &amp;&amp; c 的迷惑中</span></span><br><span class="line"><span class="keyword">if</span> (a || b &amp;&amp; c) &#123;</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = (a &amp;&amp; b &lt; <span class="number">0</span>) || c &gt; <span class="number">0</span> || (d + <span class="number">1</span> === <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> bar = (a ** b) - (<span class="number">5</span> % d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (a || (b &amp;&amp; c)) &#123;</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> bar = a + b / c * d;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h1><p>  <a name="16.1"></a><br>  <a name="blocks--braces"></a></p>
<ul>
<li><p><a href="#blocks--braces">16.1</a> 用大括号包裹多行代码块。  eslint: <a href="https://eslint.org/docs/rules/nonblock-statement-body-position" target="_blank" rel="noopener"><code>nonblock-statement-body-position</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="16.2"></a><br><a name="blocks--cuddled-elses"></a></p>
</li>
<li><p><a href="#blocks--cuddled-elses">16.2</a> <code>if</code>表达式的<code>else</code>和<code>if</code>的关闭大括号在一行。 eslint: <a href="http://eslint.org/docs/rules/brace-style.html" target="_blank" rel="noopener"><code>brace-style</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="16.3"></a><br><a name="blocks--no-else-return"></a></p>
</li>
<li><p><a href="#blocks--no-else-return">16.3</a> 如果 <code>if</code> 语句中总是需要用 <code>return</code> 返回， 那后续的 <code>else</code> 就不需要写了。 <code>if</code> 块中包含 <code>return</code>， 它后面的 <code>else if</code> 块中也包含了 <code>return</code>， 这个时候就可以把 <code>return</code> 分到多个 <code>if</code> 语句块中。 eslint: <a href="https://eslint.org/docs/rules/no-else-return" target="_blank" rel="noopener"><code>no-else-return</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cats</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y) &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dogs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (y) &#123;</span><br><span class="line">      <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cats</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (y) &#123;</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dogs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z) &#123;</span><br><span class="line">      <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Control-Statements"><a href="#Control-Statements" class="headerlink" title="Control Statements"></a>Control Statements</h1><p>  <a name="17.1"></a><br>  <a name="control-statements"></a></p>
<ul>
<li><p><a href="#control-statements">17.1</a> 当你的控制语句(<code>if</code>, <code>while</code> 等)太长或者超过最大长度限制的时候， 把每一个(组)判断条件放在单独一行里。 逻辑操作符放在行首。</p>
<blockquote>
<p>Why? 把逻辑操作符放在行首是让操作符的对齐方式和链式函数保持一致。这提高了可读性，也让复杂逻辑更容易看清楚。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> ((foo === <span class="number">123</span> || bar === <span class="string">'abc'</span>) &amp;&amp; doesItLookGoodWhenItBecomesThatLong() &amp;&amp; isThisReallyHappening()) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo === <span class="number">123</span> &amp;&amp;</span><br><span class="line">  bar === <span class="string">'abc'</span>) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo === <span class="number">123</span></span><br><span class="line">  &amp;&amp; bar === <span class="string">'abc'</span>) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  foo === <span class="number">123</span> &amp;&amp;</span><br><span class="line">  bar === <span class="string">'abc'</span></span><br><span class="line">) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  foo === <span class="number">123</span></span><br><span class="line">  &amp;&amp; bar === <span class="string">'abc'</span></span><br><span class="line">) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (foo === <span class="number">123</span> || bar === <span class="string">'abc'</span>)</span><br><span class="line">  &amp;&amp; doesItLookGoodWhenItBecomesThatLong()</span><br><span class="line">  &amp;&amp; isThisReallyHappening()</span><br><span class="line">) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo === <span class="number">123</span> &amp;&amp; bar === <span class="string">'abc'</span>) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="17.2"></a><br><a name="control-statements--value-selection"></a></p>
</li>
<li><p><a href="#control-statements--value-selection">17.2</a> 不要用选择操作符代替控制语句。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">!isRunning &amp;&amp; startRunning();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!isRunning) &#123;</span><br><span class="line">  startRunning();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p>
<h1 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h1><p>  <a name="18.1"></a><br>  <a name="comments--multiline"></a></p>
<ul>
<li><p><a href="#comments--multiline">18.1</a> 多行注释用 <code>/** ... */</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment">// @return &#123;Element&#125; element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed-in tag name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="18.2"></a><br><a name="comments--singleline"></a></p>
</li>
<li><p><a href="#comments--singleline">18.2</a> 单行注释用<code>//</code>，将单行注释放在被注释区域上面。如果注释不是在第一行，那么注释前面就空一行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// also good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="18.3"></a><br><a name="comments--spaces"></a></p>
</li>
<li><p><a href="#comments--spaces">18.3</a> 所有注释开头空一个，方便阅读。 eslint: <a href="http://eslint.org/docs/rules/spaced-comment" target="_blank" rel="noopener"><code>spaced-comment</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">//is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *make() returns a new element</span></span><br><span class="line"><span class="comment"> *based on the passed-in tag name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed-in tag name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="18.4"></a><br><a name="comments--actionitems"></a></p>
</li>
<li><p><a href="#comments--actionitems">18.4</a> 在你的注释前使用<code>FIXME&#39;或</code>TODO’前缀， 这有助于其他开发人员快速理解你指出的需要重新访问的问题， 或者您建议需要实现的问题的解决方案。 这些不同于常规注释，因为它们是可操作的。 动作是<code>FIXME： - 需要计算出来</code>或<code>TODO： - 需要实现</code>。</p>
<p><a name="18.5"></a><br><a name="comments--fixme"></a></p>
</li>
<li><p><a href="#comments--fixme">18.5</a> 用<code>// FIXME:</code>给问题做注释</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="18.6"></a><br><a name="comments--todo"></a></p>
</li>
<li><p><a href="#comments--todo">18.6</a> 用<code>// TODO:</code>去注释问题的解决方案</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">Abacus</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Whitespace"><a href="#Whitespace" class="headerlink" title="Whitespace"></a>Whitespace</h1><p>  <a name="19.1"></a><br>  <a name="whitespace--spaces"></a></p>
<ul>
<li><p><a href="#whitespace--spaces">19.1</a> tab用两个空格. eslint: <a href="http://eslint.org/docs/rules/indent.html" target="_blank" rel="noopener"><code>indent</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="19.2"></a><br><a name="whitespace--before-blocks"></a></p>
</li>
<li><p><a href="#whitespace--before-blocks">19.2</a> 在大括号前空一格。 eslint: <a href="http://eslint.org/docs/rules/space-before-blocks.html" target="_blank" rel="noopener"><code>space-before-blocks</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>,&#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>, &#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a name="19.3"></a><br><a name="whitespace--around-keywords"></a></p>
</li>
<li><p><a href="#whitespace--around-keywords">19.3</a> 在控制语句(<code>if</code>, <code>while</code> 等)的圆括号前空一格。在函数调用和定义时，参数列表和函数名之间不空格。 eslint: <a href="http://eslint.org/docs/rules/keyword-spacing.html" target="_blank" rel="noopener"><code>keyword-spacing</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(isJedi) &#123;</span><br><span class="line">  fight ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isJedi) &#123;</span><br><span class="line">  fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="19.4"></a><br><a name="whitespace--infix-ops"></a></p>
</li>
<li><p><a href="#whitespace--infix-ops">19.4</a> 用空格来隔开运算符。 eslint: <a href="http://eslint.org/docs/rules/space-infix-ops.html" target="_blank" rel="noopener"><code>space-infix-ops</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> x=y+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = y + <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p><a name="19.5"></a><br><a name="whitespace--newline-at-end"></a></p>
</li>
<li><p><a href="#whitespace--newline-at-end">19.5</a> 文件结尾空一行. eslint: <a href="https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md" target="_blank" rel="noopener"><code>eol-last</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;↵</span><br><span class="line">↵</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;↵</span><br></pre></td></tr></table></figure>

<p><a name="19.6"></a><br><a name="whitespace--chains"></a></p>
</li>
<li><p><a href="#whitespace--chains">19.6</a> 当出现长的方法链（&gt;2个）时用缩进。用点开头强调该行是一个方法调用，而不是一个新的语句。eslint: <a href="http://eslint.org/docs/rules/newline-per-chained-call" target="_blank" rel="noopener"><code>newline-per-chained-call</code></a> <a href="http://eslint.org/docs/rules/no-whitespace-before-property" target="_blank" rel="noopener"><code>no-whitespace-before-property</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).</span><br><span class="line">  find(<span class="string">'.selected'</span>).</span><br><span class="line">    highlight().</span><br><span class="line">    end().</span><br><span class="line">  find(<span class="string">'.open'</span>).</span><br><span class="line">    updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">  .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">  .find(<span class="string">'.open'</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">`translate(<span class="subst">$&#123;radius + margin&#125;</span>,<span class="subst">$&#123;radius + margin&#125;</span>)`</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().append(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">`translate(<span class="subst">$&#123;radius + margin&#125;</span>,<span class="subst">$&#123;radius + margin&#125;</span>)`</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data);</span><br></pre></td></tr></table></figure>

<p><a name="19.7"></a><br><a name="whitespace--after-blocks"></a></p>
</li>
<li><p><a href="#whitespace--after-blocks">19.7</a> 在一个代码块后下一条语句前空一行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr;</span><br></pre></td></tr></table></figure>

<p><a name="19.8"></a><br><a name="whitespace--padded-blocks"></a></p>
</li>
<li><p><a href="#whitespace--padded-blocks">19.8</a> 不要用空白行填充块。 eslint: <a href="http://eslint.org/docs/rules/padded-blocks.html" target="_blank" rel="noopener"><code>padded-blocks</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// also bad</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (baz) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(qux);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="whitespace--no-multiple-blanks"></a></p>
</li>
<li><p><a href="#whitespace--no-multiple-blanks">19.9</a>不要在代码之间使用多个空白行填充。 eslint: <a href="https://eslint.org/docs/rules/no-multiple-empty-lines" target="_blank" rel="noopener"><code>no-multiple-empty-lines</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(fullName, email, birthday) &#123;</span><br><span class="line">    <span class="keyword">this</span>.fullName = fullName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setAge(birthday);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  setAge(birthday) &#123;</span><br><span class="line">    <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> age = <span class="keyword">this</span>.getAge(today, birthday);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  getAge(today, birthday) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(fullName, email, birthday) &#123;</span><br><span class="line">    <span class="keyword">this</span>.fullName = fullName;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">    <span class="keyword">this</span>.setAge(birthday);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setAge(birthday) &#123;</span><br><span class="line">    <span class="keyword">const</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> age = getAge(today, birthday);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getAge(today, birthday) &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="19.10"></a><br><a name="whitespace--in-parens"></a></p>
</li>
<li><p><a href="#whitespace--in-parens">19.10</a> 圆括号里不要加空格。 eslint: <a href="http://eslint.org/docs/rules/space-in-parens.html" target="_blank" rel="noopener"><code>space-in-parens</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"> foo </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">foo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> ( foo ) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="19.11"></a><br><a name="whitespace--in-brackets"></a></p>
</li>
<li><p><a href="#whitespace--in-brackets">19.11</a> 方括号里不要加空格。看示例。 eslint: <a href="http://eslint.org/docs/rules/array-bracket-spacing.html" target="_blank" rel="noopener"><code>array-bracket-spacing</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="built_in">console</span>.log(foo[ <span class="number">0</span> ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good， 逗号分隔符还是要空格的</span></span><br><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p><a name="19.12"></a><br><a name="whitespace--in-braces"></a></p>
</li>
<li><p><a href="#whitespace--in-braces">19.12</a> 花括号里加空格。 eslint: <a href="http://eslint.org/docs/rules/object-curly-spacing.html" target="_blank" rel="noopener"><code>object-curly-spacing</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123;<span class="attr">clark</span>: <span class="string">'kent'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;;</span><br></pre></td></tr></table></figure>

<p><a name="19.13"></a><br><a name="whitespace--max-len"></a></p>
</li>
<li><p><a href="#whitespace--max-len">19.13</a> 避免一行代码超过100个字符（包含空格）。</p>
</li>
<li><p>注意： 对于<a href="#strings--line-length">上面——strings–line-length</a>，长字符串不受此规则限制，不应分解。 eslint: <a href="http://eslint.org/docs/rules/max-len.html" target="_blank" rel="noopener"><code>max-len</code></a></p>
<blockquote>
<p>Why? 这样确保可读性和可维护性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = jsonData &amp;&amp; jsonData.foo &amp;&amp; jsonData.foo.bar &amp;&amp; jsonData.foo.bar.baz &amp;&amp; jsonData.foo.bar.baz.quux &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$.ajax(&#123; <span class="attr">method</span>: <span class="string">'POST'</span>, <span class="attr">url</span>: <span class="string">'https://airbnb.com/'</span>, <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">'John'</span> &#125; &#125;).done(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Congratulations!'</span>)).fail(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'You have failed this city.'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> foo = jsonData</span><br><span class="line">  &amp;&amp; jsonData.foo</span><br><span class="line">  &amp;&amp; jsonData.foo.bar</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz.quux</span><br><span class="line">  &amp;&amp; jsonData.foo.bar.baz.quux.xyzzy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  url: <span class="string">'https://airbnb.com/'</span>,</span><br><span class="line">  data: &#123; <span class="attr">name</span>: <span class="string">'John'</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">  .done(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Congratulations!'</span>))</span><br><span class="line">  .fail(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'You have failed this city.'</span>));</span><br></pre></td></tr></table></figure>

<p><a name="19.14"></a><br><a name="whitespace--block-spacing"></a></p>
</li>
<li><p><a href="#whitespace--block-spacing">19.14</a> 作为语句的花括号内也要加空格 —— <code>{</code> 后和 <code>}</code> 前都需要空格。 eslint: <a href="https://eslint.org/docs/rules/block-spacing" target="_blank" rel="noopener"><code>block-spacing</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123; bar = <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123; bar = <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>

<p><a name="19.15"></a><br><a name="whitespace--comma-spacing"></a></p>
</li>
<li><p><a href="#whitespace--comma-spacing">19.15</a> <code>,</code> 前不要空格， <code>,</code> 后需要空格。 eslint: <a href="https://eslint.org/docs/rules/comma-spacing" target="_blank" rel="noopener"><code>comma-spacing</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>,bar = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span> , <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>, bar = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<p><a name="19.16"></a><br><a name="whitespace--computed-property-spacing"></a></p>
</li>
<li><p><a href="#whitespace--computed-property-spacing">19.16</a> 计算属性内要空格。参考上述花括号和中括号的规则。  eslint: <a href="https://eslint.org/docs/rules/computed-property-spacing" target="_blank" rel="noopener"><code>computed-property-spacing</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">obj[foo ]</span><br><span class="line">obj[ <span class="string">'foo'</span>]</span><br><span class="line"><span class="keyword">var</span> x = &#123;[ b ]: a&#125;</span><br><span class="line">obj[foo[ bar ]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">obj[foo]</span><br><span class="line">obj[<span class="string">'foo'</span>]</span><br><span class="line"><span class="keyword">var</span> x = &#123; [b]: a &#125;</span><br><span class="line">obj[foo[bar]]</span><br></pre></td></tr></table></figure>

<p><a name="19.17"></a><br><a name="whitespace--func-call-spacing"></a></p>
</li>
<li><p><a href="#whitespace--func-call-spacing">19.17</a> 调用函数时，函数名和小括号之间不要空格。 eslint: <a href="https://eslint.org/docs/rules/func-call-spacing" target="_blank" rel="noopener"><code>func-call-spacing</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">func ();</span><br><span class="line"></span><br><span class="line">func</span><br><span class="line">();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">func();</span><br></pre></td></tr></table></figure>

<p><a name="19.18"></a><br><a name="whitespace--key-spacing"></a></p>
</li>
<li><p><a href="#whitespace--key-spacing">19.18</a> 在对象的字面量属性中， <code>key</code> <code>value</code> 之间要有空格。 eslint: <a href="https://eslint.org/docs/rules/key-spacing" target="_blank" rel="noopener"><code>key-spacing</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">"foo"</span> : <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="string">"foo"</span>:<span class="number">42</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">"foo"</span>: <span class="number">42</span> &#125;;</span><br></pre></td></tr></table></figure>

<p><a name="19.19"></a><br><a name="whitespace--no-trailing-spaces"></a></p>
</li>
<li><p><a href="#whitespace--no-trailing-spaces">19.19</a> 行末不要空格。 eslint: <a href="https://eslint.org/docs/rules/no-trailing-spaces" target="_blank" rel="noopener"><code>no-trailing-spaces</code></a></p>
<p><a name="19.20"></a><br><a name="whitespace--no-multiple-empty-lines"></a></p>
</li>
<li><p><a href="#whitespace--no-multiple-empty-lines">19.20</a> 避免出现多个空行。 在文件末尾只允许空一行。 eslint: <a href="https://eslint.org/docs/rules/no-multiple-empty-lines" target="_blank" rel="noopener"><code>no-multiple-empty-lines</code></a></p>
<!-- markdownlint-disable MD012 -->
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<!-- markdownlint-enable MD012 -->

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Commas"><a href="#Commas" class="headerlink" title="Commas"></a>Commas</h1><p>  <a name="20.1"></a><br>  <a name="commas--leading-trailing"></a></p>
<ul>
<li><p><a href="#commas--leading-trailing">20.1</a> 不要前置逗号。 eslint: <a href="http://eslint.org/docs/rules/comma-style.html" target="_blank" rel="noopener"><code>comma-style</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">    once</span><br><span class="line">  , upon</span><br><span class="line">  , aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">  once,</span><br><span class="line">  upon,</span><br><span class="line">  aTime,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Ada'</span></span><br><span class="line">  , <span class="attr">lastName</span>: <span class="string">'Lovelace'</span></span><br><span class="line">  , <span class="attr">birthYear</span>: <span class="number">1815</span></span><br><span class="line">  , <span class="attr">superPower</span>: <span class="string">'computers'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Ada'</span>,</span><br><span class="line">  lastName: <span class="string">'Lovelace'</span>,</span><br><span class="line">  birthYear: <span class="number">1815</span>,</span><br><span class="line">  superPower: <span class="string">'computers'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><a name="20.2"></a><br><a name="commas--dangling"></a></p>
</li>
<li><p><a href="#commas--dangling">20.2</a> 额外结尾逗号: <strong>要</strong> eslint: <a href="http://eslint.org/docs/rules/comma-dangle.html" target="_blank" rel="noopener"><code>comma-dangle</code></a></p>
<blockquote>
<p>Why? 这导致git diffs更清洁。 此外，像Babel这样的转换器会删除转换代码中的额外的逗号，这意味着你不必担心旧版浏览器中的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L2Jsb2IvZXM1LWRlcHJlY2F0ZWQvZXM1L1JFQURNRS5tZCNjb21tYXM=" title="https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas">结尾逗号问题<i class="fa fa-external-link"></i></span>。</p>
</blockquote>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">// bad - 没有结尾逗号的 git diff</span><br><span class="line">const hero = &#123;</span><br><span class="line">     firstName: 'Florence',</span><br><span class="line"><span class="deletion">-    lastName: 'Nightingale'</span></span><br><span class="line"><span class="addition">+    lastName: 'Nightingale',</span></span><br><span class="line"><span class="addition">+    inventorOf: ['coxcomb chart', 'modern nursing']</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// good - 有结尾逗号的 git diff</span><br><span class="line">const hero = &#123;</span><br><span class="line">     firstName: 'Florence',</span><br><span class="line">     lastName: 'Nightingale',</span><br><span class="line"><span class="addition">+    inventorOf: ['coxcomb chart', 'modern nursing'],</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  firstName,</span></span></span><br><span class="line"><span class="function"><span class="params">  lastName,</span></span></span><br><span class="line"><span class="function"><span class="params">  inventorOf</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// does nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  firstName,</span></span></span><br><span class="line"><span class="function"><span class="params">  lastName,</span></span></span><br><span class="line"><span class="function"><span class="params">  inventorOf,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// does nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (note that a comma must not appear after a "rest" element)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHero</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  firstName,</span></span></span><br><span class="line"><span class="function"><span class="params">  lastName,</span></span></span><br><span class="line"><span class="function"><span class="params">  inventorOf,</span></span></span><br><span class="line"><span class="function"><span class="params">  ...heroArgs</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// does nothing</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">createHero(</span><br><span class="line">  firstName,</span><br><span class="line">  lastName,</span><br><span class="line">  inventorOf</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">createHero(</span><br><span class="line">  firstName,</span><br><span class="line">  lastName,</span><br><span class="line">  inventorOf,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (note that a comma must not appear after a "rest" element)</span></span><br><span class="line">createHero(</span><br><span class="line">  firstName,</span><br><span class="line">  lastName,</span><br><span class="line">  inventorOf,</span><br><span class="line">  ...heroArgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Semicolons"><a href="#Semicolons" class="headerlink" title="Semicolons"></a>Semicolons</h1><p>  <a name="21.1"></a></p>
<ul>
<li><p><a href="#21.1">21.1</a> <strong>Yup.</strong> eslint: <a href="http://eslint.org/docs/rules/semi.html" target="_blank" rel="noopener"><code>semi</code></a></p>
<blockquote>
<p>Why? 当 JavaScript 遇到没有分号结尾的一行，它会执行<a href="https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion" target="_blank" rel="noopener">自动插入分号 <code>Automatic Semicolon Insertion</code></a>这一规则来决定行末是否加分号。如果JavaScript在你的断行里错误的插入了分号，就会出现一些古怪的行为。当新的功能加到JavaScript里后， 这些规则会变得更复杂难懂。显示的结束语句，并通过配置代码检查去捕获没有带分号的地方可以帮助你防止这种错误。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span></span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, 行首加分号，避免文件被连接到一起时立即执行函数被当做变量来执行。</span></span><br><span class="line">;<span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzM2NTE3Mi9zZW1pY29sb24tYmVmb3JlLXNlbGYtaW52b2tpbmctZnVuY3Rpb24vNzM2NTIxNCUyMzczNjUyMTQ=" title="https://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214%237365214">Read more<i class="fa fa-external-link"></i></span>.</p>
</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Type-Casting-amp-Coercion"><a href="#Type-Casting-amp-Coercion" class="headerlink" title="Type Casting &amp; Coercion"></a>Type Casting &amp; Coercion</h1><p>  <a name="22.1"></a><br>  <a name="coercion--explicit"></a></p>
<ul>
<li><p><a href="#coercion--explicit">22.1</a> 在语句开始执行强制类型转换。</p>
<p><a name="22.2"></a><br><a name="coercion--strings"></a></p>
</li>
<li><p><a href="#coercion--strings">22.2</a>  Strings: eslint: <a href="https://eslint.org/docs/rules/no-new-wrappers" target="_blank" rel="noopener"><code>no-new-wrappers</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="keyword">this</span>.reviewScore); <span class="comment">// typeof totalScore is "object" not "string"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>; <span class="comment">// invokes this.reviewScore.valueOf()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore.toString(); <span class="comment">// 不保证返回string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">String</span>(<span class="keyword">this</span>.reviewScore);</span><br></pre></td></tr></table></figure>

<p><a name="22.3"></a><br><a name="coercion--numbers"></a></p>
</li>
<li><p><a href="#coercion--numbers">22.3</a> Numbers: 用 <code>Number</code> 做类型转换，<code>parseInt</code>转换string常需要带上基数。 eslint: <a href="http://eslint.org/docs/rules/radix" target="_blank" rel="noopener"><code>radix</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inputValue = <span class="string">'4'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p><a name="22.4"></a><br><a name="coercion--comment-deviations"></a></p>
</li>
<li><p><a href="#coercion--comment-deviations">22.4</a> 请在注释中解释为什么要用移位运算和你在做什么。无论你做什么狂野的事，比如由于 <code>parseInt</code> 是你的性能瓶颈导致你一定要用移位运算。 请说明这个是因为<span class="exturl" data-url="aHR0cHM6Ly9qc3BlcmYuY29tL2NvZXJjaW9uLXZzLWNhc3RpbmcvMw==" title="https://jsperf.com/coercion-vs-casting/3">性能原因<i class="fa fa-external-link"></i></span>,</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseInt是代码运行慢的原因</span></span><br><span class="line"><span class="comment"> * 用Bitshifting将字符串转成数字使代码运行效率大幅增长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><a name="22.5"></a><br><a name="coercion--bitwise"></a></p>
</li>
<li><p><a href="#coercion--bitwise">22.5</a> <strong>注意:</strong> 用移位运算要小心. 数字使用<span class="exturl" data-url="aHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4NC4zLjE5" title="https://es5.github.io/#x4.3.19">64-位<i class="fa fa-external-link"></i></span>表示的，但移位运算常常返回的是32为整形<span class="exturl" data-url="aHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTEuNw==" title="https://es5.github.io/#x11.7">source<i class="fa fa-external-link"></i></span>)。移位运算对大于32位的整数会导致意外行为。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L2lzc3Vlcy8xMDk=" title="https://github.com/airbnb/javascript/issues/109">Discussion<i class="fa fa-external-link"></i></span>. 最大的32位整数是 2,147,483,647:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></span><br><span class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></span><br><span class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></span><br></pre></td></tr></table></figure>

<p><a name="22.6"></a><br><a name="coercion--booleans"></a></p>
</li>
<li><p><a href="#coercion--booleans">22.6</a> 布尔:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> hasAge = !!age;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Naming-Conventions"><a href="#Naming-Conventions" class="headerlink" title="Naming Conventions"></a>Naming Conventions</h1><p>  <a name="23.1"></a><br>  <a name="naming--descriptive"></a></p>
<ul>
<li><p><a href="#naming--descriptive">23.1</a> 避免用一个字母命名，让你的命名可描述。 eslint: <a href="http://eslint.org/docs/rules/id-length" target="_blank" rel="noopener"><code>id-length</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="23.2"></a><br><a name="naming--camelCase"></a></p>
</li>
<li><p><a href="#naming--camelCase">23.2</a> 用小驼峰式命名你的对象、函数、实例。 eslint: <a href="http://eslint.org/docs/rules/camelcase.html" target="_blank" rel="noopener"><code>camelcase</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> OBJEcttsssss = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> this_is_my_object = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> thisIsMyObject = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><a name="23.3"></a><br><a name="naming--PascalCase"></a></p>
</li>
<li><p><a href="#naming--PascalCase">23.3</a> 用大驼峰式命名类。 eslint: <a href="http://eslint.org/docs/rules/new-cap.html" target="_blank" rel="noopener"><code>new-cap</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bad = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  name: <span class="string">'nope'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> good = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'yup'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><a name="23.4"></a><br><a name="naming--leading-underscore"></a></p>
</li>
<li><p><a href="#naming--leading-underscore">23.4</a> 不要用前置或后置下划线。 eslint: <a href="http://eslint.org/docs/rules/no-underscore-dangle.html" target="_blank" rel="noopener"><code>no-underscore-dangle</code></a></p>
<blockquote>
<p>Why? JavaScript 没有私有属性或私有方法的概念。尽管前置下划线通常的概念上意味着“private”，事实上，这些属性是完全公有的，因此这部分也是你的API的内容。这一概念可能会导致开发者误以为更改这个不会导致崩溃或者不需要测试。 如果你想要什么东西变成“private”，那就不要让它在这里出现。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</span><br></pre></td></tr></table></figure>

<p><a name="23.5"></a><br><a name="naming--self-this"></a></p>
</li>
<li><p><a href="#naming--self-this">23.5</a> 不要保存引用<code>this</code>， 用箭头函数或<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYmluZA==" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">函数绑定——Function#bind<i class="fa fa-external-link"></i></span>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="23.6"></a><br><a name="naming--filename-matches-export"></a></p>
</li>
<li><p><a href="#naming--filename-matches-export">23.6</a> export default导出模块A，则这个文件名也叫A.*， import 时候的参数也叫A。 大小写完全一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file 1 contents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file 2 contents</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">fortyTwo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file 3 contents</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">insideDirectory</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in some other file</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./checkBox'</span>; <span class="comment">// PascalCase import/export, camelCase filename</span></span><br><span class="line"><span class="keyword">import</span> FortyTwo <span class="keyword">from</span> <span class="string">'./FortyTwo'</span>; <span class="comment">// PascalCase import/filename, camelCase export</span></span><br><span class="line"><span class="keyword">import</span> InsideDirectory <span class="keyword">from</span> <span class="string">'./InsideDirectory'</span>; <span class="comment">// PascalCase import/filename, camelCase export</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./check_box'</span>; <span class="comment">// PascalCase import/export, snake_case filename</span></span><br><span class="line"><span class="keyword">import</span> forty_two <span class="keyword">from</span> <span class="string">'./forty_two'</span>; <span class="comment">// snake_case import/filename, camelCase export</span></span><br><span class="line"><span class="keyword">import</span> inside_directory <span class="keyword">from</span> <span class="string">'./inside_directory'</span>; <span class="comment">// snake_case import, camelCase export</span></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./inside_directory/index'</span>; <span class="comment">// requiring the index file explicitly</span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">'./insideDirectory/index'</span>; <span class="comment">// requiring the index file explicitly</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./CheckBox'</span>; <span class="comment">// PascalCase export/import/filename</span></span><br><span class="line"><span class="keyword">import</span> fortyTwo <span class="keyword">from</span> <span class="string">'./fortyTwo'</span>; <span class="comment">// camelCase export/import/filename</span></span><br><span class="line"><span class="keyword">import</span> insideDirectory <span class="keyword">from</span> <span class="string">'./insideDirectory'</span>; <span class="comment">// camelCase export/import/directory name/implicit "index"</span></span><br><span class="line"><span class="comment">// ^ supports both insideDirectory.js and insideDirectory/index.js</span></span><br></pre></td></tr></table></figure>

<p><a name="23.7"></a><br><a name="naming--camelCase-default-export"></a></p>
</li>
<li><p><a href="#naming--camelCase-default-export">23.7</a> 当你export-default一个函数时，函数名用小驼峰，文件名需要和函数名一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure>

<p><a name="23.8"></a><br><a name="naming--PascalCase-singleton"></a></p>
</li>
<li><p><a href="#naming--PascalCase-singleton">23.8</a> 当你export一个结构体/类/单例/函数库/对象 时用大驼峰。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide;</span><br></pre></td></tr></table></figure>

<p><a name="23.9"></a><br><a name="naming--Acronyms-and-Initialisms"></a></p>
</li>
<li><p><a href="#naming--Acronyms-and-Initialisms">23.9</a> 简称和缩写应该全部大写或全部小写。</p>
<blockquote>
<p>Why? 名字都是给人读的，不是为了适应电脑的算法的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> SmsContainer <span class="keyword">from</span> <span class="string">'./containers/SmsContainer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> HttpRequests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> SMSContainer <span class="keyword">from</span> <span class="string">'./containers/SMSContainer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> HTTPRequests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> TextMessageContainer <span class="keyword">from</span> <span class="string">'./containers/TextMessageContainer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> Requests = [</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<p><a name="23.10"></a><br><a name="naming--uppercase"></a></p>
</li>
<li><p><a href="#naming--uppercase">23.10</a> 你可以用全大写字母设置静态变量，他需要满足三个条件。</p>
<ol>
<li>导出变量</li>
<li>是 <code>const</code> 定义的， 保证不能被改变</li>
<li>这个变量是可信的，他的子属性都是不能被改变的</li>
</ol>
<blockquote>
<p>Why? 这是一个附加工具，帮助开发者去辨识一个变量是不是不可变的。</p>
</blockquote>
<ul>
<li>对于所有的 <code>const</code> 变量呢？ —— 这个是不必要的。大写变量不应该在同一个文件里定义并使用， 它只能用来作为导出变量。 赞同！</li>
<li>那导出的对象呢？ —— 大写变量处在export的最高级(e.g. <code>EXPORTED_OBJECT.key</code>) 并且他包含的所有子属性都是不可变的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> PRIVATE_VARIABLE = <span class="string">'should not be unnecessarily uppercased within a file'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> THING_TO_BE_CHANGED = <span class="string">'should obviously not be uppercased'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> REASSIGNABLE_VARIABLE = <span class="string">'do not use let with uppercase variables'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// allowed but does not supply semantic value</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apiKey = <span class="string">'SOMEKEY'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better in most cases</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> API_KEY = <span class="string">'SOMEKEY'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - unnecessarily uppercases key while adding no semantic value</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MAPPING = &#123;</span><br><span class="line">  KEY: <span class="string">'value'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MAPPING = &#123;</span><br><span class="line">  key: <span class="string">'value'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Accessors"><a href="#Accessors" class="headerlink" title="Accessors"></a>Accessors</h1><p>  <a name="24.1"></a><br>  <a name="accessors--not-required"></a></p>
<ul>
<li><p><a href="#accessors--not-required">24.1</a> 不需要使用属性的访问器函数。</p>
<p><a name="24.2"></a><br><a name="accessors--no-getters-setters"></a></p>
</li>
<li><p><a href="#accessors--no-getters-setters">24.2</a> 不要使用JavaScript的getters/setters，因为他们会产生副作用，并且难以测试、维护和理解。相反的，你可以用 getVal()和setVal(‘hello’)去创造你自己的accessor函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> age() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> age(value) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dragon</span> </span>&#123;</span><br><span class="line">  getAge() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setAge(value) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="24.3"></a><br><a name="accessors--boolean-prefix"></a></p>
</li>
<li><p><a href="#accessors--boolean-prefix">24.3</a> 如果属性/方法是<code>boolean</code>， 用 <code>isVal()</code> 或 <code>hasVal()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="24.4"></a><br><a name="accessors--consistent"></a></p>
</li>
<li><p><a href="#accessors--consistent">24.4</a> 用get()和set()函数是可以的，但是要一起用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</span><br><span class="line">    <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span>(key, val) &#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h1><p>  <a name="25.1"></a><br>  <a name="events--hash"></a></p>
<ul>
<li><p><a href="#events--hash">25.1</a> 通过哈希而不是原始值向事件装载数据时(不论是DOM事件还是像Backbone事件的很多属性)。 这使得后续的贡献者（程序员）向这个事件装载更多的数据时不用去找或者更新每个处理器。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, (e, listingId) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>prefer:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span>: listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, (e, data) =&gt; &#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>  <strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p>  <a name="26.1"></a><br>  <a name="jquery--dollar-prefix"></a></p>
<ul>
<li><p><a href="#jquery--dollar-prefix">26.1</a> jQuery对象用<code>$</code>变量表示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebarBtn = $(<span class="string">'.sidebar-btn'</span>);</span><br></pre></td></tr></table></figure>

<p><a name="26.2"></a><br><a name="jquery--cache"></a></p>
</li>
<li><p><a href="#jquery--cache">26.2</a> 暂存jQuery查找</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line">  $sidebar.hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  $sidebar.css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="26.3"></a><br><a name="jquery--queries"></a></p>
</li>
<li><p><a href="#jquery--queries">26.3</a> DOM查找用层叠式<code>$(&#39;.sidebar ul&#39;)</code> 或 父节点 &gt; 子节点 <code>$(&#39;.sidebar &gt; ul&#39;)</code>. <span class="exturl" data-url="aHR0cDovL2pzcGVyZi5jb20vanF1ZXJ5LWZpbmQtdnMtY29udGV4dC1zZWwvMTY=" title="http://jsperf.com/jquery-find-vs-context-sel/16">jsPerf<i class="fa fa-external-link"></i></span></p>
<p><a name="26.4"></a><br><a name="jquery--find"></a></p>
</li>
<li><p><a href="#jquery--find">26.4</a> 用jQuery对象查询作用域的<code>find</code>方法查询</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="ES5-兼容性"><a href="#ES5-兼容性" class="headerlink" title="ES5 兼容性"></a>ES5 兼容性</h1><p>  <a name="27.1"></a><br>  <a name="es5-compat--kangax"></a></p>
<ul>
<li><a href="#es5-compat--kangax">27.1</a> 参考<span class="exturl" data-url="aHR0cHM6Ly90d2l0dGVyLmNvbS9rYW5nYXgv" title="https://twitter.com/kangax/">Kangax<i class="fa fa-external-link"></i></span>的ES5<span class="exturl" data-url="aHR0cHM6Ly9rYW5nYXguZ2l0aHViLmlvL2VzNS1jb21wYXQtdGFibGUv" title="https://kangax.github.io/es5-compat-table/">兼容性列表<i class="fa fa-external-link"></i></span>.</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="ECMAScript-6-ES-2015-Styles"><a href="#ECMAScript-6-ES-2015-Styles" class="headerlink" title="ECMAScript 6+ (ES 2015+) Styles"></a>ECMAScript 6+ (ES 2015+) Styles</h1><p>  <a name="28.1"></a><br>  <a name="es6-styles"></a></p>
<ul>
<li><a href="#es6-styles">28.1</a> 这是收集到的各种ES6特性的链接</li>
</ul>
<ol>
<li><p><a href="#arrow-functions">箭头函数——Arrow Functions</a></p>
</li>
<li><p><a href="#classes--constructors">类——Classes</a></p>
</li>
<li><p><a href="#es6-object-shorthand">对象缩写——Object Shorthand</a></p>
</li>
<li><p><a href="#es6-object-concise">对象简写——Object Concise</a></p>
</li>
<li><p><a href="#es6-computed-properties">对象计算属性——Object Computed Properties</a></p>
</li>
<li><p><a href="#es6-template-literals">模板字符串——Template Strings</a></p>
</li>
<li><p><a href="#destructuring">解构赋值——Destructuring</a></p>
</li>
<li><p><a href="#es6-default-parameters">默认参数——Default Parameters</a></p>
</li>
<li><p><a href="#es6-rest">Rest</a></p>
</li>
<li><p><a href="#es6-array-spreads">Array Spreads</a></p>
</li>
<li><p><a href="#references">Let and Const</a></p>
</li>
<li><p><a href="#es2016-properties--exponentiation-operator">幂操作符——Exponentiation Operator</a></p>
</li>
<li><p><a href="#iterators-and-generators">迭代器和生成器——Iterators and Generators</a></p>
</li>
<li><p><a href="#modules">模块——Modules</a></p>
<p><a name="28.2"></a><br><a name="tc39-proposals"></a></p>
<ul>
<li><p><a href="#tc39-proposals">28.2</a> 不要用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWxz" title="https://github.com/tc39/proposals">TC39 proposals<i class="fa fa-external-link"></i></span>， TC39还没有到 stage 3。</p>
<blockquote>
<p>Why? <span class="exturl" data-url="aHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9jZXNzLWRvY3VtZW50Lw==" title="https://tc39.github.io/process-document/">它还不是最终版<i class="fa fa-external-link"></i></span>, 他可能还有很多变化，或者被撤销。 我们想要用的是 JavaScript， 提议还不是JavaScript。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Standard-Library"><a href="#Standard-Library" class="headerlink" title="Standard Library"></a>Standard Library</h1><p>  <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHM=" title="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects">标准库<i class="fa fa-external-link"></i></span>中包含一些功能受损但是由于历史原因遗留的工具类</p>
<p>  <a name="29.1"></a><br>  <a name="standard-library--isnan"></a></p>
<ul>
<li><p><a href="#standard-library--isnan">29.1</a> 用 <code>Number.isNaN</code> 代替全局的 <code>isNaN</code>.<br>eslint: <a href="https://eslint.org/docs/rules/no-restricted-globals" target="_blank" rel="noopener"><code>no-restricted-globals</code></a></p>
<blockquote>
<p>Why? 全局 <code>isNaN</code> 强制把非数字转成数字， 然后对于任何强转后为 <code>NaN</code> 的变量都返回 <code>true</code><br>如果你想用这个功能，就显式的用它。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">'1.2'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">'1.2.3'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">'1.2.3'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="built_in">Number</span>(<span class="string">'1.2.3'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><a name="29.2"></a><br><a name="standard-library--isfinite"></a></p>
</li>
<li><p><a href="#standard-library--isfinite">29.2</a> 用 <code>Number.isFinite</code> 代替 <code>isFinite</code>.<br>eslint: <a href="https://eslint.org/docs/rules/no-restricted-globals" target="_blank" rel="noopener"><code>no-restricted-globals</code></a></p>
<blockquote>
<p>Why? 理由同上，会把一个非数字变量强转成数字，然后做判断。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">isFinite</span>(<span class="string">'2e3'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">'2e3'</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="built_in">parseInt</span>(<span class="string">'2e3'</span>, <span class="number">10</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h1><p>  <a name="30.1"></a><br>  <a name="testing--yup"></a></p>
<ul>
<li><p><a href="#testing--yup">30.1</a> <strong>Yup.</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="30.2"></a><br><a name="testing--for-real"></a></p>
</li>
<li><p><a href="#testing--for-real">30.2</a> <strong>No, but seriously</strong>:</p>
<ul>
<li>无论用那个测试框架，你都需要写测试。</li>
<li>尽量去写很多小而美的纯函数，减少突变的发生</li>
<li>小心 stub 和 mock —— 这会让你的测试变得脆弱。</li>
<li>在 Airbnb 首选 <a href="https://www.npmjs.com/package/mocha" target="_blank" rel="noopener"><code>mocha</code></a>。 <a href="https://www.npmjs.com/package/tape" target="_blank" rel="noopener"><code>tape</code></a> 偶尔被用来测试一些小的，独立的模块。</li>
<li>100%测试覆盖率是我们努力的目标，即便实际上很少达到。</li>
<li>每当你修了一个bug， 都要写一个回归测试。 一个bug修复了，没有回归测试，很可能以后会再次出问题。</li>
</ul>
</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VsbGVnb3VzLmNvbS9qLzIwMTMvMDEvMjYvbGF5b3V0LXBlcmZvcm1hbmNlLw==" title="https://www.kellegous.com/j/2013/01/26/layout-performance/">On Layout &amp; Web Performance<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qc3BlcmYuY29tL3N0cmluZy12cy1hcnJheS1jb25jYXQvMg==" title="https://jsperf.com/string-vs-array-concat/2">String vs Array Concat<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qc3BlcmYuY29tL3RyeS1jYXRjaC1pbi1sb29wLWNvc3Q=" title="https://jsperf.com/try-catch-in-loop-cost">Try/Catch Cost In a Loop<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qc3BlcmYuY29tL2JhbmctZnVuY3Rpb24=" title="https://jsperf.com/bang-function">Bang Function<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qc3BlcmYuY29tL2pxdWVyeS1maW5kLXZzLWNvbnRleHQtc2VsLzEz" title="https://jsperf.com/jquery-find-vs-context-sel/13">jQuery Find vs Context, Selector<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qc3BlcmYuY29tL2lubmVyaHRtbC12cy10ZXh0Y29udGVudC1mb3Itc2NyaXB0LXRleHQ=" title="https://jsperf.com/innerhtml-vs-textcontent-for-script-text">innerHTML vs textContent for script text<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qc3BlcmYuY29tL3lhLXN0cmluZy1jb25jYXQ=" title="https://jsperf.com/ya-string-concat">Long String Concatenation<i class="fa fa-external-link"></i></span></li>
<li><a href="https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta" target="_blank" rel="noopener">Are Javascript functions like <code>map()</code>, <code>reduce()</code>, and <code>filter()</code> optimized for traversing arrays?</a></li>
<li>Loading…</li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><p><strong>Learning ES6</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWw=" title="https://people.mozilla.org/~jorendorff/es6-draft.html">Draft ECMA 2015 (ES6) Spec<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2V4cGxvcmluZ2pzLmNvbS8=" title="http://exploringjs.com/">ExploringJS<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9rYW5nYXguZ2l0aHViLmlvL2NvbXBhdC10YWJsZS9lczYv" title="https://kangax.github.io/compat-table/es6/">ES6 Compatibility Table<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2VzNi1mZWF0dXJlcy5vcmcv" title="http://es6-features.org/">Comprehensive Overview of ES6 Features<i class="fa fa-external-link"></i></span></li>
</ul>
<p><strong>Read This</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1s" title="http://www.ecma-international.org/ecma-262/6.0/index.html">Standard ECMA-262<i class="fa fa-external-link"></i></span></li>
</ul>
<p><strong>Tools</strong></p>
<ul>
<li>Code Style Linters<ul>
<li><span class="exturl" data-url="aHR0cDovL2VzbGludC5vcmcv" title="http://eslint.org/">ESlint<i class="fa fa-external-link"></i></span> - <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L2Jsb2IvbWFzdGVyL2xpbnRlcnMvLmVzbGludHJj" title="https://github.com/airbnb/javascript/blob/master/linters/.eslintrc">Airbnb Style .eslintrc<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2pzaGludC5jb20v" title="http://jshint.com/">JSHint<i class="fa fa-external-link"></i></span> - <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L2Jsb2IvbWFzdGVyL2xpbnRlcnMvLmpzaGludHJj" title="https://github.com/airbnb/javascript/blob/master/linters/.jshintrc">Airbnb Style .jshintrc<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzY3MtZGV2L25vZGUtanNjcw==" title="https://github.com/jscs-dev/node-jscs">JSCS<i class="fa fa-external-link"></i></span> - <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzY3MtZGV2L25vZGUtanNjcy9ibG9iL21hc3Rlci9wcmVzZXRzL2FpcmJuYi5qc29u" title="https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json">Airbnb Style Preset<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
</ul>
<p><strong>Other Style Guides</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9nb29nbGUuZ2l0aHViLmlvL3N0eWxlZ3VpZGUvamF2YXNjcmlwdGd1aWRlLnhtbA==" title="https://google.github.io/styleguide/javascriptguide.xml">Google JavaScript Style Guide<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb250cmlidXRlLmpxdWVyeS5vcmcvc3R5bGUtZ3VpZGUvanMv" title="https://contribute.jquery.org/style-guide/js/">jQuery Core Style Guidelines<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL2lkaW9tYXRpYy5qcw==" title="https://github.com/rwaldron/idiomatic.js">Principles of Writing Consistent, Idiomatic JavaScript<i class="fa fa-external-link"></i></span></li>
</ul>
<p><strong>Other Styles</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vY2pvaGFuc2VuLzQxMzUwNjU=" title="https://gist.github.com/cjohansen/4135065">Naming this in nested functions<i class="fa fa-external-link"></i></span> - Christian Johansen</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L2lzc3Vlcy81Mg==" title="https://github.com/airbnb/javascript/issues/52">Conditional Callbacks<i class="fa fa-external-link"></i></span> - Ross Allen</li>
<li><span class="exturl" data-url="aHR0cDovL3NpZGVlZmZlY3Qua3IvcG9wdWxhcmNvbnZlbnRpb24vI2phdmFzY3JpcHQ=" title="http://sideeffect.kr/popularconvention/#javascript">Popular JavaScript Coding Conventions on GitHub<i class="fa fa-external-link"></i></span> - JeongHoon Byun</li>
<li><span class="exturl" data-url="aHR0cDovL2JlbmFsbWFuLmNvbS9uZXdzLzIwMTIvMDUvbXVsdGlwbGUtdmFyLXN0YXRlbWVudHMtamF2YXNjcmlwdC8=" title="http://benalman.com/news/2012/05/multiple-var-statements-javascript/">Multiple var statements in JavaScript, not superfluous<i class="fa fa-external-link"></i></span> - Ben Alman</li>
</ul>
<p><strong>Further Reading</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qYXZhc2NyaXB0d2VibG9nLndvcmRwcmVzcy5jb20vMjAxMC8xMC8yNS91bmRlcnN0YW5kaW5nLWphdmFzY3JpcHQtY2xvc3VyZXMv" title="https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/">Understanding JavaScript Closures<i class="fa fa-external-link"></i></span> - Angus Croll</li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy4yYWxpdHkuY29tLzIwMTMvMDYvYmFzaWMtamF2YXNjcmlwdC5odG1s" title="http://www.2ality.com/2013/06/basic-javascript.html">Basic JavaScript for the impatient programmer<i class="fa fa-external-link"></i></span> - Dr. Axel Rauschmayer</li>
<li><span class="exturl" data-url="aHR0cDovL3lvdW1pZ2h0bm90bmVlZGpxdWVyeS5jb20v" title="http://youmightnotneedjquery.com/">You Might Not Need jQuery<i class="fa fa-external-link"></i></span> - Zack Bloom &amp; Adam Schwartz</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x1a2Vob2Jhbi9lczZmZWF0dXJlcw==" title="https://github.com/lukehoban/es6features">ES6 Features<i class="fa fa-external-link"></i></span> - Luke Hoban</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JlbmRjL2Zyb250ZW5kLWd1aWRlbGluZXM=" title="https://github.com/bendc/frontend-guidelines">Frontend Guidelines<i class="fa fa-external-link"></i></span> - Benjamin De Cock</li>
</ul>
<p><strong>Books</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9KYXZhU2NyaXB0LUdvb2QtUGFydHMtRG91Z2xhcy1Dcm9ja2ZvcmQvZHAvMDU5NjUxNzc0Mg==" title="https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript: The Good Parts<i class="fa fa-external-link"></i></span> - Douglas Crockford</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9KYXZhU2NyaXB0LVBhdHRlcm5zLVN0b3lhbi1TdGVmYW5vdi9kcC8wNTk2ODA2NzUy" title="https://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752">JavaScript Patterns<i class="fa fa-external-link"></i></span> - Stoyan Stefanov</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9KYXZhU2NyaXB0LURlc2lnbi1QYXR0ZXJucy1SZWNpcGVzLVByb2JsZW0tU29sdXRpb24vZHAvMTU5MDU5OTA4WA==" title="https://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X">Pro JavaScript Design Patterns<i class="fa fa-external-link"></i></span>  - Ross Harmes and Dustin Diaz</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9IaWdoLVBlcmZvcm1hbmNlLVdlYi1TaXRlcy1Fc3NlbnRpYWwvZHAvMDU5NjUyOTMwOQ==" title="https://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309">High Performance Web Sites: Essential Knowledge for Front-End Engineers<i class="fa fa-external-link"></i></span> - Steve Souders</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9NYWludGFpbmFibGUtSmF2YVNjcmlwdC1OaWNob2xhcy1DLVpha2FzL2RwLzE0NDkzMjc2ODA=" title="https://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680">Maintainable JavaScript<i class="fa fa-external-link"></i></span> - Nicholas C. Zakas</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9KYXZhU2NyaXB0LVdlYi1BcHBsaWNhdGlvbnMtQWxleC1NYWNDYXcvZHAvMTQ0OTMwMzUxWA==" title="https://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X">JavaScript Web Applications<i class="fa fa-external-link"></i></span> - Alex MacCaw</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9Qcm8tSmF2YVNjcmlwdC1UZWNobmlxdWVzLUpvaG4tUmVzaWcvZHAvMTU5MDU5NzI3Mw==" title="https://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273">Pro JavaScript Techniques<i class="fa fa-external-link"></i></span> - John Resig</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9TbWFzaGluZy1Ob2RlLWpzLUphdmFTY3JpcHQtRXZlcnl3aGVyZS1NYWdhemluZS9kcC8xMTE5OTYyNTk1" title="https://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595">Smashing Node.js: JavaScript Everywhere<i class="fa fa-external-link"></i></span> - Guillermo Rauch</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW1hem9uLmNvbS9TZWNyZXRzLUphdmFTY3JpcHQtTmluamEtSm9obi1SZXNpZy9kcC8xOTMzOTg4NjlY" title="https://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X">Secrets of the JavaScript Ninja<i class="fa fa-external-link"></i></span> - John Resig and Bear Bibeault</li>
<li><span class="exturl" data-url="aHR0cDovL2h1bWFuamF2YXNjcmlwdC5jb20v" title="http://humanjavascript.com/">Human JavaScript<i class="fa fa-external-link"></i></span> - Henrik Joreteg</li>
<li><span class="exturl" data-url="aHR0cDovL3N1cGVyaGVyb2pzLmNvbS8=" title="http://superherojs.com/">Superhero.js<i class="fa fa-external-link"></i></span> - Kim Joar Bekkelund, Mads Mobæk, &amp; Olav Bjorkoy</li>
<li><span class="exturl" data-url="aHR0cDovL2pzYm9va3MucmV2b2x1bmV0LmNvbS8=" title="http://jsbooks.revolunet.com/">JSBooks<i class="fa fa-external-link"></i></span> - Julien Bouquillon</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubWFubmluZy5jb20vYm9va3MvdGhpcmQtcGFydHktamF2YXNjcmlwdA==" title="https://www.manning.com/books/third-party-javascript">Third Party JavaScript<i class="fa fa-external-link"></i></span> - Ben Vinegar and Anton Kovalyov</li>
<li><span class="exturl" data-url="aHR0cDovL2Ftem4uY29tLzAzMjE4MTIxODI=" title="http://amzn.com/0321812182">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript<i class="fa fa-external-link"></i></span> - David Herman</li>
<li><span class="exturl" data-url="aHR0cDovL2Vsb3F1ZW50amF2YXNjcmlwdC5uZXQv" title="http://eloquentjavascript.net/">Eloquent JavaScript<i class="fa fa-external-link"></i></span> - Marijn Haverbeke</li>
<li><span class="exturl" data-url="aHR0cDovL3Nob3Aub3JlaWxseS5jb20vcHJvZHVjdC8wNjM2OTIwMDMzNzY5LmRv" title="http://shop.oreilly.com/product/0636920033769.do">You Don’t Know JS: ES6 &amp; Beyond<i class="fa fa-external-link"></i></span> - Kyle Simpson</li>
</ul>
<p><strong>Blogs</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL2phdmFzY3JpcHR3ZWVrbHkuY29tLw==" title="http://javascriptweekly.com/">JavaScript Weekly<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qYXZhc2NyaXB0d2VibG9nLndvcmRwcmVzcy5jb20v" title="https://javascriptweblog.wordpress.com/">JavaScript, JavaScript…<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ib2NvdXAuY29tL3dlYmxvZw==" title="https://bocoup.com/weblog">Bocoup Weblog<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5hZGVxdWF0ZWx5Z29vZC5jb20v" title="http://www.adequatelygood.com/">Adequately Good<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubmN6b25saW5lLm5ldC8=" title="https://www.nczonline.net/">NCZOnline<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3BlcmZlY3Rpb25raWxscy5jb20v" title="http://perfectionkills.com/">Perfection Kills<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2JlbmFsbWFuLmNvbS8=" title="http://benalman.com/">Ben Alman<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2RtaXRyeS5iYXJhbm92c2tpeS5jb20v" title="http://dmitry.baranovskiy.com/">Dmitry Baranovskiy<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2R1c3RpbmRpYXouY29tLw==" title="http://dustindiaz.com/">Dustin Diaz<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2NvZGUudHV0c3BsdXMuY29tLz9zPWphdmFzY3JpcHQ=" title="http://code.tutsplus.com/?s=javascript">nettuts<i class="fa fa-external-link"></i></span></li>
</ul>
<p><strong>Podcasts</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qYXZhc2NyaXB0YWlyLmNvbS8=" title="https://javascriptair.com/">JavaScript Air<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZjaGF0LnR2L2pzLWphYmJlci8=" title="https://devchat.tv/js-jabber/">JavaScript Jabber<i class="fa fa-external-link"></i></span></li>
</ul>
<p><strong><a href="#目录">⬆ back to top</a></strong></p>
<h1 id="In-the-Wild"><a href="#In-the-Wild" class="headerlink" title="In the Wild"></a>In the Wild</h1><p>  This is a list of organizations that are using this style guide. Send us a pull request and we’ll add you to the list.</p>
<ul>
<li><strong>123erfasst</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzEyM2VyZmFzc3QvamF2YXNjcmlwdA==" title="https://github.com/123erfasst/javascript">123erfasst/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>3blades</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzNibGFkZXM=" title="https://github.com/3blades">3Blades<i class="fa fa-external-link"></i></span></li>
<li><strong>4Catalyzer</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzRDYXRhbHl6ZXIvamF2YXNjcmlwdA==" title="https://github.com/4Catalyzer/javascript">4Catalyzer/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Aan Zee</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FhblplZS9qYXZhc2NyaXB0" title="https://github.com/AanZee/javascript">AanZee/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Adult Swim</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FkdWx0LXN3aW0vamF2YXNjcmlwdA==" title="https://github.com/adult-swim/javascript">adult-swim/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Airbnb</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0" title="https://github.com/airbnb/javascript">airbnb/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>AltSchool</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0FsdFNjaG9vbC9qYXZhc2NyaXB0" title="https://github.com/AltSchool/javascript">AltSchool/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Apartmint</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FwYXJ0bWludC9qYXZhc2NyaXB0" title="https://github.com/apartmint/javascript">apartmint/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Ascribe</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FzY3JpYmUvamF2YXNjcmlwdA==" title="https://github.com/ascribe/javascript">ascribe/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Avalara</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F2YWxhcmEvamF2YXNjcmlwdA==" title="https://github.com/avalara/javascript">avalara/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Avant</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F2YW50Y3JlZGl0L2phdmFzY3JpcHQ=" title="https://github.com/avantcredit/javascript">avantcredit/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Axept</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F4ZXB0L2phdmFzY3JpcHQ=" title="https://github.com/axept/javascript">axept/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>BashPros</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Jhc2hQcm9zL2phdmFzY3JpcHQ=" title="https://github.com/BashPros/javascript">BashPros/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Billabong</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JpbGxhYm9uZy9qYXZhc2NyaXB0" title="https://github.com/billabong/javascript">billabong/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Bisk</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Jpc2sv" title="https://github.com/Bisk/">bisk<i class="fa fa-external-link"></i></span></li>
<li><strong>Bonhomme</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvbmhvbW1lcGFyaXMvamF2YXNjcmlwdA==" title="https://github.com/bonhommeparis/javascript">bonhommeparis/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Brainshark</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JyYWluc2hhcmsvamF2YXNjcmlwdA==" title="https://github.com/brainshark/javascript">brainshark/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>CaseNine</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Nhc2VOaW5lL2phdmFzY3JpcHQ=" title="https://github.com/CaseNine/javascript">CaseNine/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Cerner</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nlcm5lci8=" title="https://github.com/cerner/">Cerner<i class="fa fa-external-link"></i></span></li>
<li><strong>Chartboost</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NoYXJ0Qm9vc3QvamF2YXNjcmlwdC1zdHlsZS1ndWlkZQ==" title="https://github.com/ChartBoost/javascript-style-guide">ChartBoost/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>ComparaOnline</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbXBhcmFvbmxpbmUvamF2YXNjcmlwdC1zdHlsZS1ndWlkZQ==" title="https://github.com/comparaonline/javascript-style-guide">comparaonline/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Compass Learning</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvbXBhc3NsZWFybmluZy9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/compasslearning/javascript-style-guide">compasslearning/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>DailyMotion</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RhaWx5bW90aW9uL2phdmFzY3JpcHQ=" title="https://github.com/dailymotion/javascript">dailymotion/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>DoSomething</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RvU29tZXRoaW5nL2VzbGludC1jb25maWc=" title="https://github.com/DoSomething/eslint-config">DoSomething/eslint-config<i class="fa fa-external-link"></i></span></li>
<li><strong>Digitpaint</strong> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RpZ2l0cGFpbnQvamF2YXNjcmlwdA==" title="https://github.com/digitpaint/javascript">digitpaint/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Drupal</strong>: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZHJ1cGFsLm9yZy9wcm9qZWN0L2RydXBhbA==" title="https://www.drupal.org/project/drupal">www.drupal.org<i class="fa fa-external-link"></i></span></li>
<li><strong>Ecosia</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vjb3NpYS9qYXZhc2NyaXB0" title="https://github.com/ecosia/javascript">ecosia/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Evernote</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V2ZXJub3RlL2phdmFzY3JpcHQtc3R5bGUtZ3VpZGU=" title="https://github.com/evernote/javascript-style-guide">evernote/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>Evolution Gaming</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V2b2x1dGlvbi1nYW1pbmcvamF2YXNjcmlwdA==" title="https://github.com/evolution-gaming/javascript">evolution-gaming/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>EvozonJs</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2V2b3pvbmpzL2phdmFzY3JpcHQ=" title="https://github.com/evozonjs/javascript">evozonjs/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>ExactTarget</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0V4YWN0VGFyZ2V0L2phdmFzY3JpcHQ=" title="https://github.com/ExactTarget/javascript">ExactTarget/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Expensify</strong> <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0V4cGVuc2lmeS9TdHlsZS1HdWlkZS9ibG9iL21hc3Rlci9qYXZhc2NyaXB0Lm1k" title="https://github.com/Expensify/Style-Guide/blob/master/javascript.md">Expensify/Style-Guide<i class="fa fa-external-link"></i></span></li>
<li><strong>Flexberry</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZsZXhiZXJyeS9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/Flexberry/javascript-style-guide">Flexberry/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>Gawker Media</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dhd2tlcm1lZGlhLw==" title="https://github.com/gawkermedia/">gawkermedia<i class="fa fa-external-link"></i></span></li>
<li><strong>General Electric</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlbmVyYWxFbGVjdHJpYy9qYXZhc2NyaXB0" title="https://github.com/GeneralElectric/javascript">GeneralElectric/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Generation Tux</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dlbmVyYXRpb250dXgvc3R5bGVndWlkZQ==" title="https://github.com/generationtux/styleguide">GenerationTux/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>GoodData</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2RkYXRhL2dkYy1qcy1zdHlsZQ==" title="https://github.com/gooddata/gdc-js-style">gooddata/gdc-js-style<i class="fa fa-external-link"></i></span></li>
<li><strong>GreenChef</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dyZWVuY2hlZi9qYXZhc2NyaXB0" title="https://github.com/greenchef/javascript">greenchef/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Grooveshark</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dyb292ZXNoYXJrL2phdmFzY3JpcHQ=" title="https://github.com/grooveshark/javascript">grooveshark/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Grupo-Abraxas</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dydXBvLUFicmF4YXMvamF2YXNjcmlwdA==" title="https://github.com/Grupo-Abraxas/javascript">Grupo-Abraxas/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Honey</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hvbmV5c2NpZW5jZS9qYXZhc2NyaXB0" title="https://github.com/honeyscience/javascript">honeyscience/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>How About We</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hvd2Fib3V0d2UvamF2YXNjcmlwdC1zdHlsZS1ndWlkZQ==" title="https://github.com/howaboutwe/javascript-style-guide">howaboutwe/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Huballin</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1YmFsbGluLw==" title="https://github.com/huballin/">huballin<i class="fa fa-external-link"></i></span></li>
<li><strong>HubSpot</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0h1YlNwb3QvamF2YXNjcmlwdA==" title="https://github.com/HubSpot/javascript">HubSpot/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Hyper</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h5cGVyb3Nsby9qYXZhc2NyaXB0LXBsYXlib29rL2Jsb2IvbWFzdGVyL3N0eWxlLm1k" title="https://github.com/hyperoslo/javascript-playbook/blob/master/style.md">hyperoslo/javascript-playbook<i class="fa fa-external-link"></i></span></li>
<li><strong>InterCity Group</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ludGVyY2l0eWdyb3VwL2phdmFzY3JpcHQtc3R5bGUtZ3VpZGU=" title="https://github.com/intercitygroup/javascript-style-guide">intercitygroup/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>Jam3</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phbTMvSmF2YXNjcmlwdC1Db2RlLUNvbnZlbnRpb25z" title="https://github.com/Jam3/Javascript-Code-Conventions">Jam3/Javascript-Code-Conventions<i class="fa fa-external-link"></i></span></li>
<li><strong>JeopardyBot</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tlc25lL2plb3BhcmR5LWJvdC9ibG9iL21hc3Rlci9TVFlMRUdVSURFLm1k" title="https://github.com/kesne/jeopardy-bot/blob/master/STYLEGUIDE.md">kesne/jeopardy-bot<i class="fa fa-external-link"></i></span></li>
<li><strong>JSSolutions</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0pTU29sdXRpb25zL2phdmFzY3JpcHQ=" title="https://github.com/JSSolutions/javascript">JSSolutions/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Kaplan Komputing</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2thcGxhbmtvbXB1dGluZy9qYXZhc2NyaXB0" title="https://github.com/kaplankomputing/javascript">kaplankomputing/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>KickorStick</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tpY2tvcnN0aWNrLw==" title="https://github.com/kickorstick/">kickorstick<i class="fa fa-external-link"></i></span></li>
<li><strong>Kinetica Solutions</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tpbmV0aWNhL0phdmFzY3JpcHQtc3R5bGUtZ3VpZGU=" title="https://github.com/kinetica/Javascript-style-guide">kinetica/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>LEINWAND</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0xFSU5XQU5EL2phdmFzY3JpcHQ=" title="https://github.com/LEINWAND/javascript">LEINWAND/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Lonely Planet</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xvbmVseXBsYW5ldC9qYXZhc2NyaXB0" title="https://github.com/lonelyplanet/javascript">lonelyplanet/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>M2GEN</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL00yR0VOL2phdmFzY3JpcHQ=" title="https://github.com/M2GEN/javascript">M2GEN/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Mighty Spring</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pZ2h0eXNwcmluZy9qYXZhc2NyaXB0" title="https://github.com/mightyspring/javascript">mightyspring/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>MinnPost</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pbm5Qb3N0L2phdmFzY3JpcHQ=" title="https://github.com/MinnPost/javascript">MinnPost/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>MitocGroup</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01pdG9jR3JvdXAvamF2YXNjcmlwdA==" title="https://github.com/MitocGroup/javascript">MitocGroup/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>ModCloth</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vZGNsb3RoL2phdmFzY3JpcHQ=" title="https://github.com/modcloth/javascript">modcloth/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Money Advice Service</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbmV5YWR2aWNlc2VydmljZS9qYXZhc2NyaXB0" title="https://github.com/moneyadviceservice/javascript">moneyadviceservice/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Muber</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL211YmVyLw==" title="https://github.com/muber/">muber<i class="fa fa-external-link"></i></span></li>
<li><strong>National Geographic</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25hdGdlby8=" title="https://github.com/natgeo/">natgeo<i class="fa fa-external-link"></i></span></li>
<li><strong>Nimbl3</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25pbWJsMy9qYXZhc2NyaXB0" title="https://github.com/nimbl3/javascript">nimbl3/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Nulogy</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL251bG9neS9qYXZhc2NyaXB0" title="https://github.com/nulogy/javascript">nulogy/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Orange Hill Development</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29yYW5nZWhpbGwvamF2YXNjcmlwdA==" title="https://github.com/orangehill/javascript">orangehill/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Orion Health</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29yaW9uaGVhbHRoL2phdmFzY3JpcHQ=" title="https://github.com/orionhealth/javascript">orionhealth/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>OutBoxSoft</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL091dEJveFNvZnQvamF2YXNjcmlwdA==" title="https://github.com/OutBoxSoft/javascript">OutBoxSoft/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Peerby</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BlZXJieS9qYXZhc2NyaXB0" title="https://github.com/Peerby/javascript">Peerby/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Pier 1</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BpZXIxL2phdmFzY3JpcHQ=" title="https://github.com/pier1/javascript">Pier1/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Qotto</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1FvdHRvL2phdmFzY3JpcHQtc3R5bGUtZ3VpZGU=" title="https://github.com/Qotto/javascript-style-guide">Qotto/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>Razorfish</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Jhem9yZmlzaC9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/razorfish/javascript-style-guide">razorfish/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>reddit</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlZGRpdC9zdHlsZWd1aWRlL3RyZWUvbWFzdGVyL2phdmFzY3JpcHQ=" title="https://github.com/reddit/styleguide/tree/master/javascript">reddit/styleguide/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>React</strong>: <span class="exturl" data-url="aHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvY29udHJpYnV0aW5nL2hvdy10by1jb250cmlidXRlLmh0bWwjc3R5bGUtZ3VpZGU=" title="https://facebook.github.io/react/contributing/how-to-contribute.html#style-guide">facebook.github.io/react/contributing/how-to-contribute.html#style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>REI</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JlaS9jb2RlLXN0eWxlLWd1aWRlcy8=" title="https://github.com/rei/code-style-guides/">reidev/js-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>Ripple</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JpcHBsZS9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/ripple/javascript-style-guide">ripple/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>Sainsbury’s Supermarkets</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzYWluc2J1cnlwbGM=" title="https://github.com/jsainsburyplc">jsainsburyplc<i class="fa fa-external-link"></i></span></li>
<li><strong>SeekingAlpha</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlZWtpbmdhbHBoYS9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/seekingalpha/javascript-style-guide">seekingalpha/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>Shutterfly</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NodXR0ZXJmbHkvamF2YXNjcmlwdA==" title="https://github.com/shutterfly/javascript">shutterfly/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Sourcetoad</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NvdXJjZXRvYWQvamF2YXNjcmlwdA==" title="https://github.com/sourcetoad/javascript">sourcetoad/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Springload</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZ2xvYWQv" title="https://github.com/springload/">springload<i class="fa fa-external-link"></i></span></li>
<li><strong>StratoDem Analytics</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0cmF0b2RlbS9qYXZhc2NyaXB0" title="https://github.com/stratodem/javascript">stratodem/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>SteelKiwi Development</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0ZWVsa2l3aS9qYXZhc2NyaXB0" title="https://github.com/steelkiwi/javascript">steelkiwi/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>StudentSphere</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0dWRlbnRzcGhlcmUvZ3VpZGUtamF2YXNjcmlwdA==" title="https://github.com/studentsphere/guide-javascript">studentsphere/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>SwoopApp</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N3b29wYXBwL2phdmFzY3JpcHQ=" title="https://github.com/swoopapp/javascript">swoopapp/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>SysGarage</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5c2dhcmFnZS9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/sysgarage/javascript-style-guide">sysgarage/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>Syzygy Warsaw</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N5enlneXBsL2phdmFzY3JpcHQ=" title="https://github.com/syzygypl/javascript">syzygypl/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Target</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RhcmdldC9qYXZhc2NyaXB0" title="https://github.com/target/javascript">target/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>TheLadders</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RoZUxhZGRlcnMvamF2YXNjcmlwdA==" title="https://github.com/TheLadders/javascript">TheLadders/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>The Nerdery</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW5lcmRlcnkvamF2YXNjcmlwdC1zdGFuZGFyZHM=" title="https://github.com/thenerdery/javascript-standards">thenerdery/javascript-standards<i class="fa fa-external-link"></i></span></li>
<li><strong>T4R Technology</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1Q0Ui1UZWNobm9sb2d5L2phdmFzY3JpcHQ=" title="https://github.com/T4R-Technology/javascript">T4R-Technology/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>VoxFeed</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1ZveEZlZWQvamF2YXNjcmlwdC1zdHlsZS1ndWlkZQ==" title="https://github.com/VoxFeed/javascript-style-guide">VoxFeed/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><strong>WeBox Studio</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYm94c3R1ZGlvL2phdmFzY3JpcHQ=" title="https://github.com/weboxstudio/javascript">weboxstudio/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Weggo</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dlZ2dvL2phdmFzY3JpcHQ=" title="https://github.com/Weggo/javascript">Weggo/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>Zillow</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ppbGxvdy9qYXZhc2NyaXB0" title="https://github.com/zillow/javascript">zillow/javascript<i class="fa fa-external-link"></i></span></li>
<li><strong>ZocDoc</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1pvY0RvYy9qYXZhc2NyaXB0" title="https://github.com/ZocDoc/javascript">ZocDoc/javascript<i class="fa fa-external-link"></i></span></li>
</ul>
<p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p>
<h1 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h1><p>  This style guide is also available in other languages:</p>
<ul>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png" alt="br"> <strong>Brazilian Portuguese</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FybW91Y2FyL2phdmFzY3JpcHQtc3R5bGUtZ3VpZGU=" title="https://github.com/armoucar/javascript-style-guide">armoucar/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png" alt="bg"> <strong>Bulgarian</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JvcmlzbGF2dnYvamF2YXNjcmlwdA==" title="https://github.com/borislavvv/javascript">borislavvv/javascript<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png" alt="ca"> <strong>Catalan</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZwbXdlYi9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/fpmweb/javascript-style-guide">fpmweb/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png" alt="cn"> <strong>Chinese (Simplified)</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpbi0xMjMvamF2YXNjcmlwdA==" title="https://github.com/lin-123/javascript">lin-123/javascript<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png" alt="tw"> <strong>Chinese (Traditional)</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ppZ3Nhd3llL2phdmFzY3JpcHQ=" title="https://github.com/jigsawye/javascript">jigsawye/javascript<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png" alt="fr"> <strong>French</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25tdXNzeS9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/nmussy/javascript-style-guide">nmussy/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png" alt="de"> <strong>German</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RpbW9mdXJyZXIvamF2YXNjcmlwdC1zdHlsZS1ndWlkZQ==" title="https://github.com/timofurrer/javascript-style-guide">timofurrer/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png" alt="it"> <strong>Italian</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Npbmtzd2ltL2phdmFzY3JpcHQtc3R5bGUtZ3VpZGU=" title="https://github.com/sinkswim/javascript-style-guide">sinkswim/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png" alt="jp"> <strong>Japanese</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pdHN1cnVvZy9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/mitsuruog/javascript-style-guide">mitsuruog/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png" alt="kr"> <strong>Korean</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BhcmtTQi9qYXZhc2NyaXB0LXN0eWxlLWd1aWRl" title="https://github.com/ParkSB/javascript-style-guide">ParkSB/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png" alt="ru"> <strong>Russian</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlb25pZGxlYmVkZXYvamF2YXNjcmlwdC1haXJibmI=" title="https://github.com/leonidlebedev/javascript-airbnb">leonidlebedev/javascript-airbnb<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png" alt="es"> <strong>Spanish</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Bhb2xvY2FycmFzY28vamF2YXNjcmlwdC1zdHlsZS1ndWlkZQ==" title="https://github.com/paolocarrasco/javascript-style-guide">paolocarrasco/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png" alt="th"> <strong>Thai</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2x2YXJheXV0L2phdmFzY3JpcHQtc3R5bGUtZ3VpZGU=" title="https://github.com/lvarayut/javascript-style-guide">lvarayut/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png" alt="tr"> <strong>Turkish</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VyYXljZXRpbmF5L2phdmFzY3JpcHQ=" title="https://github.com/eraycetinay/javascript">eraycetinay/javascript<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Ukraine.png" alt="ua"> <strong>Ukrainian</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2l2YW56dXNrby9qYXZhc2NyaXB0" title="https://github.com/ivanzusko/javascript">ivanzusko/javascript<i class="fa fa-external-link"></i></span></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png" alt="vn"> <strong>Vietnam</strong>: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2huZ2lhbmcvamF2YXNjcmlwdC1zdHlsZS1ndWlkZQ==" title="https://github.com/hngiang/javascript-style-guide">hngiang/javascript-style-guide<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="The-JavaScript-Style-Guide-Guide"><a href="#The-JavaScript-Style-Guide-Guide" class="headerlink" title="The JavaScript Style Guide Guide"></a>The JavaScript Style Guide Guide</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L3dpa2kvVGhlLUphdmFTY3JpcHQtU3R5bGUtR3VpZGUtR3VpZGU=" title="https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide">Reference<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="Chat-With-Us-About-JavaScript"><a href="#Chat-With-Us-About-JavaScript" class="headerlink" title="Chat With Us About JavaScript"></a>Chat With Us About JavaScript</h1><ul>
<li>Find us on <span class="exturl" data-url="aHR0cHM6Ly9naXR0ZXIuaW0vYWlyYm5iL2phdmFzY3JpcHQ=" title="https://gitter.im/airbnb/javascript">gitter<i class="fa fa-external-link"></i></span>.</li>
</ul>
<h1 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L2dyYXBocy9jb250cmlidXRvcnM=" title="https://github.com/airbnb/javascript/graphs/contributors">View Contributors<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>(The MIT License)</p>
<p>Copyright (c) 2012 Airbnb</p>
<p>Permission is hereby granted, free of charge, to any person obtaining<br>a copy of this software and associated documentation files (the<br>‘Software’), to deal in the Software without restriction, including<br>without limitation the rights to use, copy, modify, merge, publish,<br>distribute, sublicense, and/or sell copies of the Software, and to<br>permit persons to whom the Software is furnished to do so, subject to<br>the following conditions:</p>
<p>The above copyright notice and this permission notice shall be<br>included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.<br>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY<br>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,<br>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE<br>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
<p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p>
<h1 id="Amendments"><a href="#Amendments" class="headerlink" title="Amendments"></a>Amendments</h1><p>We encourage you to fork this guide and change the rules to fit your team’s style guide. Below, you may list some amendments to the style guide. This allows you to periodically update your style guide without having to deal with merge conflicts.</p>
<h1 id=""><a href="#" class="headerlink" title="};"></a>};</h1>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax</title>
    <url>/2020/02/28/Ajax/</url>
    <content><![CDATA[<center><img src="https://i.loli.net/2020/02/28/obw8lPmXjDeQrTV.png" style="zoom: 60%;"/>

<p>Ajax 的使用步骤</center></p>
<a id="more"></a>

<p>Ajax就是浏览器提供的一套API， 可以通过javascript调用，从而实现通过代码控制请求与相应，实现网络编程。</p>
<p>好处：相比传统网络请求（数据写在html中），请求只发生在页面区域内，不会重新加载整个页面（像一些引入内容等），请求速度会更快。</p>
<p>坏处：不利于SEO，就是说不利于搜索引擎优化，目前百度不支持抓取js里的内容，只支持抓取html中的内容。国外已经支持抓取js里的内容。</p>
<p>注意：涉及到AJAX操作的页面<strong>不能</strong>使用文件协议访问（文件的方法访问）。</p>
<p>快速上手：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//xhr就类似于浏览器的作用（发送请求接收响应）</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">//获取相应状态码</span></span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState)<span class="comment">// ==&gt; 0 :初始化，请求代理对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以GET的方式发送请求</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>,<span class="string">'地址.php'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState)<span class="comment">// ==&gt; 1 : open 方法已经调用，建立一个与服务端特定端口的连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始请求,没有返回值</span></span><br><span class="line">xhr.send()	</span><br><span class="line"><span class="built_in">console</span>.log(xhr.readyState)<span class="comment">// ==&gt; 1 这里也是1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//接收请求</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">//获取相应状态描述</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText)</span><br><span class="line">  <span class="built_in">console</span>.log(xhr.readyState)<span class="comment">/* ==&gt; 2,3,4 : </span></span><br><span class="line"><span class="comment">  2指已经接受到相应报文的响应头，此时只接受到了响应头</span></span><br><span class="line"><span class="comment">  3指正在下载相应报文的响应体，有可能响应体为空，有可能不完整</span></span><br><span class="line"><span class="comment">  4指一切ok,可以执行后续的逻辑了</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/设置请求信息</span></span><br><span class="line"><span class="regexp">		</span></span><br><span class="line"><span class="regexp">  var xhr1 = new XMLHttpRequest()</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  xhr1.open('POST','ajax.php') /</span><span class="regexp">/设置请求行</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  xhr1.setRequestHeader('Foo', 'Bar') /</span><span class="regexp">/设置一个请求头</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/一旦你的请求体是 urlencoded 格式的内容，一定要设置请求头中 Content-Type 为对应的格式</span></span><br><span class="line"><span class="regexp">  xhr1.setRequestHeader('content-Type','application/</span>x-www-<span class="keyword">from</span>-urlencoded<span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  xhr1.send('</span>key1=value1&amp;key2=value2<span class="string">') //以urlencoded 格式设置请求体</span></span><br><span class="line"><span class="string">xhr.onreadystatechange = function() &#123;</span></span><br><span class="line"><span class="string">    if (this.readyState !=== 4) return</span></span><br><span class="line"><span class="string">    console.log(this.responseText)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.response === <span class="keyword">this</span>.responseText</span><br><span class="line"><span class="comment">// this.response:获取到的结果会根据this.responseType的变化而变化。</span></span><br><span class="line"><span class="comment">// this.responseText:永远获取的是字符串形式的响应体。</span></span><br></pre></td></tr></table></figure>

<h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p>流程：</p>
<blockquote>
<ol>
<li>选择一个模板引擎：<span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5jb20vdGovY29uc29saWRhdGUuanMjc3VwcG9ydGVkLXRlbXBsYXRlLWVuZ2luZXM=" title="http://github.com/tj/consolidate.js#supported-template-engines">http://github.com/tj/consolidate.js#supported-template-engines<i class="fa fa-external-link"></i></span></li>
<li>下载模板引擎JS文件。</li>
<li>引入到页面中。</li>
<li>准备一个模板。</li>
<li>准备一个数据。</li>
<li>通过模板引擎的JS提供的一个函数将模板和数据整合得到渲染结果HTML。</li>
<li>将渲染结果的HTML设置到默认元素的。innerHTML中。</li>
</ol>
</blockquote>
<p>利用模板引擎动态生成表格数据：客户端</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">	// 导入模板js文件 </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"template-web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	// 模板创建元素 </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"tmpl"</span> <span class="attr">type</span>=<span class="string">"text/html"</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="comment">// each遍历comments中的数据,动态的生成表格数据 </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">		</span><span class="template-variable">&#123;&#123;<span class="builtin-name">each</span> comments&#125;&#125;</span></span></span><br><span class="line"><span class="actionscript">		<span class="comment">// each内部$value拿到的是当前被遍历的那个元素,$index拿到的是下标 </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;$value.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;$value.age&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">		</span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span></span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	// ajax获取服务端的json数据 </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="actionscript">		xhr.open(<span class="string">'GET'</span>,<span class="string">'art-template.php'</span>)</span></span><br><span class="line">		xhr.send()</span><br><span class="line"><span class="actionscript">		xhr.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">if</span> (<span class="keyword">this</span>.readyState !== <span class="number">4</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="actionscript">			<span class="comment">// 将获取的json数据解析</span></span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.responseText)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">			<span class="comment">// 模板所需数据</span></span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> context = &#123;comments:res&#125;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> html1 = template(<span class="string">'tmpl'</span>,context)</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(html1)</span></span><br><span class="line">			</span><br><span class="line"><span class="javascript">			<span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>).innerHTML = html1</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务端：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="comment">//设置访问头格式</span></span><br><span class="line">header(<span class="string">'Content-Type: application/json'</span>);</span><br><span class="line"> <span class="meta">?&gt;</span></span><br><span class="line"> <span class="comment">//json数据</span></span><br><span class="line">[</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"1"</span>&#125;,	</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="string">"2"</span>&#125;,	</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"王五"</span>,<span class="string">"age"</span>:<span class="string">"3"</span>&#125;	</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h1 id="jQuery中ajax的使用"><a href="#jQuery中ajax的使用" class="headerlink" title="jQuery中ajax的使用"></a>jQuery中ajax的使用</h1><p>底层接口的使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	url:<span class="string">'time.php'</span>,</span><br><span class="line">	type:<span class="string">'get'</span>,</span><br><span class="line">	<span class="comment">//用于提交到服务端的参数，如果是 get 请求就通过 url 传递，如果是 post 请求就通过请求体传递</span></span><br><span class="line">	data: &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张三'</span>&#125;,</span><br><span class="line">    <span class="comment">//用于设置响应体的类型，和data参数没关系</span></span><br><span class="line">	dataType: <span class="string">'json'</span>,</span><br><span class="line">	success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>相关函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">	url:<span class="string">'time11.php'</span>,</span><br><span class="line">	type:<span class="string">'get'</span>,</span><br><span class="line">	beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//在所有发送请求的操作（open，send）之前执行</span></span><br><span class="line">	<span class="built_in">console</span>.log(xhr)</span><br><span class="line">	&#125;,</span><br><span class="line">	success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//隐藏loading，只有请求成功（状态码为200）才会执行</span></span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//隐藏loading，和success相反</span></span><br><span class="line">	<span class="built_in">console</span>.log(xhr)</span><br><span class="line">	&#125;,</span><br><span class="line">			</span><br><span class="line">	complete: <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//不管是成功还是失败都会执行这个函数，相当于success和error的结合体</span></span><br><span class="line">	<span class="built_in">console</span>.log(xhr)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>高度封装的函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('json.php', &#123; id: <span class="number">1</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.post(<span class="string">'json.php'</span>,&#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换成json对象</span></span><br><span class="line">$.getJSON(<span class="string">'json.php'</span>,&#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><p>同源策略：同源是指协议，端口，域名完全相同，默认只有同源的地址才能相互通过ajax发送请求。不同源地址之间请求我们称之为跨域请求。</p>
<h1 id="JS的方法"><a href="#JS的方法" class="headerlink" title="JS的方法"></a>JS的方法</h1><blockquote>
<p>所有的请求方式：ajax、img、link、script、iframe</p>
<p>校验目标：1. 能发出去。2. 能收回来。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ajax的方式请求(默认不能发送跨域请求)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//img的方式发送请求</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image()</span><br><span class="line">img.src = <span class="string">'不同源地址'</span></span><br><span class="line"><span class="comment">//结论：可以发送不同源地址之间的请求，但是无法拿到响应结果。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//link真正的定义：链入一个文档，通过rel属性申明链入的文档与当前文档之间的关系</span></span><br><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>)</span><br><span class="line">link.rel = <span class="string">'stylesheet'</span></span><br><span class="line">link.src = <span class="string">'地址'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="string">'link'</span>) </span><br><span class="line"><span class="comment">//结论：可以发送不同源地址之间的请求，但是无法拿到响应结果。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//script可以跨域请求</span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.src = <span class="string">'服务端地址'</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="string">'script'</span>) </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaabbb</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务端</span></span><br><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">'Content-Type:applacation/javascript'</span>);</span><br><span class="line">$json1 = &#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"age"</span>:<span class="number">14</span>&#125;;</span><br><span class="line">echo aaabbb(&#123;$json1&#125;);</span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">//结论：可以发送不同源地址之间的请求，但是无法拿到相应结果。可以借助于能够作为js执行来拿到结果。</span></span><br><span class="line"><span class="comment">//服务端把Content—Type设置成javascript，并把结果包装在一个函数内，客户端调用这个函数拿到结果，这个过程叫做JSONP。</span></span><br></pre></td></tr></table></figure>

<p>#　jQuery的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jsonp和ajax没有必然的联系,只需要把dataType设置成jsonp就可以跨域</span></span><br><span class="line">$.ajax (&#123;</span><br><span class="line">	url: <span class="string">'服务器地址'</span>,</span><br><span class="line">	dataType:<span class="string">'jsonp'</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><p><code>Cross Origin Resource Share</code>,跨域资源共享。</p>
<p>这种方案无需客户端做出任何变化，只是在被请求的服务端响应的时候添加一个<code>Access-Content-Allow-Origin</code>的响应头，表示这个资源是否允许指定域请求。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//允许远端访问</span></span><br><span class="line">header(<span class="string">'Access-Content-Allow-Origin: *'</span>);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery</title>
    <url>/2020/02/28/jQuery/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/wlqPOvM3H2eha75.png" style="zoom: 100%;"/>

<p>jQuery 的打开方式</p>
</center>
<a id="more"></a>

<p>学习目标:</p>
<ul>
<li>掌握编程jQuery的基本使用</li>
<li>掌握jQuery插件的使用</li>
<li>能够开发jQuery插件</li>
<li>选择器、属性操作、样式操作、节点操作、动画、事件、插件</li>
</ul>
<h1 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h1><h2 id="JavaScript库的概念"><a href="#JavaScript库的概念" class="headerlink" title="JavaScript库的概念"></a>JavaScript库的概念</h2><p>JavaScript开发的过程中，处理浏览器的兼容很复杂而且很耗时，于是一些封装了这些操作的库应运而生。这些库还会把一些常用的代码进行封装。</p>
<p>把一些常用到的方法写到一个单独的js文件，使用的时候直接去引用这js文件就可以了。（animate.js、common.js）</p>
<p>常见的JavaScript 库 - jQuery、Prototype、MooTools。其中jQuery是最常用的一个</p>
<p>jQuery其实就是一个js文件，里面封装了一大堆的方法方便我们的开发，其实就是一个加强版的common.js，因此我们学习jQuery，其实就是学习jQuery这个js文件中封装的一大堆方法。</p>
<h2 id="jQuery的优点好处"><a href="#jQuery的优点好处" class="headerlink" title="jQuery的优点好处"></a>jQuery的优点好处</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery设计的宗旨是&#39;Write Less，Do More&#39;，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的操作，优化HTML文档操作、事件处理、动画设计和Ajax交互。</span><br><span class="line">jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器。</span><br><span class="line">极大地简化了 JavaScript 编程。</span><br></pre></td></tr></table></figure>

<h2 id="jQuery的版本"><a href="#jQuery的版本" class="headerlink" title="jQuery的版本"></a>jQuery的版本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery版本有很多，分为1.x 2.x 3.x</span><br><span class="line"></span><br><span class="line">1.x版本：能够兼容IE678浏览器</span><br><span class="line">2.x版本：不兼容IE678浏览器</span><br><span class="line">1.x和2.x版本jquery都不再更新版本了，现在只更新3.x版本。</span><br><span class="line">3.x版本：不兼容IE678，更加的精简（在国内不流行，因为国内使用jQuery的主要目的就是兼容IE678）</span><br><span class="line"></span><br><span class="line">国内多数网站还在使用1.x的版本</span><br></pre></td></tr></table></figure>
<p>[jQuery官网](http:// jquery.com)</p>
<h2 id="体验jQuery"><a href="#体验jQuery" class="headerlink" title="体验jQuery"></a>体验jQuery</h2><p>案例：让div显示与设置内容</p>
<p>使用JavaScript开发过程中，有许多不便之处</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">-查找元素的方法太少，麻烦。</span><br><span class="line">-遍历伪数组很麻烦，通常要嵌套一大堆的<span class="keyword">for</span>循环。</span><br><span class="line">-有兼容性问题。</span><br><span class="line">-想要实现简单的动画效果，也很麻烦</span><br><span class="line">-代码冗余。</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#btn1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      	<span class="comment">// 隐式迭代：偷偷的遍历，在jQuery中，不需要手动写for循环了，会自动进行遍历。</span></span><br><span class="line">        $(<span class="string">'div'</span>).show(<span class="number">200</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">'#btn2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">'div'</span>).text(<span class="string">'我是内容'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>优点总结：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">-查找元素的方法多种多样，非常灵活</span><br><span class="line">-拥有隐式迭代特性，因此不再需要手写<span class="keyword">for</span>循环了。</span><br><span class="line">-完全没有兼容性问题。</span><br><span class="line">-实现动画非常简单，而且功能更加的强大。</span><br><span class="line">-代码简单、粗暴。</span><br></pre></td></tr></table></figure>

<h2 id="jQuery中顶级对象"><a href="#jQuery中顶级对象" class="headerlink" title="jQuery中顶级对象"></a>jQuery中顶级对象</h2><p>jQuery中的顶级对象是$或jQuery</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">获取jQuery对象</span><br><span class="line">入口函数</span><br><span class="line">高级功能</span><br></pre></td></tr></table></figure>

<p>注意：jQuery中的$和JQuery关键字本身为同一对象；</p>
<h2 id="jQuery中页面加载事件"><a href="#jQuery中页面加载事件" class="headerlink" title="jQuery中页面加载事件"></a>jQuery中页面加载事件</h2><p>使用jQuery的三个步骤：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">引入jQuery文件</span><br><span class="line">入口函数</span><br><span class="line">功能实现</span><br></pre></td></tr></table></figure>

<p>关于jQuery的入口函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>jQuery入口函数与window.onload的对比</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</span><br><span class="line">jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</span><br></pre></td></tr></table></figure>

<h1 id="jQuery对象和DOM对象"><a href="#jQuery对象和DOM对象" class="headerlink" title="jQuery对象和DOM对象"></a>jQuery对象和DOM对象</h1><h2 id="jQuery对象和DOM对象的区别"><a href="#jQuery对象和DOM对象的区别" class="headerlink" title="jQuery对象和DOM对象的区别"></a>jQuery对象和DOM对象的区别</h2><h2 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用原生JavaScript获取的DOM对象</span><br><span class="line">	通过document.getElementById()  反馈的是元素(DOM对象)</span><br><span class="line">通过document.getElementsByTagName()获取到的是什么？</span><br><span class="line">	伪数组(集合)，集合中的每一个对象是DOM对象</span><br></pre></td></tr></table></figure>

<h2 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery对象用$()的方式获取的对象</span><br><span class="line">jQuery对象又可以叫做包装集(包装的DOM对象的集合)</span><br></pre></td></tr></table></figure>

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>jQuery对象不能使用DOM对象的成员，DOM对象不能使用jQuery对象的成员</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DOM对象</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">box.text(<span class="string">'hello'</span>);</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">box.innerText = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery对象，jQuery对象加前缀$，用以区分DOM对象</span></span><br><span class="line"><span class="keyword">var</span> $box = $(<span class="string">'#box'</span>);</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">$box.innerText = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">$box.text(<span class="string">'hello'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery对象和DOM对象的相互转换"><a href="#jQuery对象和DOM对象的相互转换" class="headerlink" title="jQuery对象和DOM对象的相互转换"></a>jQuery对象和DOM对象的相互转换</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery对象转换成DOM对象：   </span><br><span class="line">	jQuery对象.get(索引值); </span><br><span class="line">	jQuery对象[索引值] </span><br><span class="line">    	jQuery对象是包装集(集合)，从集合中取数据可以使用索引的方式</span><br><span class="line">DOM对象转换成jQuery对象：   </span><br><span class="line">	$(DOM对象) 只有这一种方法;</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul>
<li>开关灯 [01-开关灯.html]</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅仅演示对象之间的转换，代码不推荐这么写</span></span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取元素；</span></span><br><span class="line">  <span class="keyword">var</span> inpArr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line">  <span class="comment">// 获取第一个按钮，然后绑定事件；</span></span><br><span class="line">  $(inpArr[<span class="number">0</span>]).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置body的背景色</span></span><br><span class="line">    $(<span class="string">'body'</span>)[<span class="number">0</span>].style.background = <span class="string">'#fff'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 获取第二个按钮，然后绑定事件；</span></span><br><span class="line">  $(inpArr[<span class="number">1</span>]).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置body的背景色</span></span><br><span class="line">    $(<span class="string">'body'</span>).get(<span class="number">0</span>).style.background = <span class="string">'#000'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。</p>
<p>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。（查看jQuery文档）</p>
<p>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。</p>
<h2 id="jQuery基本选择器"><a href="#jQuery基本选择器" class="headerlink" title="jQuery基本选择器"></a>jQuery基本选择器</h2><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>ID选择器</td>
<td>$(‘#id’);</td>
<td align="left">获取指定ID的元素</td>
</tr>
<tr>
<td>类选择器</td>
<td>$(‘.class’);</td>
<td align="left">获取同一类class的元素</td>
</tr>
<tr>
<td>标签选择器</td>
<td>$(‘div’);</td>
<td align="left">获取同一类标签的所有元素</td>
</tr>
<tr>
<td>并集选择器</td>
<td>$(‘div,p,li’);</td>
<td align="left">使用逗号分隔，只要符合条件之一就可。</td>
</tr>
<tr>
<td>交集选择器</td>
<td>$(‘div.redClass’);</td>
<td align="left">获取class为redClass的div元素</td>
</tr>
</tbody></table>
<ul>
<li>总结：跟css的选择器用法一模一样。</li>
</ul>
<h2 id="jQuery层级选择器"><a href="#jQuery层级选择器" class="headerlink" title="jQuery层级选择器"></a>jQuery层级选择器</h2><table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>子代选择器</td>
<td>$(‘ul &gt; li’);</td>
<td align="left">使用-号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td>
</tr>
<tr>
<td>后代选择器</td>
<td>$(‘ul li’);</td>
<td align="left">使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td>
</tr>
</tbody></table>
<ul>
<li>跟CSS的选择器一模一样。</li>
</ul>
<h2 id="jQuery过滤选择器"><a href="#jQuery过滤选择器" class="headerlink" title="jQuery过滤选择器"></a>jQuery过滤选择器</h2><ul>
<li>这类选择器都带冒号:</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>:eq（index）</td>
<td>$(‘li:eq(2)’).css(‘color’, ‘red’);</td>
<td align="left">获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td>
</tr>
<tr>
<td>:odd</td>
<td>$(‘li:odd’).css(‘color’, ‘red’);</td>
<td align="left">获取到的li元素中，选择索引号为奇数的元素</td>
</tr>
<tr>
<td>:even</td>
<td>$(‘li:even’).css(‘color’, ‘red’);</td>
<td align="left">获取到的li元素中，选择索引号为偶数的元素</td>
</tr>
</tbody></table>
<h2 id="jQuery筛选选择器-方法"><a href="#jQuery筛选选择器-方法" class="headerlink" title="jQuery筛选选择器(方法)"></a>jQuery筛选选择器(方法)</h2><ul>
<li>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>用法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>children(selector)</td>
<td>$(‘ul’).children(‘li’)</td>
<td align="left">相当于$(‘ul-li’)，子类选择器</td>
</tr>
<tr>
<td>find(selector)</td>
<td>$(‘ul’).find(‘li’);</td>
<td align="left">相当于$(‘ul li’),后代选择器</td>
</tr>
<tr>
<td>siblings(selector)</td>
<td>$(‘#first’).siblings(‘li’);</td>
<td align="left">查找兄弟节点，不包括自己本身。</td>
</tr>
<tr>
<td>parent()</td>
<td>$(‘#first’).parent();</td>
<td align="left">查找父亲</td>
</tr>
<tr>
<td>eq(index)</td>
<td>$(‘li’).eq(2);</td>
<td align="left">相当于$(‘li:eq(2)’),index从0开始</td>
</tr>
<tr>
<td>next()</td>
<td>$(‘li’).next()</td>
<td align="left">找下一个兄弟</td>
</tr>
<tr>
<td>prev()</td>
<td>$(‘li’).prev()</td>
<td align="left">找上一次兄弟</td>
</tr>
</tbody></table>
<h1 id="jQuery操作样式"><a href="#jQuery操作样式" class="headerlink" title="jQuery操作样式"></a>jQuery操作样式</h1><h2 id="CSS操作"><a href="#CSS操作" class="headerlink" title="CSS操作"></a>CSS操作</h2><ul>
<li><p>功能：设置或者修改样式，操作的是style属性。</p>
</li>
<li><p>操作单个样式</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name：需要设置的样式名称</span></span><br><span class="line"><span class="comment">// value：对应的样式值</span></span><br><span class="line">$obj.css(name, value);</span><br><span class="line"><span class="comment">// 使用案例</span></span><br><span class="line">$(<span class="string">'#one'</span>).css(<span class="string">'background'</span>,<span class="string">'gray'</span>);<span class="comment">// 将背景色修改为灰色</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置多个样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是一个对象，对象中包含了需要设置的样式名和样式值</span></span><br><span class="line">$obj.css(obj);</span><br><span class="line"><span class="comment">// 使用案例</span></span><br><span class="line">$(<span class="string">'#one'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background'</span>:<span class="string">'gray'</span>,</span><br><span class="line">    <span class="string">'width'</span>:<span class="string">'400px'</span>,</span><br><span class="line">    <span class="string">'height'</span>:<span class="string">'200px'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>获取样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name:需要获取的样式名称</span></span><br><span class="line">$obj.css(name);</span><br><span class="line"><span class="comment">// 案例</span></span><br><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'background-color'</span>);</span><br></pre></td></tr></table></figure>

<p>注意：获取样式操作只会返回第一个元素对应的样式值。</p>
<p>隐式迭代：</p>
<ol>
<li>设置操作的时候，如果是多个元素，那么给所有的元素设置相同的值</li>
<li>获取操作的时候，如果是多个元素，那么只会返回第一个元素的值。</li>
</ol>
<h2 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a>class操作</h2><ul>
<li>添加样式类</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name：需要添加的样式类名，注意参数不要带点.</span></span><br><span class="line">$obj.addClass(name);</span><br><span class="line"><span class="comment">// 例子,给所有的div添加one的样式。</span></span><br><span class="line">$(<span class="string">'div'</span>).addClass(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>移除样式类</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name:需要移除的样式类名</span></span><br><span class="line">$obj.removeClass(<span class="string">'name'</span>);</span><br><span class="line"><span class="comment">// 例子，移除div中one的样式类名</span></span><br><span class="line">$(<span class="string">'div'</span>).removeClass(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>判断是否有某个样式类</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name:用于判断的样式类名，返回值为true false</span></span><br><span class="line">$obj.hasClass(name)</span><br><span class="line"><span class="comment">// 例子，判断第一个div是否有one的样式类</span></span><br><span class="line">$(<span class="string">'div'</span>).hasClass(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>切换样式类</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name:需要切换的样式类名，如果有，移除该样式，如果没有，添加该样式。</span></span><br><span class="line">$obj.toggleClass(name);</span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">$(<span class="string">'div'</span>).toggleClass(<span class="string">'one'</span>);</span><br></pre></td></tr></table></figure>

<h1 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h1><ul>
<li>jQuery提供了三组基本动画，这些动画都是标准的、有规律的效果，jQuery还提供了自定义动画的功能。</li>
</ul>
<h2 id="三组基本动画"><a href="#三组基本动画" class="headerlink" title="三组基本动画"></a>三组基本动画</h2><ul>
<li>显示(show)与隐藏(hide)是一组动画：</li>
<li>滑入(slideUp)与滑出(slideDown)与切换(slideToggle)，效果与卷帘门类似</li>
<li>淡入(fadeIn)与淡出(fadeOut)与切换(fadeToggle)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$obj.show([speed], [callback]);</span><br><span class="line"><span class="comment">// speed(可选)：动画的执行时间</span></span><br><span class="line">	 <span class="comment">// 1.如果不传，就没有动画效果。如果是slide和fade系列，会默认为normal</span></span><br><span class="line">	 <span class="comment">// 2.毫秒值(比如1000),动画在1000毫秒执行完成(推荐)</span></span><br><span class="line">     <span class="comment">// 3.固定字符串，slow(200)、normal(400)、fast(600)，如果传其他字符串，则默认为normal。</span></span><br><span class="line"><span class="comment">// callback(可选):执行完动画后执行的回调函数</span></span><br><span class="line"></span><br><span class="line">slideDown()/slideUp()/slideToggle();同理</span><br><span class="line">fadeIn()/fadeOut();fadeToggle();同理</span><br></pre></td></tr></table></figure>

<h2 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h2><ul>
<li>animate: 自定义动画</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(selector).animate(&#123;params&#125;,[speed],[easing],[callback]);</span><br><span class="line"><span class="comment">// &#123;params&#125;：要执行动画的CSS属性，带数字（必选）</span></span><br><span class="line"><span class="comment">// speed：执行动画时长（可选）</span></span><br><span class="line"><span class="comment">// easing:执行效果，默认为swing（缓动）  可以是linear（匀速）</span></span><br><span class="line"><span class="comment">// callback：动画执行完后立即执行的回调函数（可选）</span></span><br></pre></td></tr></table></figure>

<h2 id="动画队列与停止动画"><a href="#动画队列与停止动画" class="headerlink" title="动画队列与停止动画"></a>动画队列与停止动画</h2><ul>
<li>在同一个元素上执行多个动画，那么对于这个动画来说，后面的动画会被放到动画队列中，等前面的动画执行完成了才会执行（联想：火车进站）。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stop方法：停止动画效果</span></span><br><span class="line">stop(clearQueue, jumpToEnd);</span><br><span class="line"><span class="comment">// 第一个参数：是否清除队列</span></span><br><span class="line"><span class="comment">// 第二个参数：是否跳转到最终效果</span></span><br></pre></td></tr></table></figure>

<h1 id="jQuery节点操作"><a href="#jQuery节点操作" class="headerlink" title="jQuery节点操作"></a>jQuery节点操作</h1><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $(htmlStr)</span></span><br><span class="line"><span class="comment">// htmlStr：html格式的字符串</span></span><br><span class="line">$(<span class="string">'&lt;span-这是一个span元素&lt;/span-'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">append  appendTo	在被选元素的结尾插入内容</span><br><span class="line">prepend prependTo	在被选元素的开头插入内容</span><br><span class="line">before				在被选元素之后插入内容</span><br><span class="line">after				在被选元素之前插入内容</span><br></pre></td></tr></table></figure>

<h2 id="清空节点与删除节点"><a href="#清空节点与删除节点" class="headerlink" title="清空节点与删除节点"></a>清空节点与删除节点</h2><ul>
<li>empty：清空指定节点的所有元素，自身保留(清理门户)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).empty(); <span class="comment">// 清空div的所有内容（推荐使用，会清除子元素上绑定的内容，源码）</span></span><br><span class="line">$(<span class="string">'div'</span>).html(<span class="string">''</span>);<span class="comment">// 使用html方法来清空元素，不推荐使用，会造成内存泄漏，绑定的事件不会被清除。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>remove：相比于empty，自身也删除（自杀）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).remove();</span><br></pre></td></tr></table></figure>



<h2 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h2><ul>
<li>作用：复制匹配的元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 复制$(selector)所匹配到的元素（深度复制）</span></span><br><span class="line"><span class="comment">// cloneNode(true)</span></span><br><span class="line"><span class="comment">// 返回值为复制的新元素，和原来的元素没有任何关系了。即修改新元素，不会影响到原来的元素。</span></span><br><span class="line">$(selector).clone();</span><br></pre></td></tr></table></figure>

<h1 id="jQuery操作属性"><a href="#jQuery操作属性" class="headerlink" title="jQuery操作属性"></a>jQuery操作属性</h1><h2 id="attr操作"><a href="#attr操作" class="headerlink" title="attr操作"></a>attr操作</h2><ul>
<li>设置单个属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：需要设置的属性名</span></span><br><span class="line"><span class="comment">// 第二个参数：对应的属性值</span></span><br><span class="line">$obj.attr(name, value);</span><br><span class="line"><span class="comment">// 用法举例</span></span><br><span class="line">$(<span class="string">'img'</span>).attr(<span class="string">'title'</span>,<span class="string">'哎哟，不错哦'</span>);</span><br><span class="line">$(<span class="string">'img'</span>).attr(<span class="string">'alt'</span>,<span class="string">'哎哟，不错哦'</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>设置多个属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是一个对象，包含了需要设置的属性名和属性值</span></span><br><span class="line">$obj.attr(obj)</span><br><span class="line"><span class="comment">// 用法举例</span></span><br><span class="line">$(<span class="string">'img'</span>).attr(&#123;</span><br><span class="line">    title:<span class="string">'哎哟，不错哦'</span>,</span><br><span class="line">    alt:<span class="string">'哎哟，不错哦'</span>,</span><br><span class="line">    style:<span class="string">'opacity:.5'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>获取属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传需要获取的属性名称，返回对应的属性值</span></span><br><span class="line">$obj.attr(name)</span><br><span class="line"><span class="comment">// 用法举例</span></span><br><span class="line"><span class="keyword">var</span> oTitle = $(<span class="string">'img'</span>).attr(<span class="string">'title'</span>);</span><br><span class="line">alert(oTitle);</span><br></pre></td></tr></table></figure>

<ul>
<li>移除属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数：需要移除的属性名，</span></span><br><span class="line">$obj.removeAttr(name);</span><br><span class="line"><span class="comment">// 用法举例</span></span><br><span class="line">$(<span class="string">'img'</span>).removeAttr(<span class="string">'title'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="prop操作"><a href="#prop操作" class="headerlink" title="prop操作"></a>prop操作</h2><ul>
<li>在jQuery1.6之后，对于checked、selected、disabled这类boolean类型的属性来说，不能用attr方法，只能用prop方法。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">$(<span class="string">':checked'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 获取属性</span></span><br><span class="line">$(<span class="string">':checked'</span>).prop(<span class="string">'checked'</span>);<span class="comment">// 返回true或者false</span></span><br></pre></td></tr></table></figure>

<h2 id="val-text-html"><a href="#val-text-html" class="headerlink" title="val()/text/()html()"></a>val()/text/()html()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$obj.val()		获取或者设置表单元素的value属性的值</span><br><span class="line">$obj.html() 	对应innerHTML</span><br><span class="line">$obj.text()		对应innerText/textContent，处理了浏览器的兼容性</span><br></pre></td></tr></table></figure>

<h1 id="jQuery尺寸和位置操作"><a href="#jQuery尺寸和位置操作" class="headerlink" title="jQuery尺寸和位置操作"></a>jQuery尺寸和位置操作</h1><h2 id="width方法与height方法"><a href="#width方法与height方法" class="headerlink" title="width方法与height方法"></a>width方法与height方法</h2><ul>
<li>设置或者获取高度，不包括内边距、边框和外边距</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带参数表示设置高度</span></span><br><span class="line">$(<span class="string">'img'</span>).height(<span class="number">200</span>);</span><br><span class="line"><span class="comment">// 不带参数获取高度</span></span><br><span class="line">$(<span class="string">'img'</span>).height();</span><br></pre></td></tr></table></figure>

<p>获取网页的可视区宽高</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取可视区宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).width();</span><br><span class="line"><span class="comment">// 获取可视区高度</span></span><br><span class="line">$(<span class="built_in">window</span>).height();</span><br></pre></td></tr></table></figure>

<h2 id="innerWidth-innerHeight-outerWidth-outerHeight"><a href="#innerWidth-innerHeight-outerWidth-outerHeight" class="headerlink" title="innerWidth/innerHeight/outerWidth/outerHeight"></a>innerWidth/innerHeight/outerWidth/outerHeight</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">innerWidth()/innerHeight()	方法返回元素的宽度/高度（包括内边距）。</span><br><span class="line">outerWidth()/outerHeight()  方法返回元素的宽度/高度（包括内边距和边框）。</span><br><span class="line">outerWidth(<span class="literal">true</span>)/outerHeight(<span class="literal">true</span>)  方法返回元素的宽度/高度（包括内边距、边框和外边距）。</span><br></pre></td></tr></table></figure>

<h2 id="scrollTop与scrollLeft"><a href="#scrollTop与scrollLeft" class="headerlink" title="scrollTop与scrollLeft"></a>scrollTop与scrollLeft</h2><ul>
<li>设置或者获取垂直滚动条的位置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取页面被卷曲的高度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollTop();</span><br><span class="line"><span class="comment">// 获取页面被卷曲的宽度</span></span><br><span class="line">$(<span class="built_in">window</span>).scrollLeft();</span><br></pre></td></tr></table></figure>

<h2 id="offset方法与position方法"><a href="#offset方法与position方法" class="headerlink" title="offset方法与position方法"></a>offset方法与position方法</h2><ul>
<li>offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素(offsetParent)的位置。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span></span><br><span class="line">$(selector).offset();</span><br><span class="line"><span class="comment">// 获取相对于其最近的有定位的父元素的位置。</span></span><br><span class="line">$(selector).position();</span><br></pre></td></tr></table></figure>

<h1 id="jQuery事件机制"><a href="#jQuery事件机制" class="headerlink" title="jQuery事件机制"></a>jQuery事件机制</h1><ul>
<li>JavaScript中已经学习过了事件，jQuery对JavaScript事件进行了封装，增加并扩展了事件处理机制。jQuery不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。</li>
</ul>
<h2 id="jQuery事件发展历程-了解"><a href="#jQuery事件发展历程-了解" class="headerlink" title="jQuery事件发展历程(了解)"></a>jQuery事件发展历程(了解)</h2><p>简单事件绑定–bind事件绑定–delegate事件绑定–on事件绑定(推荐)</p>
<ul>
<li>简单事件注册</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">click(handler)			单击事件</span><br><span class="line">mouseenter(handler)		鼠标进入事件</span><br><span class="line">mouseleave(handler)		鼠标离开事件</span><br></pre></td></tr></table></figure>

<p>缺点：不能同时注册多个事件</p>
<ul>
<li>bind方式注册事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：事件类型</span></span><br><span class="line"><span class="comment">// 第二个参数：事件处理程序</span></span><br><span class="line">$(<span class="string">'p'</span>).bind(<span class="string">'click mouseenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 事件响应方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>缺点：不支持动态事件绑定</p>
<ul>
<li>delegate注册委托事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：selector，要绑定事件的元素</span></span><br><span class="line"><span class="comment">// 第二个参数：事件类型</span></span><br><span class="line"><span class="comment">// 第三个参数：事件处理函数</span></span><br><span class="line">$(<span class="string">'.parentBox'</span>).delegate(<span class="string">'p'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 为 .parentBox下面的所有的p标签绑定事件</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>缺点：只能注册委托事件，因此注册时间需要记得方法太多了</p>
<ul>
<li>on注册事件</li>
</ul>
<h2 id="on注册事件-重点"><a href="#on注册事件-重点" class="headerlink" title="on注册事件(重点)"></a>on注册事件(重点)</h2><ul>
<li>jQuery1.7之后，jQuery用on统一了所有事件的处理方法。</li>
<li>最现代的方式，兼容zepto(移动端类似jQuery的一个库)，强烈建议使用。</li>
</ul>
<p>on注册简单事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span></span><br><span class="line">$(selector).on( <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>on注册事件委托</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span></span><br><span class="line">$(selector).on( <span class="string">'click'</span>,<span class="string">'span'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>事件委托原理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事件委托的原理</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'#ul'</span>);</span><br><span class="line">ul.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(e.target.tagName);</span></span><br><span class="line">  <span class="keyword">if</span> (e.target.tagName.toLowerCase() === <span class="string">'li'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>on注册事件的语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span></span><br><span class="line"><span class="comment">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span></span><br><span class="line"><span class="comment">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span></span><br><span class="line"><span class="comment">// 第四个参数：handler，事件处理函数</span></span><br><span class="line">$(selector).on(events[,selector][,data],handler);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过源码查看 bind click delegate on 注册事件的区别</li>
</ul>
<h2 id="事件解绑"><a href="#事件解绑" class="headerlink" title="事件解绑"></a>事件解绑</h2><ul>
<li>unbind方式（不用）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(selector).unbind(); <span class="comment">// 解绑所有的事件</span></span><br><span class="line">$(selector).unbind(<span class="string">'click'</span>); <span class="comment">// 解绑指定的事件</span></span><br></pre></td></tr></table></figure>

<ul>
<li>undelegate方式（不用）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$( selector ).undelegate(); <span class="comment">// 解绑所有的delegate事件</span></span><br><span class="line">$( selector).undelegate( <span class="string">'click'</span> ); <span class="comment">// 解绑所有的click事件</span></span><br></pre></td></tr></table></figure>

<ul>
<li>off方式（推荐）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解绑匹配元素的所有事件</span></span><br><span class="line">$(selector).off();</span><br><span class="line"><span class="comment">// 解绑匹配元素的所有click事件</span></span><br><span class="line">$(selector).off(<span class="string">'click'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(selector).click(); <span class="comment">// 触发 click事件</span></span><br><span class="line">$(selector).trigger(<span class="string">'click'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery事件对象"><a href="#jQuery事件对象" class="headerlink" title="jQuery事件对象"></a>jQuery事件对象</h2><p>jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// screenX和screenY	对应屏幕最左上角的值</span></span><br><span class="line"><span class="comment">// clientX和clientY	距离页面左上角的位置（忽视滚动条）</span></span><br><span class="line"><span class="comment">// pageX和pageY	距离页面最顶部的左上角的位置（会计算滚动条的距离）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// event.keyCode	按下的键盘代码</span></span><br><span class="line"><span class="comment">// event.data	存储绑定事件时传递的附加数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// event.stopPropagation()	阻止事件冒泡行为</span></span><br><span class="line"><span class="comment">// event.preventDefault()	阻止浏览器默认行为</span></span><br><span class="line"><span class="comment">// return false:既能阻止事件冒泡，又能阻止浏览器默认行为。</span></span><br></pre></td></tr></table></figure>

<h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><ul>
<li>按键变色 [19-按键变色.html]</li>
</ul>
<h1 id="jQuery补充知识点"><a href="#jQuery补充知识点" class="headerlink" title="jQuery补充知识点"></a>jQuery补充知识点</h1><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><ul>
<li>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 jQuery对象。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">end(); <span class="comment">// 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。</span></span><br></pre></td></tr></table></figure>

<h2 id="each方法"><a href="#each方法" class="headerlink" title="each方法"></a>each方法</h2><ul>
<li>jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。</li>
</ul>
<p>作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数一表示当前元素在所有匹配元素中的索引号</span></span><br><span class="line"><span class="comment">// 参数二表示当前元素（DOM对象）</span></span><br><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h2><ul>
<li>jQuery使用$作为标示符，但是如果与其他框架中的$冲突时，jQuery可以释放$符的控制权.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = $.noConflict();<span class="comment">// 释放$的控制权,并且把$的能力给了c</span></span><br></pre></td></tr></table></figure>

<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ul>
<li>弹出层插件 layer<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlbnRzaW4vbGF5ZXI=" title="https://github.com/sentsin/layer">layer插件<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>放大镜插件<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5qYWNrbG1vb3JlLmNvbS96b29tLw==" title="http://www.jacklmoore.com/zoom/">jQuery.zoom<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>轮播图插件<ul>
<li><span class="exturl" data-url="aHR0cDovL3NvcmdhbGxhLmNvbS9qY2Fyb3VzZWwv" title="http://sorgalla.com/jcarousel/">http://sorgalla.com/jcarousel/<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL093bENhcm91c2VsMi9Pd2xDYXJvdXNlbDI=" title="https://github.com/OwlCarousel2/OwlCarousel2">https://github.com/OwlCarousel2/OwlCarousel2<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>图片懒加载插件<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3R1dXBvbGEvanF1ZXJ5X2xhenlsb2Fk" title="https://github.com/tuupola/jquery_lazyload">jQuery.lazyload<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>jQueryUI<ul>
<li>常用的2-3个功能演示</li>
</ul>
</li>
<li>查看jQuery插件的源码</li>
</ul>
<h2 id="自己探索插件"><a href="#自己探索插件" class="headerlink" title="自己探索插件"></a>自己探索插件</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F1aS9hcnREaWFsb2c=" title="https://github.com/aui/artDialog">artDialog<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhdC96b29tLmpz" title="https://github.com/fat/zoom.js">图片放大<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5naXRodWIuY29t" title="http://www.github.com">github上搜索<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="jQuery插件开发"><a href="#jQuery插件开发" class="headerlink" title="jQuery插件开发"></a>jQuery插件开发</h1><ul>
<li>给jQuery增加方法的两种方式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.method = fn		静态方法</span><br><span class="line">$.fn.method = fn	实例方法</span><br></pre></td></tr></table></figure>

<ul>
<li>增加一个静态方法，实现两个数的和，插件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(jQuery))</span><br><span class="line"></span><br><span class="line">$.add(<span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>tab栏插件 [21-tab栏插件.html]</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// &#123;tabMenu: '#aa'&#125;</span></span><br><span class="line">  $.tab = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 默认参数</span></span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">      tabMenu: <span class="string">'#tab'</span>,</span><br><span class="line">      activeClass: <span class="string">'active'</span>,</span><br><span class="line">      tabMain: <span class="string">'#tab-main'</span>,</span><br><span class="line">      tabMainSub: <span class="string">'.main'</span>,</span><br><span class="line">      selectedClass: <span class="string">'selected'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把options中的属性，把对应属性的值赋给defaults对应的属性</span></span><br><span class="line">    <span class="comment">// defaults.tabMenu = options.tabMenu || defaults.tabMenu;</span></span><br><span class="line">    <span class="comment">// for(var key in options) &#123;</span></span><br><span class="line">    <span class="comment">//   defaults[key] = options[key];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    $.extend(defaults, options);</span><br><span class="line"></span><br><span class="line">    $(defaults.tabMenu).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>)</span><br><span class="line">        .addClass(defaults.activeClass)</span><br><span class="line">        .siblings()</span><br><span class="line">        .removeClass(defaults.activeClass);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="keyword">var</span> index = $(<span class="keyword">this</span>).index();</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      $(defaults.tabMain + <span class="string">' '</span> + defaults.tabMainSub)</span><br><span class="line">        .eq(index)</span><br><span class="line">        .addClass(defaults.selectedClass)</span><br><span class="line">        .siblings()</span><br><span class="line">        .removeClass(defaults.selectedClass);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="built_in">window</span>.jQuery))</span><br></pre></td></tr></table></figure>

<ul>
<li>表格插件  [22-表格插件.html]</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 内部的变量，外部无法访问，防止变量名冲突</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 给$增加了一个实例方法</span></span><br><span class="line">  $.fn.table = <span class="function"><span class="keyword">function</span> (<span class="params">header, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    array.push(<span class="string">'&lt;table&gt;'</span>);</span><br><span class="line">    array.push(<span class="string">'&lt;tr&gt;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成表头</span></span><br><span class="line">    $.each(header, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      array.push(<span class="string">'&lt;th&gt;'</span> + <span class="keyword">this</span> + <span class="string">'&lt;/th&gt;'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    array.push(<span class="string">'&lt;/tr&gt;'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成数据行</span></span><br><span class="line">    $.each(data, <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this是当前遍历到的数组中的每一个对象</span></span><br><span class="line">      <span class="comment">// 拼数据行</span></span><br><span class="line">      array.push(<span class="string">'&lt;tr&gt;'</span>);</span><br><span class="line">      array.push(<span class="string">'&lt;td&gt;'</span> + (index + <span class="number">1</span>) + <span class="string">'&lt;/td&gt;'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遍历对象，拼表格</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        array.push(<span class="string">'&lt;td&gt;'</span> + <span class="keyword">this</span>[key] + <span class="string">'&lt;/td&gt;'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      array.push(<span class="string">'&lt;/tr&gt;'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    array.push(<span class="string">'&lt;/table&gt;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.append(array.join(<span class="string">''</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;(<span class="built_in">window</span>.jQuery))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-BOM</title>
    <url>/2020/02/28/JavaScript-BOM/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/WRMC4fdvBxYN9rw.jpg" style="zoom: 15%;" />


<p>JavaScript 中的 BOM 操作</p>
</center>
<a id="more"></a>

<p>学习目标:</p>
<ul>
<li>理解面向对象开发思想</li>
<li>掌握 JavaScript 面向对象开发相关模式</li>
<li>掌握在 JavaScript 中使用正则表达式</li>
</ul>
<h1 id="JavaScript-面向对象编程"><a href="#JavaScript-面向对象编程" class="headerlink" title="JavaScript 面向对象编程"></a>JavaScript 面向对象编程</h1><h2 id="面向对象介绍"><a href="#面向对象介绍" class="headerlink" title="面向对象介绍"></a>面向对象介绍</h2><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><blockquote>
<p>Everything is object （万物皆对象）</p>
</blockquote>
<p>对象到底是什么，我们可以从两次层次来理解。</p>
<p><strong>(1) 对象是单个事物的抽象。</strong></p>
<p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p>
<p><strong>(2) 对象是一个容器，封装了属性（property）和方法（method）。</strong></p>
<p>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p>
<p>在实际开发中，对象是一个抽象的概念，可以将其简单理解为：<strong>数据集或功能集</strong>。</p>
<p>ECMAScript-262 把对象定义为：<strong>无序属性的集合，其属性可以包含基本值、对象或者函数</strong>。<br>严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。</p>
<p>  提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。</p>
<h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><blockquote>
<p>面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维 护性。</p>
</blockquote>
<p><img src="https://i.loli.net/2020/02/28/7DIx5JtsZQ3RqiS.jpg" alt=""></p>
<p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。<br>它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p>
<p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。<br>因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p>
<p>面向对象与面向过程： </p>
<ul>
<li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li>
<li>面向对象就是找一个对象，指挥得结果</li>
<li>面向对象将执行者转变成指挥者</li>
<li>面向对象不是面向过程的替代，而是面向过程的封装</li>
</ul>
<p>面向对象的特性：</p>
<ul>
<li>封装性 </li>
<li>继承性</li>
<li>[多态性]抽象</li>
</ul>
<p>扩展阅读：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU5JTlEJUEyJUU1JTkwJTkxJUU1JUFGJUI5JUU4JUIxJUExJUU3JUE4JThCJUU1JUJBJThGJUU4JUFFJUJFJUU4JUFFJUEx" title="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">维基百科 - 面向对象程序设计<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzE5ODU0NTA1" title="https://www.zhihu.com/question/19854505">知乎：如何用一句话说明什么是面向对象思想？<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzMxMDIxMzY2" title="https://www.zhihu.com/question/31021366">知乎：什么是面向对象编程思想？<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="程序中面向对象的基本体现"><a href="#程序中面向对象的基本体现" class="headerlink" title="程序中面向对象的基本体现"></a>程序中面向对象的基本体现</h2><p>在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。<br>自定义的对象数据类型就是面向对象中的类（ Class ）的概念。</p>
<p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p>
<p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = &#123; <span class="attr">name</span>: <span class="string">'Michael'</span>, <span class="attr">score</span>: <span class="number">98</span> &#125;</span><br><span class="line"><span class="keyword">var</span> std2 = &#123; <span class="attr">name</span>: <span class="string">'Bob'</span>, <span class="attr">score</span>: <span class="number">81</span> &#125;</span><br></pre></td></tr></table></figure>

<p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printScore</span> (<span class="params">student</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'姓名：'</span> + student.name + <span class="string">'  '</span> + <span class="string">'成绩：'</span> + student.score)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，<br>而是 <code>Student</code> 这种数据类型应该被视为一个对象，这个对象拥有 <code>name</code> 和 <code>score</code> 这两个属性（Property）。<br>如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 <code>printScore</code> 消息，让对象自己把自己的数据打印出来。</p>
<p>抽象数据行为模板（Class）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, score</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.score = score;</span><br><span class="line">  <span class="keyword">this</span>.printScore = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'姓名：'</span> + <span class="keyword">this</span>.name + <span class="string">'  '</span> + <span class="string">'成绩：'</span> + <span class="keyword">this</span>.score);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据模板创建具体实例对象（Instance）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> std1 = <span class="keyword">new</span> Student(<span class="string">'Michael'</span>, <span class="number">98</span>)</span><br><span class="line"><span class="keyword">var</span> std2 = <span class="keyword">new</span> Student(<span class="string">'Bob'</span>, <span class="number">81</span>)</span><br></pre></td></tr></table></figure>

<p>实例对象具有自己的具体行为（给对象发消息）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">std1.printScore() <span class="comment">// =&gt; 姓名：Michael  成绩：98</span></span><br><span class="line">std2.printScore() <span class="comment">// =&gt; 姓名：Bob  成绩 81</span></span><br></pre></td></tr></table></figure>

<p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。<br>Class 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念，<br>而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。</p>
<p>所以，面向对象的设计思想是：</p>
<ul>
<li>抽象出 Class(构造函数)</li>
<li>根据 Class(构造函数) 创建 Instance</li>
<li>指挥 Instance 得结果</li>
</ul>
<p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h2 id="简单方式"><a href="#简单方式" class="headerlink" title="简单方式"></a>简单方式</h2><p>我们可以直接通过 <code>new Object()</code> 创建：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">'Jack'</span></span><br><span class="line">person.age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次创建通过 <code>new Object()</code> 比较麻烦，所以可以通过它的简写形式对象字面量来创建：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于上面的写法固然没有问题，但是假如我们要生成两个 <code>person</code> 实例对象呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  name: <span class="string">'Jack'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">  name: <span class="string">'Mike'</span>,</span><br><span class="line">  age: <span class="number">16</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。</p>
<h2 id="简单方式的改进：工厂函数"><a href="#简单方式的改进：工厂函数" class="headerlink" title="简单方式的改进：工厂函数"></a>简单方式的改进：工厂函数</h2><p>我们可以写一个函数，解决代码重复问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: name,</span><br><span class="line">    age: age,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后生成实例对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">'Mike'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，<br>但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>内容引导：</p>
<ul>
<li>构造函数语法</li>
<li>分析构造函数</li>
<li>构造函数和实例对象的关系<ul>
<li>实例的 constructor 属性</li>
<li>instanceof 操作符</li>
</ul>
</li>
<li>普通函数调用和构造函数调用的区别</li>
<li>构造函数的返回值</li>
<li>构造函数的问题</li>
</ul>
<h2 id="更优雅的工厂函数：构造函数"><a href="#更优雅的工厂函数：构造函数" class="headerlink" title="更优雅的工厂函数：构造函数"></a>更优雅的工厂函数：构造函数</h2><p>一种更优雅的工厂函数就是下面这样，构造函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">18</span>)</span><br><span class="line">p1.sayName() <span class="comment">// =&gt; Jack</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Mike'</span>, <span class="number">23</span>)</span><br><span class="line">p2.sayName() <span class="comment">// =&gt; Mike</span></span><br></pre></td></tr></table></figure>

<h2 id="解析构造函数代码的执行"><a href="#解析构造函数代码的执行" class="headerlink" title="解析构造函数代码的执行"></a>解析构造函数代码的执行</h2><p>在上面的示例中，<code>Person()</code> 函数取代了 <code>createPerson()</code> 函数，但是实现效果是一样的。<br>这是为什么呢？</p>
<p>我们注意到，<code>Person()</code> 中的代码与 <code>createPerson()</code> 有以下几点不同之处：</p>
<ul>
<li>没有显示的创建对象</li>
<li>直接将属性和方法赋给了 <code>this</code> 对象</li>
<li>没有 <code>return</code> 语句</li>
<li>函数名使用的是大写的 <code>Person</code></li>
</ul>
<p>而要创建 <code>Person</code> 实例，则必须使用 <code>new</code> 操作符。<br>以这种方式调用构造函数会经历以下 4 个步骤：</p>
<ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li>
<li>执行构造函数中的代码</li>
<li>返回新对象</li>
</ol>
<p>下面是具体的伪代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></span><br><span class="line">  <span class="comment">// var instance = &#123;&#125;</span></span><br><span class="line">  <span class="comment">// 然后让内部的 this 指向 instance 对象</span></span><br><span class="line">  <span class="comment">// this = instance</span></span><br><span class="line">  <span class="comment">// 接下来所有针对 this 的操作实际上操作的就是 instance</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在函数的结尾处会将 this 返回，也就是 instance</span></span><br><span class="line">  <span class="comment">// return this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="构造函数和实例对象的关系"><a href="#构造函数和实例对象的关系" class="headerlink" title="构造函数和实例对象的关系"></a>构造函数和实例对象的关系</h2><p>使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。<br>在每一个实例对象中同时有一个 <code>constructor</code> 属性，该属性指向创建该实例的构造函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.constructor === Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor === Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor === p2.constructor) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<p>对象的 <code>constructor</code> 属性最初是用来标识对象类型的，<br>但是，如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>构造函数是根据具体的事物抽象出来的抽象模板</li>
<li>实例对象是根据抽象的构造函数模板得到的具体实例对象</li>
<li>每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数<ul>
<li>注意： <code>constructor</code> 是实例的属性的说法不严谨，具体后面的原型会讲到</li>
</ul>
</li>
<li>可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系<ul>
<li>注意：这种方式不严谨，推荐使用 <code>instanceof</code> 操作符，后面学原型会解释为什么</li>
</ul>
</li>
</ul>
<h2 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h2><p>使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个浪费内存的问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br></pre></td></tr></table></figure>

<p>在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。<br>那就是对于每一个实例对象，<code>type</code> 和 <code>sayHello</code> 都是一模一样的内容，<br>每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure>

<p>对于这种问题我们可以把需要共享的函数定义到构造函数外部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> = <span class="title">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = sayHello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Top'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<p>这样确实可以了，但是如果有多个需要共享的函数的话就会造成全局命名空间冲突的问题。</p>
<p>你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fns = &#123;</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  sayAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.sayHello = fns.sayHello</span><br><span class="line">  <span class="keyword">this</span>.sayAge = fns.sayAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'lpz'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayHello === p2.sayHello) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayAge === p2.sayAge) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<p>至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。<br>但是代码看起来还是那么的格格不入，那有没有更好的方式呢？</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>构造函数语法</li>
<li>分析构造函数</li>
<li>构造函数和实例对象的关系<ul>
<li>实例的 constructor 属性</li>
<li>instanceof 操作符</li>
</ul>
</li>
<li>构造函数的问题</li>
</ul>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><p>内容引导：</p>
<ul>
<li>使用 prototype 原型对象解决构造函数的问题</li>
<li>分析 构造函数、prototype 原型对象、实例对象 三者之间的关系</li>
<li>属性成员搜索原则：原型链</li>
<li>实例对象读写原型对象中的成员</li>
<li>原型对象的简写形式</li>
<li>原生对象的原型<ul>
<li>Object</li>
<li>Array</li>
<li>String</li>
<li>…</li>
</ul>
</li>
<li>原型对象的问题</li>
<li>构造的函数和原型对象使用建议</li>
</ul>
<h2 id="更好的解决方案：-prototype"><a href="#更好的解决方案：-prototype" class="headerlink" title="更好的解决方案： prototype"></a>更好的解决方案： <code>prototype</code></h2><p>JavaScript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。<br>这个对象的所有属性和方法，都会被构造函数的所拥有。</p>
<p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype)</span><br><span class="line"></span><br><span class="line">Person.prototype.type = <span class="string">'human'</span></span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(...)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(...)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<p>这时所有实例的 <code>type</code> 属性和 <code>sayName()</code> 方法，<br>其实都是同一个内存地址，指向 <code>prototype</code> 对象，因此就提高了运行效率。</p>
<h2 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h2><p><img src="https://i.loli.net/2020/02/28/HTQxlG7Rork2buW.png" alt=""></p>
<p>实例对象中有<code>__proto__</code>这个属性,叫原型,也是一个对象,这个属性是给浏览器使用,不是标准的属性—–&gt;<code>__proto__</code>—–&gt;可以叫原型对象。</p>
<p>构造函数中有prototype这个属性,叫原型,也是一个对象,这个属性是给程序员使用,是标准的属性——&gt;prototype—&gt;可以叫原型对象</p>
<p>实例对象的<code>__proto__</code>和构造函数中的prototype相等—&gt;true。</p>
<p>实例对象的<code>__proto__</code>指向了构造函数的原型对象prototype。</p>
<p>原型的作用:共享数据,节省内存空间。</p>
<p>构造函数的原型对象(prototype)中有一个constructor构造器,这个构造器指向的就是自己所在的原型对象所在的构造函数。</p>
<h2 id="属性成员的搜索原则：原型链"><a href="#属性成员的搜索原则：原型链" class="headerlink" title="属性成员的搜索原则：原型链"></a>属性成员的搜索原则：原型链</h2><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p>
<p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p>
<ul>
<li>搜索首先从对象实例本身开始</li>
<li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li>
<li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li>
<li>如果在原型对象中找到了这个属性，则返回该属性的值</li>
</ul>
<p>也就是说，在我们调用 <code>person1.sayName()</code> 的时候，会先后执行两次搜索：</p>
<ul>
<li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。</li>
<li>”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。</li>
<li>”于是，它就读取那个保存在原型对象中的函数。</li>
<li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。</li>
</ul>
<p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p>
<p>总结：</p>
<ul>
<li>先在自己身上找，找到即返回</li>
<li>自己身上找不到，则沿着原型链向上查找，找到即返回</li>
<li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li>
</ul>
<h2 id="实例对象读写原型对象成员"><a href="#实例对象读写原型对象成员" class="headerlink" title="实例对象读写原型对象成员"></a>实例对象读写原型对象成员</h2><p>读取：</p>
<ul>
<li>先在自己身上找，找到即返回</li>
<li>自己身上找不到，则沿着原型链向上查找，找到即返回</li>
<li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li>
</ul>
<p>值类型成员写入（<code>实例对象.值类型成员 = xx</code>）：</p>
<ul>
<li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li>
<li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li>
</ul>
<p>引用类型成员写入（<code>实例对象.引用类型成员 = xx</code>）：</p>
<ul>
<li>同上</li>
</ul>
<p>复杂类型修改（<code>实例对象.成员.xx = xx</code>）：</p>
<ul>
<li>同样会先在自己身上找该成员，如果自己身上找到则直接修改</li>
<li>如果自己身上找不到，则沿着原型链继续查找，如果找到则修改</li>
<li>如果一直到原型链的末端还没有找到该成员，则报错（<code>实例对象.undefined.xx = xx</code>）</li>
</ul>
<h2 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h2><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 <code>Person.prototype</code> 。<br>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  type: <span class="string">'human'</span>,</span><br><span class="line">  sayHello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在该示例中，我们将 <code>Person.prototype</code> 重置到了一个新的对象。<br>这样做的好处就是为 <code>Person.prototype</code> 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 <code>constructor</code> 成员。</p>
<p>所以，我们为了保持 <code>constructor</code> 的指向正确，建议的写法是：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person, // =&gt; 手动将 <span class="keyword">constructor</span> 指向正确的构造函数</span><br><span class="line">  type: 'human',</span><br><span class="line">  sayHello: function () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我叫'</span> + <span class="keyword">this</span>.name + <span class="string">'，我今年'</span> + <span class="keyword">this</span>.age + <span class="string">'岁了'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="原生对象的原型"><a href="#原生对象的原型" class="headerlink" title="原生对象的原型"></a>原生对象的原型</h2><p class="tip">
  所有函数都有 prototype 属性对象。
</p>

<ul>
<li>Object.prototype</li>
<li>Function.prototype</li>
<li>Array.prototype</li>
<li>String.prototype</li>
<li>Number.prototype</li>
<li>Date.prototype</li>
<li>…</li>
</ul>
<h2 id="原型对象使用建议"><a href="#原型对象使用建议" class="headerlink" title="原型对象使用建议"></a>原型对象使用建议</h2><ul>
<li>私有成员（一般就是非函数成员）放到构造函数中</li>
<li>共享成员（一般就是函数）放到原型对象中</li>
<li>如果重置了 <code>prototype</code> 记得修正 <code>constructor</code> 的指向</li>
</ul>
<hr>
<h1 id="面向对象游戏案例：贪吃蛇"><a href="#面向对象游戏案例：贪吃蛇" class="headerlink" title="面向对象游戏案例：贪吃蛇"></a>面向对象游戏案例：贪吃蛇</h1><h2 id="案例介绍"><a href="#案例介绍" class="headerlink" title="案例介绍"></a>案例介绍</h2><h2 id="游戏演示"><a href="#游戏演示" class="headerlink" title="游戏演示"></a>游戏演示</h2><p>演示：<a href="snake/index.html">贪吃蛇</a></p>
<h2 id="案例目标"><a href="#案例目标" class="headerlink" title="案例目标"></a>案例目标</h2><p>游戏的目的是用来体会js高级语法的使用 不需要具备抽象对象的能力，使用面向对象的方式分析问题，需要一个漫长的过程。</p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h2 id="搭建页面"><a href="#搭建页面" class="headerlink" title="搭建页面"></a>搭建页面</h2><p>放一个容器盛放游戏场景 div#map，设置样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#map</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析对象"><a href="#分析对象" class="headerlink" title="分析对象"></a>分析对象</h2><ul>
<li>游戏对象</li>
<li>蛇对象</li>
<li>食物对象</li>
</ul>
<h2 id="创建食物对象"><a href="#创建食物对象" class="headerlink" title="创建食物对象"></a>创建食物对象</h2><ul>
<li><p>Food</p>
<ul>
<li><p>属性</p>
<ul>
<li>x       </li>
<li>y</li>
<li>width</li>
<li>height</li>
<li>color       </li>
</ul>
</li>
<li><p>方法</p>
<ul>
<li>render       随机创建一个食物对象，并输出到map上</li>
</ul>
</li>
</ul>
</li>
<li><p>创建Food的构造函数，并设置属性</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</span><br><span class="line"><span class="keyword">var</span> elements = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Food</span>(<span class="params">x, y, width, height, color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = y || <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 食物的宽度和高度(像素)</span></span><br><span class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 食物的颜色</span></span><br><span class="line">  <span class="keyword">this</span>.color = color || <span class="string">'green'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过原型设置render方法，实现随机产生食物对象，并渲染到map上</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Food.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 随机食物的位置，map.宽度/food.宽度，总共有多少分food的宽度，随机一下。然后再乘以food的宽度</span></span><br><span class="line">  <span class="keyword">this</span>.x = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetWidth / <span class="keyword">this</span>.width) * <span class="keyword">this</span>.width;</span><br><span class="line">  <span class="keyword">this</span>.y = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * map.offsetHeight / <span class="keyword">this</span>.height) * <span class="keyword">this</span>.height;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动态创建食物对应的div</span></span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  map.appendChild(div);</span><br><span class="line">  div.style.position = position;</span><br><span class="line">  div.style.left = <span class="keyword">this</span>.x + <span class="string">'px'</span>;</span><br><span class="line">  div.style.top = <span class="keyword">this</span>.y + <span class="string">'px'</span>;</span><br><span class="line">  div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">  div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">  div.style.backgroundColor = <span class="keyword">this</span>.color;</span><br><span class="line">  elements.push(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过自调用函数，进行封装，通过window暴露Food对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.Food = Food;</span><br></pre></td></tr></table></figure>

<h2 id="创建蛇对象"><a href="#创建蛇对象" class="headerlink" title="创建蛇对象"></a>创建蛇对象</h2><ul>
<li><p>Snake</p>
</li>
<li><p>属性</p>
<ul>
<li>width    蛇节的宽度 默认20</li>
<li>height   蛇节的高度 默认20</li>
<li>body     数组，蛇的头部和身体，第一个位置是蛇头</li>
<li>direction    蛇运动的方向  默认right  可以是 left  top bottom</li>
</ul>
</li>
<li><p>方法</p>
<ul>
<li>render  把蛇渲染到map上</li>
</ul>
</li>
<li><p>Snake构造函数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> position = <span class="string">'absolute'</span>;</span><br><span class="line"><span class="keyword">var</span> elements = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Snake</span>(<span class="params">width, height, direction</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置每一个蛇节的宽度</span></span><br><span class="line">  <span class="keyword">this</span>.width = width || <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">this</span>.height = height || <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 蛇的每一部分, 第一部分是蛇头</span></span><br><span class="line">  <span class="keyword">this</span>.body = [</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">color</span>: <span class="string">'red'</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">this</span>.direction = direction || <span class="string">'right'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>render方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Snake.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.body.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">this</span>.body[i];</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    map.appendChild(div);</span><br><span class="line">    div.style.left = obj.x * <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">    div.style.top = obj.y * <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">    div.style.position = position;</span><br><span class="line">    div.style.backgroundColor = obj.color;</span><br><span class="line">    div.style.width = <span class="keyword">this</span>.width + <span class="string">'px'</span>;</span><br><span class="line">    div.style.height = <span class="keyword">this</span>.height + <span class="string">'px'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在自调用函数中暴露Snake对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.Snake = Snake;</span><br></pre></td></tr></table></figure>

<h2 id="创建游戏对象"><a href="#创建游戏对象" class="headerlink" title="创建游戏对象"></a>创建游戏对象</h2><p>游戏对象，用来管理游戏中的所有对象和开始游戏</p>
<ul>
<li><p>Game</p>
<ul>
<li><p>属性</p>
<ul>
<li><p>food</p>
</li>
<li><p>snake</p>
</li>
<li><p>map</p>
</li>
</ul>
</li>
<li><p>方法</p>
<ul>
<li>start            开始游戏（绘制所有游戏对象）</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>构造函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Game</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.food = <span class="keyword">new</span> Food();</span><br><span class="line">  <span class="keyword">this</span>.snake = <span class="keyword">new</span> Snake();</span><br><span class="line">  <span class="keyword">this</span>.map = map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>开始游戏，渲染食物对象和蛇对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Game.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.food.render(<span class="keyword">this</span>.map);</span><br><span class="line">  <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="游戏的逻辑"><a href="#游戏的逻辑" class="headerlink" title="游戏的逻辑"></a>游戏的逻辑</h2><h2 id="写蛇的move方法"><a href="#写蛇的move方法" class="headerlink" title="写蛇的move方法"></a>写蛇的move方法</h2><ul>
<li>在蛇对象(snake.js)中，在Snake的原型上新增move方法</li>
</ul>
<ol>
<li>让蛇移动起来，把蛇身体的每一部分往前移动一下</li>
<li>蛇头部分根据不同的方向决定 往哪里移动</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Snake.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">food, map</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 让蛇身体的每一部分往前移动一下</span></span><br><span class="line">  <span class="keyword">var</span> i = <span class="keyword">this</span>.body.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">this</span>.body[i].x = <span class="keyword">this</span>.body[i - <span class="number">1</span>].x;</span><br><span class="line">    <span class="keyword">this</span>.body[i].y = <span class="keyword">this</span>.body[i - <span class="number">1</span>].y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 根据移动的方向，决定蛇头如何处理</span></span><br><span class="line">  <span class="keyword">switch</span>(<span class="keyword">this</span>.direction) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'left'</span>: </span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'right'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].x += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'top'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y -= <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'bottom'</span>:</span><br><span class="line">      <span class="keyword">this</span>.body[<span class="number">0</span>].y += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在game中测试</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</span><br><span class="line"><span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br></pre></td></tr></table></figure>

<h2 id="让蛇自己动起来"><a href="#让蛇自己动起来" class="headerlink" title="让蛇自己动起来"></a>让蛇自己动起来</h2><ul>
<li><p>私有方法</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是私有方法？</span><br><span class="line">  不能被外部访问的方法</span><br><span class="line">如何创建私有方法？</span><br><span class="line">  使用自调用函数包裹</span><br></pre></td></tr></table></figure>
</li>
<li><p>在game.js中 添加runSnake的私有方法，开启定时器调用蛇的move和render方法，让蛇动起来</p>
</li>
<li><p>判断蛇是否撞墙</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runSnake</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.snake.move(<span class="keyword">this</span>.food, <span class="keyword">this</span>.map);</span><br><span class="line">    <span class="comment">// 在渲染前，删除之前的蛇</span></span><br><span class="line">    <span class="keyword">this</span>.snake.render(<span class="keyword">this</span>.map);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断蛇是否撞墙</span></span><br><span class="line">    <span class="keyword">var</span> maxX = <span class="keyword">this</span>.map.offsetWidth / <span class="keyword">this</span>.snake.width;</span><br><span class="line">    <span class="keyword">var</span> maxY = <span class="keyword">this</span>.map.offsetHeight / <span class="keyword">this</span>.snake.height;</span><br><span class="line">    <span class="keyword">var</span> headX = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].x;</span><br><span class="line">    <span class="keyword">var</span> headY = <span class="keyword">this</span>.snake.body[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">if</span> (headX &lt; <span class="number">0</span> || headX &gt;= maxX) &#123;</span><br><span class="line">      clearInterval(timerId);</span><br><span class="line">      alert(<span class="string">'Game Over'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (headY &lt; <span class="number">0</span> || headY &gt;= maxY) &#123;</span><br><span class="line">      clearInterval(timerId);</span><br><span class="line">      alert(<span class="string">'Game Over'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;.bind(that), <span class="number">150</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在snake中添加删除蛇的私有方法，在render中调用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删除渲染的蛇</span></span><br><span class="line">  <span class="keyword">var</span> i = elements.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 删除页面上渲染的蛇</span></span><br><span class="line">    elements[i].parentNode.removeChild(elements[i]);</span><br><span class="line">    <span class="comment">// 删除elements数组中的元素</span></span><br><span class="line">    elements.splice(i, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在game中通过键盘控制蛇的移动方向</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindKey</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (e.keyCode) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">        <span class="comment">// left</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'left'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">        <span class="comment">// top</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'top'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">        <span class="comment">// right</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'right'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">        <span class="comment">// bottom</span></span><br><span class="line">        <span class="keyword">this</span>.snake.direction = <span class="string">'bottom'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;.bind(that), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在start方法中调用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bindKey();</span><br></pre></td></tr></table></figure>

<h2 id="判断蛇是否吃到食物"><a href="#判断蛇是否吃到食物" class="headerlink" title="判断蛇是否吃到食物"></a>判断蛇是否吃到食物</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在Snake的move方法中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在移动的过程中判断蛇是否吃到食物</span></span><br><span class="line"><span class="comment">// 如果蛇头和食物的位置重合代表吃到食物</span></span><br><span class="line"><span class="comment">// 食物的坐标是像素，蛇的坐标是几个宽度，进行转换</span></span><br><span class="line"><span class="keyword">var</span> headX = <span class="keyword">this</span>.body[<span class="number">0</span>].x * <span class="keyword">this</span>.width;</span><br><span class="line"><span class="keyword">var</span> headY = <span class="keyword">this</span>.body[<span class="number">0</span>].y * <span class="keyword">this</span>.height;</span><br><span class="line"><span class="keyword">if</span> (headX === food.x &amp;&amp; headY === food.y) &#123;</span><br><span class="line">  <span class="comment">// 吃到食物，往蛇节的最后加一节</span></span><br><span class="line">  <span class="keyword">var</span> last = <span class="keyword">this</span>.body[<span class="keyword">this</span>.body.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">this</span>.body.push(&#123;</span><br><span class="line">    x: last.x,</span><br><span class="line">    y: last.y,</span><br><span class="line">    color: last.color</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 把现在的食物对象删除，并重新随机渲染一个食物对象</span></span><br><span class="line">  food.render(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其它处理"><a href="#其它处理" class="headerlink" title="其它处理"></a>其它处理</h2><h2 id="把html中的js代码放到index-js中"><a href="#把html中的js代码放到index-js中" class="headerlink" title="把html中的js代码放到index.js中"></a>把html中的js代码放到index.js中</h2><p>避免html中出现js代码</p>
<h2 id="自调用函数的参数"><a href="#自调用函数的参数" class="headerlink" title="自调用函数的参数"></a>自调用函数的参数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document;</span><br><span class="line"></span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="literal">undefined</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>传入window对象</li>
</ul>
<p>将来代码压缩的时候，可以吧 function (window)  压缩成 function (w)</p>
<ul>
<li>传入undefined</li>
</ul>
<p>在将来会看到别人写的代码中会把undefined作为函数的参数(当前案例没有使用)<br>因为在有的老版本的浏览器中 undefined可以被重新赋值，防止undefined 被重新赋值</p>
<h2 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h2><p>现在的代码结构清晰，谁出问题就找到对应的js文件即可。<br>通过自调用函数，已经防止了变量命名污染的问题</p>
<p>但是，由于js文件数较多，需要在页面上引用，会产生文件依赖的问题(先引入那个js，再引入哪个js)<br>将来通过工具把js文件合并并压缩。现在手工合并js文件演示</p>
<ul>
<li>问题1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果存在多个自调用函数要用分号分割，否则语法错误</span></span><br><span class="line"><span class="comment">// 下面代码会报错</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="comment">// 所以代码规范中会建议在自调用函数之前加上分号</span></span><br><span class="line"><span class="comment">// 下面代码没有问题</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>

<ul>
<li>问题2 </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当自调用函数 前面有函数声明时，会把自调用函数作为参数</span></span><br><span class="line"><span class="comment">// 所以建议自调用函数前，加上;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'11'</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'22'</span>);</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h2><ul>
<li>现实生活中的继承</li>
<li>程序中的继承</li>
</ul>
<h2 id="构造函数的属性继承：借用构造函数"><a href="#构造函数的属性继承：借用构造函数" class="headerlink" title="构造函数的属性继承：借用构造函数"></a>构造函数的属性继承：借用构造函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 借用构造函数继承属性成员 </span></span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1.type, s1.name, s1.age) <span class="comment">// =&gt; human 张三 18</span></span><br></pre></td></tr></table></figure>

<h2 id="构造函数的原型方法继承：拷贝继承（for-in）"><a href="#构造函数的原型方法继承：拷贝继承（for-in）" class="headerlink" title="构造函数的原型方法继承：拷贝继承（for-in）"></a>构造函数的原型方法继承：拷贝继承（for-in）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型对象拷贝继承原型对象成员</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> Person.prototype) &#123;</span><br><span class="line">  Student.prototype[key] = Person.prototype[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure>

<h2 id="另一种继承方式：原型继承"><a href="#另一种继承方式：原型继承" class="headerlink" title="另一种继承方式：原型继承"></a>另一种继承方式：原型继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.type = <span class="string">'human'</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用原型的特性实现继承</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = Student(<span class="string">'张三'</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.type) <span class="comment">// =&gt; human</span></span><br><span class="line"></span><br><span class="line">s1.sayName() <span class="comment">// =&gt; hello 张三</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="函数的定义方式"><a href="#函数的定义方式" class="headerlink" title="函数的定义方式"></a>函数的定义方式</h2><ul>
<li>函数声明</li>
<li>函数表达式</li>
<li><code>new Function</code></li>
</ul>
<h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h2><ul>
<li>函数声明必须有名字</li>
<li>函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用</li>
<li>函数表达式类似于变量赋值</li>
<li>函数表达式可以没有名字，例如匿名函数</li>
<li>函数表达式没有变量提升，在执行阶段创建，必须在表达式执行之后才可以调用</li>
</ul>
<p>下面是一个根据条件定义函数的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码执行结果在不同浏览器中结果不一致。</p>
<p>不过我们可以使用函数表达式解决上面的问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数的调用方式"><a href="#函数的调用方式" class="headerlink" title="函数的调用方式"></a>函数的调用方式</h2><ul>
<li>普通函数</li>
<li>构造函数</li>
<li>对象方法</li>
</ul>
<h2 id="函数内-this-指向的不同场景"><a href="#函数内-this-指向的不同场景" class="headerlink" title="函数内 this 指向的不同场景"></a>函数内 <code>this</code> 指向的不同场景</h2><p>函数的调用方式决定了 <code>this</code> 指向的不同：</p>
<table>
<thead>
<tr>
<th>调用方式</th>
<th>非严格模式</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>普通函数调用</td>
<td>window</td>
<td>严格模式下是 undefined</td>
</tr>
<tr>
<td>构造函数调用</td>
<td>实例对象</td>
<td>原型方法中 this 也是实例对象</td>
</tr>
<tr>
<td>对象方法调用</td>
<td>该方法所属对象</td>
<td>紧挨着的对象</td>
</tr>
<tr>
<td>事件绑定方法</td>
<td>绑定事件对象</td>
<td></td>
</tr>
<tr>
<td>定时器函数</td>
<td>window</td>
<td></td>
</tr>
</tbody></table>
<p>这就是对函数内部 this 指向的基本整理，写代码写多了自然而然就熟悉了。</p>
<h2 id="函数也是对象"><a href="#函数也是对象" class="headerlink" title="函数也是对象"></a>函数也是对象</h2><ul>
<li>所有函数都是 <code>Function</code> 的实例</li>
</ul>
<h2 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h2><p>那了解了函数 this 指向的不同场景之后，我们知道有些情况下我们为了使用某种特定环境的 this 引用，<br>这时候时候我们就需要采用一些特殊手段来处理了，例如我们经常在定时器外部备份 this 引用，然后在定时器函数内部使用外部 this 的引用。<br>然而实际上对于这种做法我们的 JavaScript 为我们专门提供了一些函数方法用来帮我们更优雅的处理函数内部 this 指向问题。<br>这就是接下来我们要学习的 call、apply、bind 三个函数方法。</p>
<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p><code>call()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值和分别地提供的参数(参数的列表)。</p>
<p class="danger">
  注意：该方法的作用和 `apply()` 方法类似，只有一个区别，就是 `call()` 方法接受的是若干个参数的列表，而 `apply()` 方法接受的是一个包含多个参数的数组。
</p>

<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</span><br><span class="line">函数名.call(对象,参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3</span>,....);</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><p><code>thisArg</code></p>
<ul>
<li>在 fun 函数运行时指定的 this 值</li>
<li>如果指定了 null 或者 undefined 则内部 this 指向 window</li>
</ul>
</li>
<li><p><code>arg1, arg2, ...</code></p>
<ul>
<li>指定的参数列表</li>
</ul>
</li>
</ul>
<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p><code>apply()</code> 方法调用一个函数, 其具有一个指定的 <code>this</code> 值，以及作为一个数组（或类似数组的对象）提供的参数。</p>
<p class="danger">
  注意：该方法的作用和 `call()` 方法类似，只有一个区别，就是 `call()` 方法接受的是若干个参数的列表，而 `apply()` 方法接受的是一个包含多个参数的数组。
</p>

<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.apply(thisArg, [argsArray])</span><br><span class="line">函数名.apply(对象,[参数<span class="number">1</span>,参数<span class="number">2</span>,参数<span class="number">3</span>,...]);</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><code>thisArg</code></li>
<li><code>argsArray</code></li>
</ul>
<p><code>apply()</code> 与 <code>call()</code> 非常相似，不同之处在于提供参数的方式。<br><code>apply()</code> 使用参数数组而不是一组参数列表。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.apply(<span class="keyword">this</span>, [<span class="string">'eat'</span>, <span class="string">'bananas'</span>])</span><br></pre></td></tr></table></figure>

<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind() 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的call属性）。<br>当目标函数被调用时 this 值绑定到 bind() 的第一个参数，该参数不能被重写。绑定函数被调用时，bind() 也接受预设的参数提供给原函数。<br>一个绑定函数也能使用new操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p>
<p>复制一个方法或者是函数,是在复制的同时改变了this的指向</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun.bind(thisArg[, arg1[, arg2[, ...]]])</span><br><span class="line">函数名.bind(对象,参数<span class="number">1</span>,参数<span class="number">2</span>，...);返回值是复制之后的这个函数</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<ul>
<li><p>thisArg</p>
<ul>
<li>当绑定函数被调用时，该参数会作为原函数运行时的 this 指向。当使用new 操作符调用绑定函数时，该参数无效。</li>
</ul>
</li>
<li><p>arg1, arg2, …</p>
<ul>
<li>当绑定函数被调用时，这些参数将置于实参之前传递给被绑定的方法。</li>
</ul>
</li>
</ul>
<p>返回值：</p>
<p>返回由指定的this值和初始化参数改造的原函数拷贝。</p>
<p>示例1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>; </span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  x: <span class="number">81</span>,</span><br><span class="line">  getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</span><br><span class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></span><br><span class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</span><br><span class="line">boundGetX(); <span class="comment">// 返回 81</span></span><br></pre></td></tr></table></figure>

<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ul>
<li><p>call 和 apply 特性一样</p>
<ul>
<li>都是用来调用函数，而且是立即调用</li>
<li>但是可以在调用函数的同时，通过第一个参数指定函数内部 <code>this</code> 的指向</li>
<li>call 调用的时候，参数必须以参数列表的形式进行传递，也就是以逗号分隔的方式依次传递即可</li>
<li>apply 调用的时候，参数必须是一个数组，然后在执行的时候，会将数组内部的元素一个一个拿出来，与形参一一对应进行传递</li>
<li>如果第一个参数指定了 <code>null</code> 或者 <code>undefined</code> 则内部 this 指向 window</li>
</ul>
</li>
<li><p>bind</p>
<ul>
<li>可以用来指定内部 this 的指向，然后生成一个改变了 this 指向的新的函数</li>
<li>它和 call、apply 最大的区别是：bind 不会调用</li>
<li>bind 支持传递参数，它的传参方式比较特殊，一共有两个位置可以传递<ul>
<li><ol>
<li>在 bind 的同时，以参数列表的形式进行传递</li>
</ol>
</li>
<li><ol start="2">
<li>在调用的时候，以参数列表的形式进行传递</li>
</ol>
</li>
<li>那到底以谁 bind 的时候传递的参数为准呢还是以调用的时候传递的参数为准</li>
<li>两者合并：bind 的时候传递的参数和调用的时候传递的参数会合并到一起，传递到函数内部</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="函数的其它成员"><a href="#函数的其它成员" class="headerlink" title="函数的其它成员"></a>函数的其它成员</h2><ul>
<li>arguments<ul>
<li>实参集合</li>
</ul>
</li>
<li>caller<ul>
<li>函数的调用者</li>
</ul>
</li>
<li>length<ul>
<li>形参的个数</li>
</ul>
</li>
<li>name<ul>
<li>函数的名称</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(fn.length) <span class="comment">// =&gt; 形参的个数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// 伪数组实参参数集合</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee === fn) <span class="comment">// 函数本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.caller) <span class="comment">// 函数的调用者</span></span><br><span class="line">  <span class="built_in">console</span>.log(fn.name) <span class="comment">// =&gt; 函数的名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f()</span><br></pre></td></tr></table></figure>

<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ul>
<li>函数可以作为参数</li>
<li>函数可以作为返回值</li>
</ul>
<h2 id="作为参数"><a href="#作为参数" class="headerlink" title="作为参数"></a>作为参数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eat</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'吃完了'</span>)</span><br><span class="line">    callback()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">eat(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'去唱歌'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFun</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === type</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isArray = genFun(<span class="string">'[object Array]'</span>)</span><br><span class="line"><span class="keyword">var</span> isObject = genFun(<span class="string">'[object Object]'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isArray([])) <span class="comment">// =&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(isArray(&#123;&#125;)) <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<h2 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(count)</span><br><span class="line">    &#125;,</span><br><span class="line">    setCount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fns = fn()</span><br><span class="line"></span><br><span class="line">fns.getCount() <span class="comment">// =&gt; 0</span></span><br><span class="line">fns.setCount()</span><br><span class="line">fns.getCount() <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure>

<h2 id="作用域、作用域链、预解析"><a href="#作用域、作用域链、预解析" class="headerlink" title="作用域、作用域链、预解析"></a>作用域、作用域链、预解析</h2><ul>
<li>全局作用域</li>
<li>函数作用域</li>
<li><strong>没有块级作用域</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> foo = <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>

<p>作用域链示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">30</span></span><br><span class="line">    <span class="built_in">console</span>.log(a + b + c)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">40</span></span><br><span class="line">    <span class="built_in">console</span>.log(c + d)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn1()</span><br><span class="line">  fn2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>内层作用域可以访问外层作用域，反之不行</li>
</ul>
<h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h2><p>闭包就是能够读取其他函数内部变量的函数，<br>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，<br>因此可以把闭包简单理解成 “定义在一个函数内部的函数”。<br>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<p>闭包的用途：</p>
<ul>
<li>可以在函数外部读取函数内部成员</li>
<li>让函数内成员始终存活在内存中</li>
</ul>
<h2 id="一些关于闭包的例子"><a href="#一些关于闭包的例子" class="headerlink" title="一些关于闭包的例子"></a>一些关于闭包的例子</h2><p>示例1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">222</span>)</span><br></pre></td></tr></table></figure>

<h2 id="闭包的思考题"><a href="#闭包的思考题" class="headerlink" title="闭包的思考题"></a>闭包的思考题</h2><p>思考题 1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure>

<p>思考题 2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;　　</span><br><span class="line"><span class="keyword">var</span> object = &#123;　　　　</span><br><span class="line">  name: <span class="string">"My Object"</span>,</span><br><span class="line">  getNameFunc: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.name;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</span><br></pre></td></tr></table></figure>

<h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><h2 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h2><h2 id="递归执行模型"><a href="#递归执行模型" class="headerlink" title="递归执行模型"></a>递归执行模型</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">111</span>)</span><br><span class="line">  fn2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>)</span><br><span class="line">  fn3()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">333</span>)</span><br><span class="line">  fn4()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn3'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">444</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn4'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure>

<h2 id="举个栗子：计算阶乘的递归函数"><a href="#举个栗子：计算阶乘的递归函数" class="headerlink" title="举个栗子：计算阶乘的递归函数"></a>举个栗子：计算阶乘的递归函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归应用场景"><a href="#递归应用场景" class="headerlink" title="递归应用场景"></a>递归应用场景</h2><ul>
<li>深拷贝</li>
<li>菜单树</li>
<li>遍历 DOM 树</li>
</ul>
<hr>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul>
<li>了解正则表达式基本语法</li>
<li>能够使用JavaScript的正则对象</li>
</ul>
<h2 id="正则表达式简介"><a href="#正则表达式简介" class="headerlink" title="正则表达式简介"></a>正则表达式简介</h2><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><p>正则表达式：用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表通常被用来检索、替换那些符合某个模式(规则)的文本。<br>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>
<h2 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h2><ol>
<li>给定的字符串是否符合正则表达式的过滤逻辑(匹配)</li>
<li>可以通过正则表达式，从字符串中获取我们想要的特定部分(提取)</li>
<li>强大的字符串替换能力(替换)</li>
</ol>
<h2 id="正则表达式的特点"><a href="#正则表达式的特点" class="headerlink" title="正则表达式的特点"></a>正则表达式的特点</h2><ol>
<li>灵活性、逻辑性和功能性非常的强</li>
<li>可以迅速地用极简单的方式达到字符串的复杂控制</li>
<li>对于刚接触的人来说，比较晦涩难懂</li>
</ol>
<h2 id="正则表达式的测试"><a href="#正则表达式的测试" class="headerlink" title="正则表达式的测试"></a>正则表达式的测试</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jLnJ1bm9vYi5jb20vZnJvbnQtZW5kLzg1NA==" title="https://c.runoob.com/front-end/854">在线测试正则<i class="fa fa-external-link"></i></span></li>
<li>工具中使用正则表达式<ul>
<li>sublime/vscode/word</li>
<li>演示替换所有的数字</li>
</ul>
</li>
</ul>
<h2 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h2><ul>
<li>普通字符abc  123</li>
<li>特殊字符(元字符)：正则表达式中有特殊意义的字符\d  \w</li>
</ul>
<p>示例演示：</p>
<ul>
<li><code>\d</code> 匹配数字</li>
<li><code>ab\d</code> 匹配 ab1、ab2</li>
</ul>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>通过测试工具演示下面元字符的使用</p>
<h2 id="常用元字符串"><a href="#常用元字符串" class="headerlink" title="常用元字符串"></a>常用元字符串</h2><table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>匹配数字</td>
</tr>
<tr>
<td>\D</td>
<td>匹配任意非数字的字符</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母或数字或下划线</td>
</tr>
<tr>
<td>\W</td>
<td>匹配任意不是字母，数字，下划线</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任意的空白符</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任意不是空白符的字符</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符以外的任意单个字符</td>
</tr>
<tr>
<td>^</td>
<td>表示匹配行首的文本(以谁开始)</td>
</tr>
<tr>
<td>$</td>
<td>表示匹配行尾的文本(以谁结束)</td>
</tr>
</tbody></table>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><table>
<thead>
<tr>
<th>限定符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>重复零次或更多次</td>
</tr>
<tr>
<td>+</td>
<td>重复一次或更多次</td>
</tr>
<tr>
<td>?</td>
<td>重复零次或一次</td>
</tr>
<tr>
<td>{n}</td>
<td>重复n次</td>
</tr>
<tr>
<td>{n,}</td>
<td>重复n次或更多次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>重复n到m次</td>
</tr>
</tbody></table>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[] 字符串用中括号括起来，表示匹配其中的任一字符，相当于或的意思</span><br><span class="line">[^]  匹配除中括号以内的内容</span><br><span class="line">\ 转义符</span><br><span class="line">| 或者，选择两者中的一个。注意|将左右两边分为两部分，而不管左右两边有多长多乱</span><br><span class="line">() 从两个直接量中选择一个，分组</span><br><span class="line">   eg：gr(a|e)y匹配gray和grey</span><br><span class="line">[\u4e00-\u9fa5]  匹配汉字</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>验证手机号：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">^\d&#123;<span class="number">11</span>&#125;$</span><br></pre></td></tr></table></figure>

<p>验证邮编：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">^\d&#123;<span class="number">6</span>&#125;$</span><br></pre></td></tr></table></figure>

<p>验证日期 2012-5-01 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$</span><br></pre></td></tr></table></figure>

<p>验证邮箱 <span class="exturl" data-url="bWFpbHRvOnh4eEBpdGNhc3QuY24=" title="mailto:xxx@itcast.cn">xxx@itcast.cn<i class="fa fa-external-link"></i></span>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">^\w+@\w+\.\w+$</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>a-zA-Z_.-]+[@][<span class="number">0</span><span class="number">-9</span>a-zA-Z_.-]+([.][a-zA-Z]+)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>验证IP地址 192.168.1.10</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">^\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;\(.\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)&#123;<span class="number">3</span>&#125;$</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript-中使用正则表达式"><a href="#JavaScript-中使用正则表达式" class="headerlink" title="JavaScript 中使用正则表达式"></a>JavaScript 中使用正则表达式</h1><h2 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h2><p>方式1：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\d'</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\d'</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure>

<p>方式2：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/i</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/gi</span>;</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table>
<thead>
<tr>
<th>标志</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>i</td>
<td>忽略大小写</td>
</tr>
<tr>
<td>g</td>
<td>全局匹配</td>
</tr>
<tr>
<td>gi</td>
<td>全局匹配+忽略大小写</td>
</tr>
</tbody></table>
<h2 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配日期</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2015-10-10'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(dateStr));</span><br></pre></td></tr></table></figure>

<h2 id="正则提取"><a href="#正则提取" class="headerlink" title="正则提取"></a>正则提取</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 提取工资</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"张三：1000，李四：5000，王五：8000。"</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\d+/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 提取email地址</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com,fangfang@valuedopinions.cn 286669312@qq.com 2、emailenglish@emailenglish.englishtown.com 286669312@qq.com..."</span>;</span><br><span class="line"><span class="keyword">var</span> array = str.match(<span class="regexp">/\w+@\w+\.\w+(\.\w+)?/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 分组提取  </span></span><br><span class="line"><span class="comment">// 3. 提取日期中的年部分  2015-5-10</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">'2016-1-5'</span>;</span><br><span class="line"><span class="comment">// 正则表达式中的()作为分组来使用，获取分组匹配到的结果用Regex.$1 $2 $3....来获取</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-\d&#123;1,2&#125;-\d&#123;1,2&#125;/</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(dateStr)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 提取邮件中的每一部分</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w+)@(\w+)\.(\w+)(\.\w+)?/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123123@xx.com"</span>;</span><br><span class="line"><span class="keyword">if</span> (reg.test(str)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 替换所有空白</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"   123AD  asadf   asadfasf  adf "</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/\s/g</span>,<span class="string">"xx"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 替换所有,|，</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc,efg,123，abc,123，a"</span>;</span><br><span class="line">str = str.replace(<span class="regexp">/,|，/g</span>, <span class="string">"."</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>

<h2 id="案例：表单验证"><a href="#案例：表单验证" class="headerlink" title="案例：表单验证"></a>案例：表单验证</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtQQ"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtEMail"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtPhone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtBirthday"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtName"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取文本框</span></span><br><span class="line"><span class="keyword">var</span> txtQQ = <span class="built_in">document</span>.getElementById(<span class="string">"txtQQ"</span>);</span><br><span class="line"><span class="keyword">var</span> txtEMail = <span class="built_in">document</span>.getElementById(<span class="string">"txtEMail"</span>);</span><br><span class="line"><span class="keyword">var</span> txtPhone = <span class="built_in">document</span>.getElementById(<span class="string">"txtPhone"</span>);</span><br><span class="line"><span class="keyword">var</span> txtBirthday = <span class="built_in">document</span>.getElementById(<span class="string">"txtBirthday"</span>);</span><br><span class="line"><span class="keyword">var</span> txtName = <span class="built_in">document</span>.getElementById(<span class="string">"txtName"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">txtQQ.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;5,12&#125;$/</span>;</span><br><span class="line">  <span class="comment">//判断验证是否成功</span></span><br><span class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">    <span class="comment">//验证不成功</span></span><br><span class="line">    span.innerText = <span class="string">"请输入正确的QQ号"</span>;</span><br><span class="line">    span.style.color = <span class="string">"red"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//验证成功</span></span><br><span class="line">    span.innerText = <span class="string">""</span>;</span><br><span class="line">    span.style.color = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//txtEMail</span></span><br><span class="line">txtEMail.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">  <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>;</span><br><span class="line">  <span class="comment">//判断验证是否成功</span></span><br><span class="line">  <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">    <span class="comment">//验证不成功</span></span><br><span class="line">    span.innerText = <span class="string">"请输入正确的EMail地址"</span>;</span><br><span class="line">    span.style.color = <span class="string">"red"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//验证成功</span></span><br><span class="line">    span.innerText = <span class="string">""</span>;</span><br><span class="line">    span.style.color = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>表单验证部分，封装成函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regBirthday = <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>;</span><br><span class="line">addCheck(txtBirthday, regBirthday, <span class="string">"请输入正确的出生日期"</span>);</span><br><span class="line"><span class="comment">//给文本框添加验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">element, reg, tip</span>) </span>&#123;</span><br><span class="line">  element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前文本框对应的span</span></span><br><span class="line">    <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">    <span class="comment">//判断验证是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(!reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">      <span class="comment">//验证不成功</span></span><br><span class="line">      span.innerText = tip;</span><br><span class="line">      span.style.color = <span class="string">"red"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//验证成功</span></span><br><span class="line">      span.innerText = <span class="string">""</span>;</span><br><span class="line">      span.style.color = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过给元素增加自定义验证属性对表单进行验证：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"frm"</span>&gt;</span></span><br><span class="line">  QQ号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtQQ"</span> <span class="attr">data-rule</span>=<span class="string">"qq"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtEMail"</span> <span class="attr">data-rule</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  手机：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtPhone"</span> <span class="attr">data-rule</span>=<span class="string">"phone"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtBirthday"</span> <span class="attr">data-rule</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txtName"</span> <span class="attr">data-rule</span>=<span class="string">"cn"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有的验证规则</span></span><br><span class="line"><span class="keyword">var</span> rules = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'qq'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;5,12&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的QQ"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'email'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\w+@\w+\.\w+(\.\w+)?$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的邮箱地址"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'phone'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;11&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的手机号码"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'date'</span>,</span><br><span class="line">    reg: <span class="regexp">/^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的出生日期"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'cn'</span>,</span><br><span class="line">    reg: <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,4&#125;$/</span>,</span><br><span class="line">    tip: <span class="string">"请输入正确的姓名"</span></span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">addCheck(<span class="string">'frm'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//给文本框添加验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addCheck</span>(<span class="params">formId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">      len = <span class="number">0</span>,</span><br><span class="line">      frm =<span class="built_in">document</span>.getElementById(formId);</span><br><span class="line">  len = frm.children.length;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = frm.children[i];</span><br><span class="line">    <span class="comment">// 表单元素中有name属性的元素添加验证</span></span><br><span class="line">    <span class="keyword">if</span> (element.name) &#123;</span><br><span class="line">      element.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 使用dataset获取data-自定义属性的值</span></span><br><span class="line">        <span class="keyword">var</span> ruleName = <span class="keyword">this</span>.dataset.rule;</span><br><span class="line">        <span class="keyword">var</span> rule =getRuleByRuleName(rules, ruleName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> span = <span class="keyword">this</span>.nextElementSibling;</span><br><span class="line">        <span class="comment">//判断验证是否成功</span></span><br><span class="line">        <span class="keyword">if</span>(!rule.reg.test(<span class="keyword">this</span>.value) )&#123;</span><br><span class="line">          <span class="comment">//验证不成功</span></span><br><span class="line">          span.innerText = rule.tip;</span><br><span class="line">          span.style.color = <span class="string">"red"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">//验证成功</span></span><br><span class="line">          span.innerText = <span class="string">""</span>;</span><br><span class="line">          span.style.color = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据规则的名称获取规则对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRuleByRuleName</span>(<span class="params">rules, ruleName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">      len = rules.length;</span><br><span class="line">  <span class="keyword">var</span> rule = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rules[i].name == ruleName) &#123;</span><br><span class="line">      rule = rules[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rule;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="A-代码规范"><a href="#A-代码规范" class="headerlink" title="A 代码规范"></a>A 代码规范</h2><h2 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9zdGFuZGFyZA==" title="https://github.com/feross/standard">JavaScript Standard Style <i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0" title="https://github.com/airbnb/javascript">Airbnb JavaScript Style Guide() {<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="校验工具"><a href="#校验工具" class="headerlink" title="校验工具"></a>校验工具</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvdWdsYXNjcm9ja2ZvcmQvSlNMaW50" title="https://github.com/douglascrockford/JSLint">JSLint<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzaGludC9qc2hpbnQ=" title="https://github.com/jshint/jshint">JSHint<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQ=" title="https://github.com/eslint/eslint">ESLint<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="B-Chrome-开发者工具"><a href="#B-Chrome-开发者工具" class="headerlink" title="B Chrome 开发者工具"></a>B Chrome 开发者工具</h2><h2 id="C-文档相关工具"><a href="#C-文档相关工具" class="headerlink" title="C 文档相关工具"></a>C 文档相关工具</h2><ul>
<li>电子文档制作工具: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vnb2lzdC9kb2N1dGU=" title="https://github.com/egoist/docute">docute<i class="fa fa-external-link"></i></span></li>
<li>流程图工具：<span class="exturl" data-url="aHR0cDovL2xvZ2ljbmV0LmRrL0RpYWdyYW1EZXNpZ25lci8=" title="http://logicnet.dk/DiagramDesigner/">DiagramDesigner<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-DOM</title>
    <url>/2020/02/28/JavaScript-DOM/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/WRMC4fdvBxYN9rw.jpg" style="zoom: 15%;"/>


<p>JavaScript 中的 DOM 操作</p>
</center>
<a id="more"></a>

<p>学习目标:</p>
<ul>
<li>掌握API和Web API的概念</li>
<li>掌握常见浏览器提供的API的调用方式</li>
<li>能通过Web API开发常见的页面交互功能</li>
<li>能够利用搜索引擎解决问题</li>
</ul>
<h1 id="Web-API介绍"><a href="#Web-API介绍" class="headerlink" title="Web API介绍"></a>Web API介绍</h1><h2 id="API的概念"><a href="#API的概念" class="headerlink" title="API的概念"></a>API的概念</h2><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p>
<ul>
<li>任何开发语言都有自己的API</li>
<li>API的特征输入和输出(I/O)<ul>
<li>var max =  Math.max(1, 2, 3);</li>
</ul>
</li>
<li>API的使用方法(console.log(‘adf’))</li>
</ul>
<h2 id="Web-API的概念"><a href="#Web-API的概念" class="headerlink" title="Web  API的概念"></a>Web  API的概念</h2><p>浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</p>
<p>此处的Web API特指浏览器提供的API(一组方法)，Web API在后面的课程中有其它含义</p>
<h2 id="掌握常见浏览器提供的API的调用方式"><a href="#掌握常见浏览器提供的API的调用方式" class="headerlink" title="掌握常见浏览器提供的API的调用方式"></a>掌握常见浏览器提供的API的调用方式</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJ" title="https://developer.mozilla.org/zh-CN/docs/Web/API">MDN-Web API<i class="fa fa-external-link"></i></span></p>
<h2 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h2><h2 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h2><p>定义了JavaScript 的语法规范</p>
<p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p>
<h2 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h2><p>一套操作浏览器功能的API</p>
<p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等 </p>
<h2 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h2><p>一套操作页面元素的API</p>
<p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p>
<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="DOM的概念"><a href="#DOM的概念" class="headerlink" title="DOM的概念"></a>DOM的概念</h2><p>文档对象模型（Document Object Model，简称DOM），是<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9XM0M=" title="https://baike.baidu.com/item/W3C">W3C<i class="fa fa-external-link"></i></span>组织推荐的处理<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEYlQUYlRTYlODklQTklRTUlQjElOTUlRTclQkQlQUUlRTYlQTAlODclRTglQUYlQUQlRTglQTglODA=" title="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E7%BD%AE%E6%A0%87%E8%AF%AD%E8%A8%80">可扩展标记语言<i class="fa fa-external-link"></i></span>的标准<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkMlOTYlRTclQTglOEIlRTYlOEUlQTUlRTUlOEYlQTM=" title="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3">编程接口<i class="fa fa-external-link"></i></span>。它是一种与平台和语言无关的<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQkElOTQlRTclOTQlQTglRTclQTglOEIlRTUlQkElOEYlRTYlOEUlQTUlRTUlOEYlQTM=" title="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3">应用程序接口<i class="fa fa-external-link"></i></span>(API),它可以动态地访问程序和脚本，更新其内容、结构和<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS93d3cvMTA5OTI0" title="https://baike.baidu.com/item/www/109924">www<i class="fa fa-external-link"></i></span>文档的风格(目前，HTML和XML文档是通过说明部分定义的)。文档可以进一步被处理，处理的结果可以加入到当前的页面。<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9ET00vNTAyODg=" title="https://baike.baidu.com/item/DOM/50288">DOM<i class="fa fa-external-link"></i></span>是一种基于树的<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9BUEkvMTAxNTQ=" title="https://baike.baidu.com/item/API/10154">API<i class="fa fa-external-link"></i></span>文档，它要求在处理过程中整个文档都表示在<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUQlOTglRTUlODIlQTglRTUlOTklQTg=" title="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8">存储器<i class="fa fa-external-link"></i></span>中。</p>
<p>DOM又称为文档树模型</p>
<p><img src="https://i.loli.net/2020/02/28/H6MmLqSBtR3wAon.png" alt=""></p>
<ul>
<li>文档：一个网页可以称为文档</li>
<li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等）</li>
<li>元素：网页中的标签</li>
<li>属性：标签的属性</li>
</ul>
<h2 id="DOM经常进行的操作"><a href="#DOM经常进行的操作" class="headerlink" title="DOM经常进行的操作"></a>DOM经常进行的操作</h2><ul>
<li>获取元素</li>
<li>对元素进行操作(设置其属性或调用其方法)</li>
<li>动态创建元素</li>
<li>事件(什么时机做相应的操作)</li>
</ul>
<h1 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h1><h2 id="根据id获取元素"><a href="#根据id获取元素" class="headerlink" title="根据id获取元素"></a>根据id获取元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'main'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(div);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到的数据类型 HTMLDivElement，对象都是有类型的</span></span><br></pre></td></tr></table></figure>

<p>注意：由于id名具有唯一性，部分浏览器支持直接使用id名访问元素，但不是标准方式，不推荐使用。</p>
<h2 id="根据标签名获取元素"><a href="#根据标签名获取元素" class="headerlink" title="根据标签名获取元素"></a>根据标签名获取元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> div = divs[i];</span><br><span class="line">  <span class="built_in">console</span>.log(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="根据name获取元素"><a href="#根据name获取元素" class="headerlink" title="根据name获取元素*"></a>根据name获取元素*</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inputs = <span class="built_in">document</span>.getElementsByName(<span class="string">'hobby'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; inputs.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> input = inputs[i];</span><br><span class="line">  <span class="built_in">console</span>.log(input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="根据类名获取元素"><a href="#根据类名获取元素" class="headerlink" title="根据类名获取元素*"></a>根据类名获取元素*</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mains = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'main'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; mains.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> main = mains[i];</span><br><span class="line">  <span class="built_in">console</span>.log(main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="根据选择器获取元素"><a href="#根据选择器获取元素" class="headerlink" title="根据选择器获取元素*"></a>根据选择器获取元素*</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'#text'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(text);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; boxes.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> box = boxes[i];</span><br><span class="line">  <span class="built_in">console</span>.log(box);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>总结</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">掌握</span><br><span class="line">	getElementById()</span><br><span class="line">	getElementsByTagName()</span><br><span class="line">了解</span><br><span class="line">	getElementsByName()</span><br><span class="line">	getElementsByClassName()</span><br><span class="line">	querySelector()</span><br><span class="line">	querySelectorAll()</span><br></pre></td></tr></table></figure>

<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件：触发-响应机制</p>
<h2 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h2><ul>
<li>事件源:触发(被)事件的元素</li>
<li>事件名称: click 点击事件</li>
<li>事件处理程序:事件触发后要执行的代码(函数形式)</li>
</ul>
<h2 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'代码会在box被点击后执行'</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h1><h2 id="非表单元素的属性"><a href="#非表单元素的属性" class="headerlink" title="非表单元素的属性"></a>非表单元素的属性</h2><ul>
<li>innerHTML和innerText</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.innerHTML = <span class="string">'我是文本&lt;p&gt;我会生成为标签&lt;/p&gt;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.innerHTML);</span><br><span class="line">box.innerText = <span class="string">'我是文本&lt;p&gt;我不会生成为标签&lt;/p&gt;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.innerText);</span><br></pre></td></tr></table></figure>
<ul>
<li>HTML转义符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;		&quot;</span><br><span class="line">&#39;		&amp;apos;</span><br><span class="line">&amp;		&amp;</span><br><span class="line">&lt;		&lt;   &#x2F;&#x2F; less than  小于</span><br><span class="line">&gt;		&gt;   &#x2F;&#x2F; greater than  大于</span><br><span class="line">空格	   &amp;nbsp;</span><br><span class="line">©		&amp;copy;</span><br></pre></td></tr></table></figure>

<ul>
<li>innerHTML和innerText的区别</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">都可以设置标签的文本内容,如果要设置标签及内容推荐使用innerHTML。</span><br><span class="line">如果要获取标签中的文本,innerText,也可以使用innerHTML。</span><br><span class="line">如果想要获取的是有标签,也有文本---innerHTML。</span><br></pre></td></tr></table></figure>



<ul>
<li>innerText的兼容性处理</li>
</ul>
<h2 id="表单元素属性"><a href="#表单元素属性" class="headerlink" title="表单元素属性"></a>表单元素属性</h2><ul>
<li>value 用于大部分表单元素的内容获取(option除外)</li>
<li>type 可以获取input标签的类型(输入框或复选框等)</li>
<li>disabled 禁用属性</li>
<li>checked 复选框选中属性</li>
<li>selected 下拉菜单选中属性</li>
</ul>
<h2 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h2><p>标签原本没有这个属性,为了存储数据,程序员自己添加的属性。自定义属性无法直接通过DOM对象的方式获取或者设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象.getAttribute(&quot;自定义属性名字&quot;);获取自定义属性的值。</span><br><span class="line">对象.setAttribute(&quot;属性名字&quot;,&quot;值&quot;);设置自定义属性及值。</span><br><span class="line">对象.removeAttribute(&quot;属性的名字&quot;);移除自定义属性。</span><br></pre></td></tr></table></figure>

<h2 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h2><ul>
<li><p>使用style方式设置的样式显示在标签行内</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.style.width = <span class="string">'100px'</span>;</span><br><span class="line">box.style.height = <span class="string">'100px'</span>;</span><br><span class="line">box.style.backgroundColor = <span class="string">'red'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意</p>
<p>通过样式属性设置宽高、位置的属性类型是字符串，需要加上px</p>
</li>
</ul>
<h2 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h2><ul>
<li>修改标签的className属性相当于直接修改标签的类名<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.className = <span class="string">'show'</span>;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="创建元素的三种方式"><a href="#创建元素的三种方式" class="headerlink" title="创建元素的三种方式"></a>创建元素的三种方式</h1><h2 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果在页面加载完毕后创建元素.页面中的内容会被干掉。</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'新设置的内容&lt;p&gt;标签也可以生成&lt;/p&gt;'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.innerHTML = <span class="string">'新内容&lt;p&gt;新标签&lt;/p&gt;'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">父级元素.appendChild(div);</span><br><span class="line">父级元素.removeChild(要干掉的子级元素对象);</span><br></pre></td></tr></table></figure>

<h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><ul>
<li>innerHTML方法由于会对字符串进行解析，需要避免在循环内多次使用。</li>
<li>可以借助字符串或数组的方式进行替换，再设置给innerHTML</li>
<li>优化后与document.createElement性能相近</li>
</ul>
<h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">body.appendChild(div);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> firstEle = body.children[<span class="number">0</span>];</span><br><span class="line">body.insertBefore(div, firstEle);</span><br><span class="line"></span><br><span class="line">body.removeChild(firstEle);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">body.replaceChild(text, div);</span><br></pre></td></tr></table></figure>

<h2 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h2><ul>
<li>nodeType  节点的类型<ul>
<li>1 元素节点</li>
<li>2 属性节点</li>
<li>3 文本节点 </li>
</ul>
</li>
<li>nodeName  节点的名字:标签节点—大写的标签名字,属性节点—小写的属性名字,文本节点—-#text</li>
<li>nodeValue  节点的值:标签节点—null,属性节点—属性值,文本节点—文本内容<ul>
<li>元素节点的nodeValue始终是null</li>
</ul>
</li>
</ul>
<h2 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">  <span class="comment">//父级节点</span></span><br><span class="line"><span class="built_in">console</span>.log(box.parentNode);</span><br><span class="line"><span class="comment">//父级元素</span></span><br><span class="line"><span class="built_in">console</span>.log(ulObj.parentElement);</span><br><span class="line"> <span class="comment">//子节点</span></span><br><span class="line"><span class="built_in">console</span>.log(box.childNodes);</span><br><span class="line">  <span class="comment">//子元素</span></span><br><span class="line"><span class="built_in">console</span>.log(box.children);</span><br><span class="line">  <span class="comment">//某个元素的后一个兄弟节点</span></span><br><span class="line"><span class="built_in">console</span>.log(box.nextSibling);</span><br><span class="line">  <span class="comment">//某个元素的后一个兄弟元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).nextElementSibling);</span><br><span class="line"> <span class="comment">//某个元素的前一个兄弟节点</span></span><br><span class="line"><span class="built_in">console</span>.log(box.previousSibling);</span><br><span class="line"> <span class="comment">//某个元素的前一个兄弟元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(my$(<span class="string">"three"</span>).previousElementSibling);</span><br><span class="line">  <span class="comment">//第一个子节点,IE8中是第一个子元素</span></span><br><span class="line"><span class="built_in">console</span>.log(box.firstChild);</span><br><span class="line"><span class="comment">//第一个子元素,IE8中不支持</span></span><br><span class="line"><span class="built_in">console</span>.log(ulObj.firstElementChild);</span><br><span class="line">  <span class="comment">//最后一个子节点,IE8中是第一个子元素</span></span><br><span class="line"><span class="built_in">console</span>.log(box.lastChild);</span><br><span class="line"> <span class="comment">//最后一个子元素,IE8中不支持</span></span><br><span class="line">  <span class="built_in">console</span>.log(ulObj.lastElementChild);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意</p>
<p>childNodes和children的区别，childNodes获取的是子节点，children获取的是子元素</p>
<p>nextSibling和previousSibling获取的是节点，获取元素对应的属性是nextElementSibling和previousElementSibling获取的是元素。</p>
<p>nextElementSibling和previousElementSibling有兼容性问题，IE9以后才支持。</p>
<p>总结:凡是获取节点的代码在谷歌和火狐得到的都是  相关的节点。<br>凡是获取元素的代码在谷歌和火狐得到的都是   相关的元素。<br>从子节点和兄弟节点开始,凡是获取节点的代码在IE8中得到的是元素,获取元素的相关代码,在IE8中得到的是undefined—-元素的代码,iE中不支持。</p>
</li>
<li><p>总结</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">节点操作，方法</span><br><span class="line">	appendChild()</span><br><span class="line">	insertBefore()</span><br><span class="line">	removeChild()</span><br><span class="line">	replaceChild()</span><br><span class="line">节点层次，属性</span><br><span class="line">	parentNode</span><br><span class="line">	childNodes</span><br><span class="line">	children</span><br><span class="line">	nextSibling&#x2F;previousSibling</span><br><span class="line">	firstChild&#x2F;lastChild</span><br></pre></td></tr></table></figure>

<h1 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h1><h2 id="注册-移除事件的三种方式"><a href="#注册-移除事件的三种方式" class="headerlink" title="注册/移除事件的三种方式"></a>注册/移除事件的三种方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象.on事件类型=事件处理函数;</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">box.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'点击后执行'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">box.onclick = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象.addEventListener("没有on的事件类型",事件处理函数,false);IE8不支持</span></span><br><span class="line">box.addEventListener(<span class="string">'click'</span>, eventCode, <span class="literal">false</span>);</span><br><span class="line">box.removeEventListener(<span class="string">'click'</span>, eventCode, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象.attachEvent("有on的事件类型",事件处理函数);谷歌和火狐不支持</span></span><br><span class="line">box.attachEvent(<span class="string">'onclick'</span>, eventCode);</span><br><span class="line">box.detachEvent(<span class="string">'onclick'</span>, eventCode);</span><br></pre></td></tr></table></figure>

<h2 id="兼容代码"><a href="#兼容代码" class="headerlink" title="兼容代码"></a>兼容代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventListener</span>(<span class="params">element, type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">    element.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent)&#123;</span><br><span class="line">    element.attachEvent(<span class="string">'on'</span> + type,fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    element[<span class="string">'on'</span> + type] = fn;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEventListener</span>(<span class="params">element, type, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">    element.removeEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</span><br><span class="line">    element.detachEvent(<span class="string">'on'</span> + type, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    element[<span class="string">'on'</span>+type] = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h2><ol>
<li><p>捕获阶段</p>
</li>
<li><p>当前目标阶段</p>
</li>
<li><p>冒泡阶段</p>
<p>事件对象.eventPhase属性可以查看事件触发时所处的阶段</p>
</li>
</ol>
<h2 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h2><p>window.event就是事件参数对象—-e是一样的</p>
<ul>
<li>event.type 获取事件类型</li>
<li>clientX/clientY     所有浏览器都支持，窗口位置</li>
<li>pageX/pageY       IE8以前不支持，页面位置</li>
<li>event.target || event.srcElement 用于获取触发事件的元素</li>
<li>event.preventDefault() 取消默认行为</li>
</ul>
<h2 id="阻止事件传播的方式"><a href="#阻止事件传播的方式" class="headerlink" title="阻止事件传播的方式"></a>阻止事件传播的方式</h2><ul>
<li>标准方式 event.stopPropagation();</li>
<li>IE低版本 event.cancelBubble = true; 标准中已废弃</li>
</ul>
<h2 id="常用的鼠标和键盘事件"><a href="#常用的鼠标和键盘事件" class="headerlink" title="常用的鼠标和键盘事件"></a>常用的鼠标和键盘事件</h2><ul>
<li>onmouseup 鼠标按键放开时触发</li>
<li>onmousedown 鼠标按键按下触发</li>
<li>onmousemove 鼠标移动触发</li>
<li>onkeyup 键盘按键按下触发</li>
<li>onkeydown 键盘按键抬起触发</li>
</ul>
<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="BOM的概念"><a href="#BOM的概念" class="headerlink" title="BOM的概念"></a>BOM的概念</h2><p>BOM(Browser Object Model) 是指浏览器对象模型，浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。</p>
<p>我们在浏览器中的一些操作都可以使用BOM的方式进行编程处理，</p>
<p>比如：刷新浏览器、后退、前进、在浏览器中输入URL等</p>
<h2 id="BOM的顶级对象window"><a href="#BOM的顶级对象window" class="headerlink" title="BOM的顶级对象window"></a>BOM的顶级对象window</h2><p>window是浏览器的顶级对象，当调用window下的属性和方法时，可以省略window<br>注意：window下一个特殊的属性 window.name</p>
<h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><ul>
<li>alert()</li>
<li>prompt()</li>
<li>confirm()</li>
</ul>
<h2 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h2><ul>
<li>onload</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当页面加载完成执行</span></span><br><span class="line">  <span class="comment">// 当页面完全加载所有内容（包括图像、脚本文件、CSS 文件等）执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>onunload</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当用户退出页面时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h2 id="setTimeout-和clearTimeout"><a href="#setTimeout-和clearTimeout" class="headerlink" title="setTimeout()和clearTimeout()"></a>setTimeout()和clearTimeout()</h2><p>在指定的毫秒数到达之后执行指定的函数，只执行一次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个定时器，1000毫秒后执行，返回定时器的标示</span></span><br><span class="line"><span class="keyword">var</span> timerId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定时器的执行</span></span><br><span class="line">clearTimeout(timerId);</span><br></pre></td></tr></table></figure>

<h2 id="setInterval-和clearInterval"><a href="#setInterval-和clearInterval" class="headerlink" title="setInterval()和clearInterval()"></a>setInterval()和clearInterval()</h2><p>定时调用的函数，可以按照给定的时间(单位毫秒)周期调用函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个定时器，每隔1秒调用一次</span></span><br><span class="line"><span class="keyword">var</span> timerId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="built_in">console</span>.log(date.toLocaleTimeString());</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消定时器的执行</span></span><br><span class="line">clearInterval(timerId);</span><br></pre></td></tr></table></figure>

<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>location对象是window对象下的一个属性，使用的时候可以省略window对象</p>
<p>location可以获取或者设置浏览器地址栏的URL</p>
<h2 id="location有哪些成员？"><a href="#location有哪些成员？" class="headerlink" title="location有哪些成员？"></a>location有哪些成员？</h2><ul>
<li><p>使用chrome的控制台查看</p>
</li>
<li><p>查MDN</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04v" title="https://developer.mozilla.org/zh-CN/">MDN<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>成员</p>
<ul>
<li>assign()/reload()/replace()</li>
<li>hash/host/hostname/search/href……</li>
</ul>
</li>
</ul>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>统一资源定位符 (Uniform Resource Locator, URL)</p>
<ul>
<li>URL的组成</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scheme:&#x2F;&#x2F;host:port&#x2F;path?query#fragment</span><br><span class="line">http:&#x2F;&#x2F;www.itheima.com:80&#x2F;a&#x2F;b&#x2F;index.html?name&#x3D;zs&amp;age&#x3D;18#bottom</span><br><span class="line">scheme:通信协议</span><br><span class="line">	常用的http,ftp,maito等</span><br><span class="line">host:主机</span><br><span class="line">	服务器(计算机)域名系统 (DNS) 主机名或 IP 地址。</span><br><span class="line">port:端口号</span><br><span class="line">	整数，可选，省略时使用方案的默认端口，如http的默认端口为80。</span><br><span class="line">path:路径</span><br><span class="line">	由零或多个&#39;&#x2F;&#39;符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</span><br><span class="line">query:查询</span><br><span class="line">	可选，用于给动态网页传递参数，可有多个参数，用&#39;&amp;&#39;符号隔开，每个参数的名和值用&#39;&#x3D;&#39;符号隔开。例如：name&#x3D;zs</span><br><span class="line">fragment:信息片断</span><br><span class="line">	字符串，锚点.</span><br></pre></td></tr></table></figure>

<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>解析URL中的query，并返回对象的形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQuery</span>(<span class="params">queryStr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> query = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (queryStr.indexOf(<span class="string">'?'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = queryStr.indexOf(<span class="string">'?'</span>);</span><br><span class="line">    queryStr = queryStr.substr(index + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> array = queryStr.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmpArr = array[i].split(<span class="string">'='</span>);</span><br><span class="line">      <span class="keyword">if</span> (tmpArr.length === <span class="number">2</span>) &#123;</span><br><span class="line">        query[tmpArr[<span class="number">0</span>]] = tmpArr[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getQuery(location.search));</span><br><span class="line"><span class="built_in">console</span>.log(getQuery(location.href));</span><br></pre></td></tr></table></figure>

<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>历史记录的后退和前进</p>
<ul>
<li>back() 后退 </li>
<li>forward() 前进</li>
<li>go()</li>
</ul>
<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>获取系统和浏览器的信息的</p>
<ul>
<li>userAgent—获取系统,浏览器的信息的</li>
</ul>
<h1 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h1><h2 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h2><ul>
<li>offsetParent用于获取定位的父级元素</li>
<li>offsetParent和parentNode的区别</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetParent);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetLeft);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetTop);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetWidth);</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetHeight);</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/02/28/bSAvtLsgG8o2nrT.png" alt=""></p>
<h2 id="客户区大小"><a href="#客户区大小" class="headerlink" title="客户区大小"></a>客户区大小</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box.clientLeft);</span><br><span class="line"><span class="built_in">console</span>.log(box.clientTop);</span><br><span class="line"><span class="built_in">console</span>.log(box.clientWidth);</span><br><span class="line"><span class="built_in">console</span>.log(box.clientHeight);</span><br><span class="line">client系列:</span><br><span class="line">    *  clientWidth:可视区域的宽度,没有边框</span><br><span class="line">    *  clientHeight:可视区域的高度,没有边框</span><br><span class="line">    *  clientLeft:左边框的宽度</span><br><span class="line">    *  clientTop:上边框的宽度</span><br><span class="line">    *  clientX:可视区域的横坐标</span><br><span class="line">    *  clientY:可视区域的纵坐标</span><br></pre></td></tr></table></figure>

<h2 id="滚动偏移"><a href="#滚动偏移" class="headerlink" title="滚动偏移"></a>滚动偏移</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box.scrollLeft)</span><br><span class="line"><span class="built_in">console</span>.log(box.scrollTop)</span><br><span class="line"><span class="built_in">console</span>.log(box.scrollWidth)</span><br><span class="line"><span class="built_in">console</span>.log(box.scrollHeight)</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/02/28/KlaWx1neIcPjAqQ.png" alt=""></p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匀速动画</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">element, target</span>) </span>&#123;</span><br><span class="line">     <span class="comment">//清理定时器</span></span><br><span class="line">     clearInterval(element.timeId);</span><br><span class="line">     element.timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//获取元素的当前位置</span></span><br><span class="line">       <span class="keyword">var</span> current = element.offsetLeft;</span><br><span class="line">       <span class="comment">//移动的步数</span></span><br><span class="line">       <span class="keyword">var</span> step = <span class="number">10</span>;</span><br><span class="line">       step = target &gt; current ? step : -step;</span><br><span class="line">       current += step;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(current - target) &gt; <span class="built_in">Math</span>.abs(step)) &#123;</span><br><span class="line">         element.style.left = current + <span class="string">"px"</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         clearInterval(element.timeId);</span><br><span class="line">         element.style.left = target + <span class="string">"px"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;, <span class="number">20</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="元素隐藏"><a href="#元素隐藏" class="headerlink" title="元素隐藏"></a>元素隐藏</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不占位</span></span><br><span class="line">my$(<span class="string">"dv"</span>).style.display=<span class="string">"none"</span>;</span><br><span class="line"><span class="comment">//占位</span></span><br><span class="line">my$(<span class="string">"dv"</span>).style.visibility=<span class="string">"hidden"</span>;</span><br><span class="line"><span class="comment">//占位</span></span><br><span class="line">my$(<span class="string">"dv"</span>).style.opacity=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//占位</span></span><br><span class="line">my$(<span class="string">"dv"</span>).style.height=<span class="string">"0px"</span>;</span><br><span class="line">my$(<span class="string">"dv"</span>).style.border=<span class="string">"0px solid red"</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//高清放大镜：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">      width: 350px;</span><br><span class="line">      height: 350px;</span><br><span class="line">      margin: 100px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">      width: 400px;</span><br><span class="line">      height: 400px;</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      left: 360px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">      overflow: hidden;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line">      width: 175px;</span><br><span class="line">      height: 175px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(255, 255, 0, 0<span class="selector-class">.4</span>);</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0px;</span><br><span class="line">      left: 0px;</span><br><span class="line">      cursor: move;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">      position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="comment">&lt;!--小层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/small.png"</span> <span class="attr">width</span>=<span class="string">"350"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--遮挡层--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--小图--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span><span class="comment">&lt;!--大层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/big.jpg"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span><span class="comment">&lt;!--大图--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--大图--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入外部的js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"common.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//获取需要的元素</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> box = my$(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//获取小图的div</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> small = box.children[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//遮挡层</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> mask = small.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//获取大图的div</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> big = box.children[<span class="number">1</span>];</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//获取大图</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> bigImg = big.children[<span class="number">0</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//鼠标进入显示遮挡层和大图的div</span></span></span><br><span class="line"><span class="actionscript">  box.onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    mask.style.display = <span class="string">"block"</span>;</span></span><br><span class="line"><span class="actionscript">    big.style.display = <span class="string">"block"</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="actionscript">  <span class="comment">//鼠标离开隐藏遮挡层和大图的div</span></span></span><br><span class="line"><span class="actionscript">  box.onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    mask.style.display = <span class="string">"none"</span>;</span></span><br><span class="line"><span class="actionscript">    big.style.display = <span class="string">"none"</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">//鼠标的移动事件---鼠标是在小层上移动</span></span></span><br><span class="line"><span class="actionscript">  small.onmousemove = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//鼠标此时的可视区域的横坐标和纵坐标</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//主要是设置鼠标在遮挡层的中间显示</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> x = e.clientX - mask.offsetWidth / <span class="number">2</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> y = e.clientY - mask.offsetHeight / <span class="number">2</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//主要是margin的100px的问题</span></span></span><br><span class="line">    x = x - 100;</span><br><span class="line">    y = y - 100;</span><br><span class="line"><span class="actionscript">    <span class="comment">//横坐标的最小值</span></span></span><br><span class="line">    x = x &lt; 0 ? 0 : x;</span><br><span class="line"><span class="actionscript">    <span class="comment">//纵坐标的最小值</span></span></span><br><span class="line">    y = y &lt; 0 ? 0 : y;</span><br><span class="line"><span class="actionscript">    <span class="comment">//横坐标的最大值</span></span></span><br><span class="line">    x = x &gt; small.offsetWidth - mask.offsetWidth ? small.offsetWidth - mask.offsetWidth : x;</span><br><span class="line"><span class="actionscript">    <span class="comment">//纵坐标的最大值</span></span></span><br><span class="line">    y = y &gt; small.offsetHeight - mask.offsetHeight ? small.offsetHeight - mask.offsetHeight : y;</span><br><span class="line"><span class="actionscript">    <span class="comment">//为遮挡层的left和top赋值</span></span></span><br><span class="line"><span class="actionscript">    mask.style.left = x + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">    mask.style.top = y + <span class="string">"px"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//遮挡层的移动距离/大图的移动距离=遮挡层的最大移动距离/大图的最大移动距离</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//大图的移动距离=遮挡层的移动距离*大图的最大移动距离/遮挡层的最大移动距离</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//大图的横向的最大移动距离</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> maxX = bigImg.offsetWidth - big.offsetWidth;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//大图的纵向的最大移动距离</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//var maxY = bigImg.offsetHeight - big.offsetHeight;</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//大图的横向移动的坐标</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> bigImgMoveX = x * maxX / (small.offsetWidth - mask.offsetWidth);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//大图的纵向移动的坐标</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> bigImgMoveY = y * maxX / (small.offsetWidth - mask.offsetWidth);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//设置图片移动</span></span></span><br><span class="line"><span class="actionscript">    bigImg.style.marginLeft = -bigImgMoveX + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">    bigImg.style.marginTop = -bigImgMoveY + <span class="string">"px"</span>;</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="元素的类型"><a href="#元素的类型" class="headerlink" title="元素的类型"></a>元素的类型</h2><p><img src="https://i.loli.net/2020/02/28/szyGtlAx8hHdJ5N.png" alt=""></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-基础</title>
    <url>/2020/02/28/JavaScript-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/WRMC4fdvBxYN9rw.jpg" style="zoom: 15%;" />

<p>JavaScript 基础知识点</p>
</center>
<a id="more"></a>

<p>学习目标:</p>
<ul>
<li>掌握编程的基本思维</li>
<li>掌握编程的基本语法</li>
</ul>
<h1 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h1><h2 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h2><p>HTML:是标记语言,展示数据的。<br>CSS:美化页面。<br>JavaScript:用户和浏览器交互。</p>
<p>JavaScript是什么？<br>是一门脚本语言（不需要编译，直接执行）。<br>是一门解释型语言。<br>是一门动态类型的语言。<br>是一门基于对象的语言。<br>是一门弱类型的语言,声明变量的时候都使用var</p>
<h2 id="JavaScript现在的意义-应用场景"><a href="#JavaScript现在的意义-应用场景" class="headerlink" title="JavaScript现在的意义(应用场景)"></a>JavaScript现在的意义(应用场景)</h2><p>JavaScript 发展到现在几乎无所不能。</p>
<ol>
<li>网页特效</li>
<li>服务端开发(Node.js)</li>
<li>命令行工具(Node.js)</li>
<li>桌面程序(Electron)</li>
<li>App(Cordova)</li>
<li>控制硬件-物联网(Ruff)</li>
<li>游戏开发(cocos2d-js)</li>
</ol>
<h2 id="JavaScript和HTML、CSS的区别"><a href="#JavaScript和HTML、CSS的区别" class="headerlink" title="JavaScript和HTML、CSS的区别"></a>JavaScript和HTML、CSS的区别</h2><ol>
<li>HTML：提供网页的结构，提供网页中的内容</li>
<li>CSS: 用来美化网页</li>
<li>JavaScript: 可以用来控制网页内容，给网页增加动态的效果</li>
</ol>
<h1 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h1><p><img src="https://i.loli.net/2020/02/28/MvEOjtpBlurIHPJ.png" alt=""></p>
<h2 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h2><p>ECMA 欧洲计算机制造联合会</p>
<p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p>
<h2 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h2><p>一套操作浏览器功能的API</p>
<p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p>
<h2 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h2><p>一套操作页面元素的API</p>
<p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p>
<h1 id="JavaScript的书写位置"><a href="#JavaScript的书写位置" class="headerlink" title="JavaScript的书写位置"></a>JavaScript的书写位置</h1><ul>
<li>写在行内</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">onclick</span>=<span class="string">"alert('Hello World')"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>写在script标签中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'Hello World!'</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>写在外部js文件中，在页面引入</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>js代码的注意问题：</li>
</ul>
<ol>
<li>在一对script的标签中有错误的js代码,那么该错误的代码后面的js代码不会执行。</li>
<li>如果第一对的script标签中有错误,不会影响后面的script标签中的js代码执行。</li>
<li>script的标签中可以写什么内容。<code>&lt;script type=&quot;text/javascript&quot; language=&quot;JavaScript&quot;&gt;</code></li>
<li>script标签一般是放在body的标签的最后的,有的时候会在head标签中,目前讲课的时候都在body标签的后面(body中的最后).</li>
<li>如果script标签是引入外部js文件的作用,那么这对标签中不要写任何的js代码,如果要写,重新写一对script标签,里面写代码。</li>
</ol>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h2><ul>
<li>var声明变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br></pre></td></tr></table></figure>

<ul>
<li>变量的赋值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br><span class="line">age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>同时声明多个变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age, name, sex;</span><br><span class="line">age = <span class="number">10</span>;</span><br><span class="line">name = <span class="string">'zs'</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>同时声明多个变量并赋值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>, name = <span class="string">'zs'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="变量在内存中的存储"><a href="#变量在内存中的存储" class="headerlink" title="变量在内存中的存储"></a>变量在内存中的存储</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/02/28/41Yal6q9rkPivyW.png" alt=""></p>
<h2 id="变量的命名规则和规范"><a href="#变量的命名规则和规范" class="headerlink" title="变量的命名规则和规范"></a>变量的命名规则和规范</h2><ul>
<li><p>规则 - 必须遵守的，不遵守会报错</p>
<ul>
<li><p>由字母、数字、下划线、$符号组成，不能以数字开头</p>
</li>
<li><p>不能是关键字和保留字，例如：for、while。</p>
</li>
<li><p>区分大小写</p>
</li>
</ul>
</li>
<li><p>规范 - 建议遵守的，不遵守不会报错</p>
<ul>
<li>变量名必须有意义</li>
<li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。例如：userName、userPassword</li>
</ul>
</li>
</ul>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h2><p>Number、String、Boolean、Undefined、Null</p>
<h2 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h2><ul>
<li>浮点数的精度问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浮点数</span><br><span class="line">	var n &#x3D; 5e-324;   &#x2F;&#x2F; 科学计数法  5乘以10的-324次方  </span><br><span class="line">浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数</span><br><span class="line">   var result &#x3D; 0.1 + 0.2;    &#x2F;&#x2F; 结果不是 0.3，而是：0.30000000000000004</span><br><span class="line">   console.log(0.07 * 100);</span><br><span class="line">   不要判断两个浮点数是否相等</span><br></pre></td></tr></table></figure>

<ul>
<li>数值范围</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最小值：Number.MIN_VALUE，这个值为： 5e-324</span><br><span class="line">最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</span><br><span class="line">无穷大：Infinity</span><br><span class="line">无穷小：-Infinity</span><br></pre></td></tr></table></figure>

<ul>
<li><p>数值判断</p>
<ul>
<li><p>如果一个变量的结果是undefined和一个数字进行计算,结果:NaN不是一个数字,也没有意义。判断结果不是一个数字可以使用isNaN(变量名)</p>
</li>
<li><p>NaN：not a number</p>
<ul>
<li>NaN 与任何值都不相等，包括他本身</li>
</ul>
</li>
<li><p>isNaN: is not a number</p>
</li>
</ul>
</li>
</ul>
<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>‘abc’   “abc”</p>
<ul>
<li><p>转义符</p>
<p><img src="https://i.loli.net/2020/02/28/mnDzHwahUiLI5YQ.png" alt=""></p>
</li>
<li><p>字符串长度</p>
<p>length属性用来获取字符串的长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'黑马程序猿 Hello World'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串拼接</p>
<p>字符串拼接使用 + 连接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">11</span> + <span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span> + <span class="string">' world'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'100'</span> + <span class="string">'100'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'11'</span> + <span class="number">11</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'male:'</span> + <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>两边只要有一个是字符串，那么+就是字符串拼接功能</li>
<li>两边如果都是数字，那么就是算术功能。</li>
</ol>
</li>
</ul>
<h2 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h2><ul>
<li>Boolean字面量：  true和false，区分大小写</li>
<li>计算机内部存储：true为1，false为0</li>
</ul>
<h2 id="Undefined和Null"><a href="#Undefined和Null" class="headerlink" title="Undefined和Null"></a>Undefined和Null</h2><ol>
<li>undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined。函数没有明确返回值,如果接收了,结果也是undefined。</li>
<li>null表示一个空，变量的值如果想为null，必须手动设置</li>
</ol>
<h2 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h2><p>​    Object</p>
<h2 id="获取变量的类型"><a href="#获取变量的类型" class="headerlink" title="获取变量的类型"></a>获取变量的类型</h2><p>typeof</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age);  <span class="comment">// 'number'</span></span><br></pre></td></tr></table></figure>

<h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>在源代码中一个固定值的表示法。</p>
<p>数值字面量：8, 9, 10</p>
<p>字符串字面量：’黑马程序员’, “大前端”</p>
<p>布尔字面量：true，false</p>
<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p>如何使用谷歌浏览器，快速的查看数据类型？</p>
<p>字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是蓝色的，undefined和null是灰色的</p>
<h2 id="转换成字符串类型"><a href="#转换成字符串类型" class="headerlink" title="转换成字符串类型"></a>转换成字符串类型</h2><ul>
<li><p>toString()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var num &#x3D; 5;</span><br><span class="line">console.log(num.toString());</span><br></pre></td></tr></table></figure>
</li>
<li><p>String()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null</span><br></pre></td></tr></table></figure>
</li>
<li><p>拼接字符串方式</p>
<p>num  +  “”，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串</p>
</li>
</ul>
<h2 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h2><ul>
<li><p>Number()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Number()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN</span><br></pre></td></tr></table></figure>
</li>
<li><p>parseInt()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"12.3abc"</span>);  <span class="comment">// 返回12，如果第一个字符是数字会解析知道遇到非数字结束</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">"abc123"</span>);   <span class="comment">// 返回NaN，如果第一个字符不是数字或者符号就返回NaN</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>parseFloat()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parseFloat()把字符串转换成浮点数</span><br><span class="line">parseFloat()和parseInt非常相似，不同之处在与</span><br><span class="line">	parseFloat会解析第一个. 遇到第二个.或者非数字结束</span><br><span class="line">	如果解析的内容里只有整数，解析成整数</span><br></pre></td></tr></table></figure>
</li>
<li><p>+，-0等运算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'500'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+str);		<span class="comment">// 取正</span></span><br><span class="line"><span class="built_in">console</span>.log(-str);		<span class="comment">// 取负</span></span><br><span class="line"><span class="built_in">console</span>.log(str - <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="转换成布尔类型"><a href="#转换成布尔类型" class="headerlink" title="转换成布尔类型"></a>转换成布尔类型</h2><ul>
<li>Boolean()</li>
</ul>
<p>0  ‘’(空字符串) null undefined NaN 会转换成false  其它都会转换成true</p>
<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ - * &#x2F; %</span><br></pre></td></tr></table></figure>

<h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><p>一元运算符：只有一个操作数的运算符</p>
<p>5 + 6  两个操作数的运算符 二元运算符</p>
<p>++  自身加1</p>
<p>– 自身减1</p>
<ul>
<li><p>前置++</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line">++ num1; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num1 + ++ num2);</span><br></pre></td></tr></table></figure>
</li>
<li><p>后置++</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</span><br><span class="line">num1 ++;    </span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">6</span> </span><br><span class="line"><span class="built_in">console</span>.log(num1 + num2 ++);</span><br></pre></td></tr></table></figure>




</li>
</ul>
<h2 id="逻辑运算符-布尔运算符"><a href="#逻辑运算符-布尔运算符" class="headerlink" title="逻辑运算符(布尔运算符)"></a>逻辑运算符(布尔运算符)</h2><pre><code>&amp;&amp; 与 两个操作数同时为true，结果为true，否则都是false
|| 或 两个操作数有一个为true，结果为true，否则为false
!  非  取反</code></pre><h2 id="关系运算符-比较运算符"><a href="#关系运算符-比较运算符" class="headerlink" title="关系运算符(比较运算符)"></a>关系运算符(比较运算符)</h2><pre><code>&lt;  &gt;  &gt;=  &lt;=  == != === !==</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">==与===的区别：==只进行值得比较，===类型和值同时相等，则相等</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">'55'</span> == <span class="number">55</span>;  	<span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">'55'</span> === <span class="number">55</span>; 	<span class="comment">// false 值相等，类型不相等</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">55</span> === <span class="number">55</span>; 	<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>=   +=   -=   *=   /=   %=</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">num += <span class="number">5</span>;	<span class="comment">//相当于  num = num + 5;</span></span><br></pre></td></tr></table></figure>


<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><pre><code>优先级从高到底
    1. ()  优先级最高
    2. 一元运算符  ++   --   !
    3. 算数运算符  先*  /  %   后 +   -
    4. 关系运算符  &gt;   &gt;=   &lt;   &lt;=
    5. 相等运算符   ==   !=    ===    !==
    6. 逻辑运算符 先&amp;&amp;   后||
    7. 赋值运算符</code></pre><h1 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h1><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><blockquote>
<p>一个表达式可以产生一个值，有可能是运算、函数调用、有可能是字面量。表达式可以放在任何需要值的地方。</p>
</blockquote>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><blockquote>
<p>语句可以理解为一个行为，循环语句和判断语句就是典型的语句。一个程序有很多个语句组成，一般情况下;分割一个一个的语句</p>
</blockquote>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><blockquote>
<p>程序的三种基本结构</p>
</blockquote>
<h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p> 从上到下执行的代码就是顺序结构</p>
<p><strong>程序默认就是由上到下顺序执行的</strong></p>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>根据不同的情况，执行对应代码</p>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环结构：重复做一件事情</p>
<h1 id="分支结构-1"><a href="#分支结构-1" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>语法结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件表达式 */</span>) &#123;</span><br><span class="line">  <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件表达式 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 否则执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="comment">/* 条件1 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">/* 条件2 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">/* 条件3 */</span>)&#123;</span><br><span class="line">  <span class="comment">// 成立执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 最后默认执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><pre><code>表达式1 ? 表达式2 : 表达式3
是对if……else语句的一种简化写法</code></pre><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p>语法格式:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 常量<span class="number">3</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  …</span><br><span class="line">  <span class="keyword">case</span> 常量n:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    语句;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>break可以省略，如果省略，代码会继续执行下一个case
switch 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串&apos;10&apos; 不等于数值 10）</code></pre><h2 id="布尔类型的隐式转换"><a href="#布尔类型的隐式转换" class="headerlink" title="布尔类型的隐式转换"></a>布尔类型的隐式转换</h2><p>流程控制语句会把后面的值隐式转换成布尔类型</p>
<pre><code>转换为true   非空字符串  非0数字  true 任何对象
转换成false  空字符串  0  false  null  undefined</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结果是什么？</span></span><br><span class="line"><span class="keyword">var</span> a = !!<span class="string">'123'</span>;</span><br></pre></td></tr></table></figure>



<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message;</span><br><span class="line"><span class="comment">// 会自动把message转换成false</span></span><br><span class="line"><span class="keyword">if</span> (message) &#123;     </span><br><span class="line">  <span class="comment">// todo...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="循环结构-1"><a href="#循环结构-1" class="headerlink" title="循环结构"></a>循环结构</h1><blockquote>
<p>在javascript中，循环语句有三种，while、do..while、for循环。</p>
</blockquote>
<h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><p>基本语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当循环条件为true时，执行循环体，</span></span><br><span class="line"><span class="comment">// 当循环条件为false时，结束循环。</span></span><br><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">  <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h2><blockquote>
<p>do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。</p>
</blockquote>
<p>基础语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// 循环体;</span></span><br><span class="line">&#125; <span class="keyword">while</span> (循环条件);</span><br></pre></td></tr></table></figure>

<h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><blockquote>
<p> while和do…while一般用来解决无法确认次数的循环。for循环一般在循环次数确定的时候比较方便</p>
</blockquote>
<p>for循环语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for循环的表达式之间用的是;号分隔的，千万不要写成,</span></span><br><span class="line"><span class="keyword">for</span> (初始化表达式<span class="number">1</span>; 判断表达式<span class="number">2</span>; 自增表达式<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环体4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行顺序：1243  —-  243   —–243(直到循环条件变成false)</p>
<ol>
<li>初始化表达式</li>
<li>判断表达式</li>
<li>自增表达式</li>
<li>循环体</li>
</ol>
<h2 id="continue和break"><a href="#continue和break" class="headerlink" title="continue和break"></a>continue和break</h2><blockquote>
<p>break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）</p>
<p>continue:立即跳出当前循环，继续下一次循环（跳到i++的地方）</p>
</blockquote>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul>
<li>过去调试JavaScript的方式<ul>
<li>alert()</li>
<li>console.log()</li>
</ul>
</li>
<li>断点调试</li>
</ul>
<blockquote>
<p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</p>
</blockquote>
<ul>
<li>调试步骤</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">浏览器中按F12--&gt;sources--&gt;找到需要调试的文件--&gt;在程序的某一行设置断点</span><br></pre></td></tr></table></figure>

<ul>
<li>调试中的相关操作</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。</span><br><span class="line">F10: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。</span><br><span class="line">F8：跳到下一个断点处，如果后面没有断点了，则程序执行结束。</span><br></pre></td></tr></table></figure>

<p>tips: <strong><em>监视变量，不要监视表达式，因为监视了表达式，那么这个表达式也会执行。</em></strong></p>
<ol>
<li>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。</li>
<li>今天学的代码调试非常的简单，只要求同学们记住代码调试的这几个按钮的作用即可，后面还会学到很多的代码调试技巧。</li>
</ol>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h2><blockquote>
<p>所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。</p>
</blockquote>
<h2 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h2><blockquote>
<p>数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整。</p>
<p>伪数组和数组的区别：</p>
<p>真数组的长度是可变的，伪数组的长度不可变。</p>
<p>真数组可以使用数组中的方法，伪数组不可以使用数组中的方法。</p>
</blockquote>
<p>通过数组字面量创建数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []; </span><br><span class="line"><span class="comment">// 创建一个包含2个字符串的数组</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'a'</span>, <span class="string">'c'</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过数组的length属性获取数组的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.length);</span><br><span class="line"><span class="comment">// 可以设置length属性改变数组中元素的个数</span></span><br><span class="line">arr3.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h2 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h2><p>数组的取值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式：数组名[下标]	下标又称索引</span></span><br><span class="line"><span class="comment">// 功能：获取数组对应下标的那个值，如果下标不存在，则返回undefined。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'red'</span>,, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line">arr[<span class="number">0</span>];	<span class="comment">// red</span></span><br><span class="line">arr[<span class="number">2</span>]; <span class="comment">// blue</span></span><br><span class="line">arr[<span class="number">3</span>]; <span class="comment">// 这个数组的最大下标为2,因此返回undefined</span></span><br></pre></td></tr></table></figure>


<h2 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h2><blockquote>
<p>遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。</p>
</blockquote>
<p>数组遍历的基本语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">	<span class="comment">// 数组遍历的固定结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h2><p>数组的赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式：数组名[下标/索引] = 值;</span></span><br><span class="line"><span class="comment">// 如果下标有对应的值，会把原来的值覆盖，如果下标不存在，会给数组新增一个元素。</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="comment">// 把red替换成了yellow</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"yellow"</span>;</span><br><span class="line"><span class="comment">// 给数组新增加了一个pink的值</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"pink"</span>;</span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><blockquote>
<p>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数，起个名字（函数名），在后续开发中可以反复调用</p>
<p>函数的作用就是封装一段代码，将来可以重复使用</p>
</blockquote>
<h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><ul>
<li>函数声明</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>函数表达式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>特点：</p>
<p>函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。<br>函数一般都用来干一件事情，函数名称一般使用动词</p>
</li>
</ul>
<h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><ul>
<li>调用函数的语法：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>特点：</p>
<p>函数体只有在调用的时候才会执行，调用需要()进行调用。<br>可以调用多次(重复使用)</p>
</li>
</ul>
<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><ul>
<li>语法：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部</span></span><br><span class="line"><span class="comment">// 带参数的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参<span class="number">3.</span>..</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带参数的函数调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3</span>); </span><br><span class="line">形参<span class="number">1</span> = 实参<span class="number">1</span></span><br><span class="line">形参<span class="number">2</span> = 实参<span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>形参和实参</p>
<blockquote>
<ol>
<li>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。</li>
<li>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。</li>
</ol>
</blockquote>
</li>
<li><p>求1-n之间所有数的和</p>
</li>
<li><p>求n-m之间所有数的和</p>
</li>
<li><p>圆的面积</p>
</li>
<li><p>求2个数中的最大值</p>
</li>
<li><p>求3个数中的最大值</p>
</li>
<li><p>判断一个数是否是素数(又叫质数，只能被1和自身整数的数)</p>
</li>
</ul>
<h2 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h2><blockquote>
<p>当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值</p>
</blockquote>
<p>返回值语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个带返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>, 形参<span class="number">2</span>, 形参<span class="number">3.</span>..</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以通过变量来接收这个返回值</span></span><br><span class="line"><span class="keyword">var</span> 变量 = 函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>, 实参<span class="number">3.</span>..);</span><br></pre></td></tr></table></figure>

<p>函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。</p>
<p>返回值详解：</p>
<pre><code>如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined
如果函数使用 return语句，那么跟再return后面的值，就成了函数的返回值
如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined
函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。

推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值。</code></pre><h2 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h2><blockquote>
<p>JavaScript中，arguments对象是比较特别的一个对象，实际上是当前函数的一个内置属性。也就是说所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有的实参。arguments是一个伪数组，因此可以进行遍历</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取的是函数在调用的时候,传入了几个参数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line"><span class="comment">//使用arguments对象可以获取传入的每个参数的值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure>

<h1 id="函数其它"><a href="#函数其它" class="headerlink" title="函数其它"></a>函数其它</h1><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><blockquote>
<p>匿名函数：没有名字的函数</p>
</blockquote>
<p>匿名函数如何使用：</p>
<pre><code>将匿名函数赋值给一个变量，这样就可以通过变量进行调用
匿名函数自调用</code></pre><h2 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h2><blockquote>
<p>匿名函数不能通过直接调用来执行，因此可以通过匿名函数的自调用的方式来执行</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">123</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2 id="函数是一种数据类型"><a href="#函数是一种数据类型" class="headerlink" title="函数是一种数据类型"></a>函数是一种数据类型</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn);</span><br></pre></td></tr></table></figure>

<ul>
<li>函数作为参数</li>
</ul>
<p>函数可以作为参数使用,如果一个函数作为参数,那么我们说这个参数(函数)可以叫回调函数</p>
<ul>
<li>函数做为返回值</li>
</ul>
<p>因为函数是一种类型，所以可以把函数可以作为返回值从函数内部返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(a+b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">15</span>)();</span><br></pre></td></tr></table></figure>

<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><pre><code>1.命名规范    
    变量、函数 的命名 必须要有意义
    变量 的名称一般用名词
    函数 的名称一般用动词
2.变量规范   
    操作符的前后要有空格
    var name = &apos;zs&apos;;      5 + 6
3.注释规范
    // 这里是注释
4.空格规范
    if (true) {

    }
    for (var i = 0; i &lt;= 100; i++) {

    }
5.换行规范
    var arr = [1, 2, 3, 4];
    if (a &gt; b) {

    }
    for (var i = 0; i &lt; 10; i++) {

    }
    function fn() {

    }</code></pre><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>作用域：变量可以起作用的范围</p>
<h2 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h2><ul>
<li><p>全局变量</p>
<p>在任何地方都可以访问到的变量就是全局变量，对应全局作用域</p>
</li>
<li><p>局部变量</p>
<p>只在固定的代码片段内可访问到的变量，最常见的例如函数内部。对应局部作用域(函数作用域)</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">全局变量:声明的变量是使用var声明的,那么这个变量就是全局变量,全局变量可以在页面的任何位置使用。</span><br><span class="line">除了函数以外,其他的任何位置定义的变量都是全局变量</span><br><span class="line">变量退出作用域之后会销毁，全局变量关闭网页或浏览器才会销毁</span><br></pre></td></tr></table></figure>

<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。<br><strong>在es5之前没有块级作用域的的概念,只有函数作用域</strong>，现阶段可以认为JavaScript没有块级作用域</p>
<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><pre><code>只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。
隐式全局变量:声明的变量没有var,就叫隐式全局变量。
全局变量是不能被删除的,隐式全局变量是可以被删除的。定义变量使用var是不会被删除的,没有var是可以删除的
将这样的所有的作用域列出来，可以有一个结构: 函数内指向函数外的链式结构。就称作作用域链。</code></pre><p><img src="https://i.loli.net/2020/02/28/shaedrqyI97tb5T.png" alt=""></p>
<p><img src="https://i.loli.net/2020/02/28/w9JK7QF1eMP5cdN.png" alt=""></p>
<h1 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h1><blockquote>
<p>JavaScript代码的执行是由浏览器中的JavaScript解析器来执行的。JavaScript解析器执行JavaScript代码的时候，分为两个过程：预解析过程和代码执行过程</p>
</blockquote>
<p>预解析过程：</p>
<ol>
<li>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。</li>
<li>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。</li>
<li>先提升var，在提升function。</li>
</ol>
<p>JavaScript的执行过程</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaaaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><ul>
<li><p>变量提升</p>
<p>定义变量的时候，变量的声明会被提升到作用域的最上面，变量的赋值不会提升。</p>
</li>
<li><p>函数提升</p>
<p>JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面</p>
</li>
</ul>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。</span><br><span class="line">举例： 一部车，一个手机</span><br><span class="line">车是一类事物，门口停的那辆车才是对象</span><br><span class="line">	特征：红色、四个轮子</span><br><span class="line">	行为：驾驶、刹车</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JavaScript中的对象其实就是生活中对象的一个抽象</span><br><span class="line">JavaScript的对象是无序属性的集合。</span><br><span class="line">	其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把JavaScript中的对象想象成键值对，其中值可以是数据和函数。</span><br><span class="line">对象的行为和特征</span><br><span class="line">	特征---属性</span><br><span class="line">	行为---方法</span><br></pre></td></tr></table></figure>

<ul>
<li>事物的特征在对象中用属性来表示。</li>
<li>事物的行为在对象中用方法来表示。</li>
</ul>
<h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><blockquote>
<p>字面量：11 ‘abc’  true  [] {}等</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'zs,</span></span><br><span class="line"><span class="string">  age: 18,</span></span><br><span class="line"><span class="string">  sex: true,</span></span><br><span class="line"><span class="string">  sayHi: function () &#123;</span></span><br><span class="line"><span class="string">    console.log(this.name);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="对象创建方式"><a href="#对象创建方式" class="headerlink" title="对象创建方式"></a>对象创建方式</h2><ul>
<li>对象字面量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'zs'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  sex: <span class="literal">true</span>,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>系统的构造函数创建对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">'lisi'</span>;</span><br><span class="line">person.age = <span class="number">35</span>;</span><br><span class="line">person.job = <span class="string">'actor'</span>;</span><br><span class="line">person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>工厂函数创建对象<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  person.name = name;</span><br><span class="line">  person.age = age;</span><br><span class="line">  person.job = job;</span><br><span class="line">  person.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">'张三'</span>, <span class="number">22</span>, <span class="string">'actor'</span>);</span><br></pre></td></tr></table></figure></li>
<li>自定义构造函数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  	<span class="built_in">console</span>.log(<span class="string">'Hello,everyBody'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">22</span>, <span class="string">'actor'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h2>  如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性，属性一般是名词，用来描述事物的特征<br>  如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法，方法是动词，描述事物的行为和功能<h2 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h2><blockquote>
<p>构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p>
</blockquote>
</li>
</ul>
<ol>
<li>构造函数用于创建一类对象，首字母要大写。</li>
<li>构造函数要和new一起使用才有意义。</li>
</ol>
<p>new在执行时会做四件事情</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new会在内存中创建一个新的空对象</span><br><span class="line">new 会让this指向这个新的对象</span><br><span class="line">执行构造函数  目的：给这个新对象加属性和方法</span><br><span class="line">new会返回这个新对象</span><br></pre></td></tr></table></figure>
<h2 id="this详解"><a href="#this详解" class="headerlink" title="this详解"></a>this详解</h2><pre><code>JavaScript中的this指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解
现在我们需要掌握函数内部的this几个特点
    1. 函数在定义的时候this是不确定的，只有在调用的时候才可以确定
    2. 一般函数直接执行，内部this指向全局window
    3. 函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象
    4. 构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化</code></pre><h1 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h1><h2 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h2><blockquote>
<p>通过for..in语法可以遍历一个对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  obj[i] = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">"=="</span> + obj[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'mm'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> fun(); </span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// mm </span></span><br><span class="line"><span class="keyword">delete</span> obj.name;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="判断变量（对象）类型"><a href="#判断变量（对象）类型" class="headerlink" title="判断变量（对象）类型"></a>判断变量（对象）类型</h2><p>变量 instanceof 类型的名字—–&gt;布尔类型,true就是这种类型,false不是这种类型。</p>
<h2 id="简单类型和复杂类型的区别"><a href="#简单类型和复杂类型的区别" class="headerlink" title="简单类型和复杂类型的区别"></a>简单类型和复杂类型的区别</h2><blockquote>
<p>基本类型又叫做值类型，复杂类型又叫做引用类型</p>
<p>值类型：简单数据类型，基本数据类型，在存储时，变量中存储的是值本身，因此叫做值类型。</p>
<p>引用类型：复杂数据类型，在存储是，变量中存储的仅仅是地址（引用），因此叫做引用数据类型。</p>
</blockquote>
<ul>
<li><p>堆和栈    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">堆栈空间分配区别：</span><br><span class="line">　　1、栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。 </span><br><span class="line">　　2、堆（操作系统）： 存储复杂类型(对象)，一般由程序员分配释放， 若程序员不释放，由垃圾回收机制回收。</span><br><span class="line">　　3、值类型作为函数的参数,传递的是值。</span><br><span class="line">　　引用类型作为函数的参数,传递的是地址。</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：JavaScript中没有堆和栈的概念，此处我们用堆和栈来讲解，目的方便理解和方便以后的学习。</p>
</li>
</ul>
<h2 id="基本类型在内存中的存储"><a href="#基本类型在内存中的存储" class="headerlink" title="基本类型在内存中的存储"></a>基本类型在内存中的存储</h2><p><img src="https://i.loli.net/2020/02/28/Z3nCWse2ybo8NOc.png" alt=""></p>
<h2 id="复杂类型在内存中的存储"><a href="#复杂类型在内存中的存储" class="headerlink" title="复杂类型在内存中的存储"></a>复杂类型在内存中的存储</h2><p><img src="https://i.loli.net/2020/02/28/higc8Dr32uNfMZk.png" alt=""></p>
<h2 id="基本类型作为函数的参数"><a href="#基本类型作为函数的参数" class="headerlink" title="基本类型作为函数的参数"></a>基本类型作为函数的参数</h2><p><img src="https://i.loli.net/2020/02/28/CK6gajDpGruQk1N.png" alt=""></p>
<h2 id="复杂类型作为函数的参数"><a href="#复杂类型作为函数的参数" class="headerlink" title="复杂类型作为函数的参数"></a>复杂类型作为函数的参数</h2><p><img src="https://i.loli.net/2020/02/28/Xx8UC9vHDwWPQsy.png" alt=""></p>
<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>JavaScript中的对象分为3种：内置对象、自定义对象、浏览器对象</p>
<p>JavaScript 提供多个内置对象：Math/Array/Date….</p>
<p>对象只是带有<strong>属性</strong>和<strong>方法</strong>的特殊数据类型。</p>
<p>学习一个内置对象的使用，只要学会其常用的成员的使用（通过查文档学习）</p>
<p>可以通过MDN/W3C来查询</p>
<p>内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。</p>
<h2 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h2><p>Mozilla 开发者网络（MDN）提供有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04v" title="https://developer.mozilla.org/zh-CN/">MDN<i class="fa fa-external-link"></i></span></li>
<li>通过查询MDN学习Math对象的random()方法的使用</li>
</ul>
<h2 id="如何学习一个方法？"><a href="#如何学习一个方法？" class="headerlink" title="如何学习一个方法？"></a>如何学习一个方法？</h2><ol>
<li>方法的功能</li>
<li>参数的意义和<strong>类型</strong></li>
<li>返回值意义和<strong>类型</strong></li>
<li>demo进行测试</li>
</ol>
<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p>Math对象不是构造函数，它具有数学常数和函数的属性和方法，都是以静态成员的方式提供</p>
<p>跟数学相关的运算来找Math中的成员（求绝对值，取整）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWF0aA==" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">Math<i class="fa fa-external-link"></i></span></p>
<p>演示：Math.PI、Math.random()、Math.floor()/Math.ceil()、Math.round()、Math.abs()    、Math.max()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil()---向上取整</span><br><span class="line"><span class="built_in">Math</span>.floor()---向下取整</span><br><span class="line"><span class="built_in">Math</span>.Pi----圆周率的值</span><br><span class="line"><span class="built_in">Math</span>.Max()---一组数字中的最大值</span><br><span class="line"><span class="built_in">Math</span>.Min()---一组数字中的最小值</span><br><span class="line"><span class="built_in">Math</span>.abs()----绝对值</span><br><span class="line"><span class="built_in">Math</span>.random---随机数字</span><br><span class="line"><span class="built_in">Math</span>.sqrt()----开平方</span><br><span class="line"><span class="built_in">Math</span>.pow()----一个数字的多少次幂</span><br></pre></td></tr></table></figure>

<h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>创建 <code>Date</code> 实例用来处理日期和时间。Date 对象基于1970年1月1日（世界标准时间）起的毫秒数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now.valueOf());	<span class="comment">// 获取距1970年1月1日（世界标准时间）起的毫秒数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>构造函数的参数</span><br><span class="line"><span class="number">1.</span> 毫秒数 <span class="number">1498099000356</span>		<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1498099000356</span>)</span><br><span class="line"><span class="number">2.</span> 日期格式字符串  <span class="string">'2015-5-1'</span>	 <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2015-5-1'</span>)</span><br><span class="line"><span class="number">3.</span> 年、月、日……				  <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">1</span>)   <span class="comment">// 月份从0开始</span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取日期的毫秒形式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// valueOf用于获取对象的原始值</span></span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf())	</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML5中提供的方法，有兼容性问题</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now();	</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不支持HTML5的浏览器，可以用下面这种方式</span></span><br><span class="line"><span class="keyword">var</span> now = + <span class="keyword">new</span> <span class="built_in">Date</span>();			<span class="comment">// 调用 Date对象的valueOf()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>日期格式化方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">toString()		<span class="comment">// 转换成字符串</span></span><br><span class="line">valueOf()		<span class="comment">// 获取毫秒值</span></span><br><span class="line"><span class="comment">// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用</span></span><br><span class="line">toDateString()</span><br><span class="line">toTimeString()</span><br><span class="line">toLocaleDateString()</span><br><span class="line">toLocaleTimeString()</span><br></pre></td></tr></table></figure>

<ul>
<li>获取日期指定部分</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getTime()  	  <span class="comment">// 返回毫秒数和valueOf()结果一样</span></span><br><span class="line">getMilliseconds() </span><br><span class="line">getSeconds()  <span class="comment">// 返回0-59</span></span><br><span class="line">getMinutes()  <span class="comment">// 返回0-59</span></span><br><span class="line">getHours()    <span class="comment">// 返回0-23</span></span><br><span class="line">getDay()      <span class="comment">// 返回星期几 0周日   6周6</span></span><br><span class="line">getDate()     <span class="comment">// 返回当前月的第几天</span></span><br><span class="line">getMonth()    <span class="comment">// 返回月份，***从0开始***</span></span><br><span class="line">getFullYear() <span class="comment">//返回4位的年份  如 2016</span></span><br></pre></td></tr></table></figure>

<h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><ul>
<li>写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果date不是日期对象，返回</span></span><br><span class="line">  <span class="keyword">if</span> (!date <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> year = d.getFullYear(),</span><br><span class="line">      month = d.getMonth() + <span class="number">1</span>, </span><br><span class="line">      date = d.getDate(), </span><br><span class="line">      hour = d.getHours(), </span><br><span class="line">      minute = d.getMinutes(), </span><br><span class="line">      second = d.getSeconds();</span><br><span class="line">  month = month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month;</span><br><span class="line">  date = date &lt; <span class="number">10</span> ? <span class="string">'0'</span> + date : date;</span><br><span class="line">  hour = hour &lt; <span class="number">10</span> ? <span class="string">'0'</span> + hour : hour;</span><br><span class="line">  minute = minute &lt; <span class="number">10</span> ? <span class="string">'0'</span> + minute:minute;</span><br><span class="line">  second = second &lt; <span class="number">10</span> ? <span class="string">'0'</span> + second:second;</span><br><span class="line">  <span class="keyword">return</span> year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + date + <span class="string">' '</span> + hour + <span class="string">':'</span> + minute + <span class="string">':'</span> + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>计算时间差，返回相差的天/时/分/秒</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInterval</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> day, hour, minute, second, interval;</span><br><span class="line">  interval = end - start;</span><br><span class="line">  interval /= <span class="number">1000</span>;</span><br><span class="line">  day = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">  hour = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">  minute = <span class="built_in">Math</span>.round(interval / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">  second = <span class="built_in">Math</span>.round(interval % <span class="number">60</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    day: day,</span><br><span class="line">    hour: hour,</span><br><span class="line">    minute: minute,</span><br><span class="line">    second: second</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h2><ul>
<li>创建数组对象的两种方式<ul>
<li>字面量方式</li>
<li>new Array()</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 使用构造函数创建数组对象</span></span><br><span class="line"><span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="comment">// 创建了一个数组，里面存放了3个字符串</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'zs'</span>, <span class="string">'ls'</span>, <span class="string">'ww'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用字面量创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<ul>
<li><p>检测一个对象是否是数组</p>
<ul>
<li>instanceof</li>
<li>Array.isArray()     HTML5中提供的方法，有兼容性问题</li>
</ul>
<p>函数的参数，如果要求是一个数组的话，可以用这种方式来进行判断</p>
</li>
<li><p>toString()/valueOf()</p>
<ul>
<li>toString()        把数组转换成字符串，逗号分隔每一项</li>
<li>valueOf()         返回数组对象本身</li>
</ul>
</li>
<li><p>数组常用方法</p>
<p>演示：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">instanceof关键字。</span><br><span class="line">.concat(数组,数组,数组,...) 组合一个新的数组。</span><br><span class="line">.every(函数)--返回值是布尔类型,函数作为参数使用,函数中有三个参数,第一个参数是元素的值，第二个参数是索引值,第三个参数是原来的数组(没用)如果这个数组中的每个元素的值都符合条件,最后才返回的是true。</span><br><span class="line">.filter(函数);返回的是数组中每一个元素都复合条件的元素,组成了一个新的数组。</span><br><span class="line">.push(值);---&gt;把值追加到数组中,加到最后了---返回值也是追加数据之后的数组长度。</span><br><span class="line">.pop();---&gt;删除数组中最后一个元素,返回值就是删除的这个值。</span><br><span class="line">.shift();---&gt;删除数组中第一个元素,返回值就是删除的这个值。</span><br><span class="line">.unshift();---&gt;向数组的第一个元素前面插入一个新的元素,----返回值是插入后的程度。</span><br><span class="line">.forEach(函数)方法---遍历数组用---相当于for循环。</span><br><span class="line">.indexOf(元素值);返回的是索引,没有则是-1。</span><br><span class="line">.join(&quot;字符串&quot;);----返回的是一个字符串。</span><br><span class="line">.map(函数);---&gt;数组中的每个元素都要执行这个函数,把执行后的结果重新的全部的放在一个新的数组中。</span><br><span class="line">.reverse();-----&gt;反转数组。</span><br><span class="line">.sort();---排序的,可能不稳定,如果不稳定,请写MDN中的那个固定的代码。</span><br><span class="line">.arr.slice(开始的索引,结束的索引);把截取的数组的值放在一个新的数组中,但是不包含结束的索引对应的元素值。</span><br><span class="line">.splice(开始的位置,要删除的个数,替换的元素的值);一般是用于删除数组中的元素,或者是替换元素,或者是插入元素。</span><br></pre></td></tr></table></figure>

<ul>
<li>清空数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1 推荐 </span></span><br><span class="line">arr = [];</span><br><span class="line"><span class="comment">// 方式2 </span></span><br><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 方式3</span></span><br><span class="line">arr.splice(<span class="number">0</span>, arr.length);</span><br></pre></td></tr></table></figure>

<h2 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h2><ul>
<li>将一个字符串数组输出为|分割的形式，比如“刘备|张飞|关羽”。使用两种方式实现</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myJoin</span>(<span class="params">array, seperator</span>) </span>&#123;</span><br><span class="line">  seperator = seperator || <span class="string">','</span>;</span><br><span class="line">  array = array || [];</span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> str = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    str += seperator + array[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myJoin(array, <span class="string">'-'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.join(<span class="string">'-'</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>将一个字符串数组的元素的顺序进行反转。[“a”, “b”, “c”, “d”] -&gt; [ “d”,”c”,”b”,”a”]。使用两种种方式实现。提示：第i个和第length-i-1个进行交换</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[<span class="keyword">this</span>.length - i - <span class="number">1</span>];</span><br><span class="line">    arr[arr.length - i - <span class="number">1</span>] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(myReverse(array));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array.reverse());</span><br></pre></td></tr></table></figure>

<ul>
<li>工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="number">1500</span>,<span class="number">1200</span>,<span class="number">2000</span>,<span class="number">2100</span>,<span class="number">1800</span>];</span><br><span class="line"><span class="keyword">var</span> tmpArray = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(array[i] &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">    tmpArray.push(array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(tmpArray);</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">var</span> array =  [<span class="number">1500</span>, <span class="number">1200</span>, <span class="number">2000</span>, <span class="number">2100</span>, <span class="number">1800</span>];</span><br><span class="line">array = array.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (item &lt; <span class="number">2000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure>

<ul>
<li>编写一个方法去掉一个数组的重复元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array =  [<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'a'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = array[i];</span><br><span class="line">    <span class="keyword">if</span> (o[item]) &#123;</span><br><span class="line">      o[item]++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      o[item] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> tmpArray = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o[key] == <span class="number">1</span>) &#123;</span><br><span class="line">      tmpArray.push(key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(tmpArray.indexOf(key) == <span class="number">-1</span>)&#123;</span><br><span class="line">        tmpArray.push(key);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmpArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clear(array));</span><br></pre></td></tr></table></figure>



<h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><p>为了方便操作简单数据类型，JavaScript还提供了三个特殊的简单类型类型：String/Number/Boolean</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面代码的问题？</span></span><br><span class="line"><span class="comment">// s1是基本类型，基本类型是没有方法的</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象, 相当于：</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = s1.substring(<span class="number">5</span>);</span><br><span class="line">s1 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建基本包装类型的对象</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;  				<span class="comment">//数值，基本类型</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="string">'18'</span>); 	<span class="comment">//类型转换</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">18</span>); 	<span class="comment">//基本包装类型，对象</span></span><br><span class="line"><span class="comment">// Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义。例如：</span></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> b2 = b1 &amp;&amp; <span class="literal">true</span>;		<span class="comment">// 结果是什么</span></span><br></pre></td></tr></table></figure>

<h2 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h2><ul>
<li>字符串的不可变</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span>;</span><br><span class="line">str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="comment">// 当重新给str赋值的时候，常量'abc'不会被修改，依然在内存中</span></span><br><span class="line"><span class="comment">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class="line"><span class="comment">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建字符串对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'Hello World'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符串中字符的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>字符串对象的常用方法</p>
<p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.length------&gt;字符串的长度。</span><br><span class="line">.charAt(索引),返回值是指定索引位置的字符串,超出索引,结果是空字符串。</span><br><span class="line">.fromCharCode(数字值,可以是多个参数),返回的是ASCII码对应的值。</span><br><span class="line">.concat(字符串1,字符串2,...);返回的是拼接之后的新的字符串。</span><br><span class="line">.indexOf(要找的字符串,从某个位置开始的索引);返回的是这个字符串的索引值,没找到则返回-1。</span><br><span class="line">.lastIndexOf(要找的字符串);从后向前找,但是索引仍然是从左向右的方式,找不到则返回-1。</span><br><span class="line">.replace(&quot;原来的字符串&quot;,&quot;新的字符串&quot;);用来替换字符串的。</span><br><span class="line">.slice(开始的索引,结束的索引); 从索引5的位置开始提取,到索引为10的前一个结束,没有10，并返回这个提取后的字符串。</span><br><span class="line">.split(&quot;要干掉的字符串&quot;,切割后留下的个数);切割字符串。</span><br><span class="line">.substr(开始的位置,个数);返回的是截取后的新的字符串。</span><br><span class="line">.substring(开始的索引,结束的索引),返回截取后的字符串,不包含结束的索引的字符串</span><br><span class="line">.toLocaleLowerCase();转小写。</span><br><span class="line">.toLowerCase();转小写。</span><br><span class="line">.toLocaleUpperCase()转大写。</span><br><span class="line">.toUpperCase();转大写。</span><br><span class="line">.trim();干掉字符串两端的空格。</span><br></pre></td></tr></table></figure>

<ul>
<li>获取url中?后面的内容，并转化成对象的形式。例如：<span class="exturl" data-url="aHR0cDovL3d3dy5pdGhlaW1hLmNvbS9sb2dpbj9uYW1lPXpzJmFtcDthZ2U9MTgmYW1wO2E9MSZhbXA7Yj0y" title="http://www.itheima.com/login?name=zs&amp;age=18&amp;a=1&amp;b=2">http://www.itheima.com/login?name=zs&amp;age=18&amp;a=1&amp;b=2<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.itheima.com/login?name=zs&amp;age=18&amp;a=1&amp;b=2'</span>;</span><br><span class="line"><span class="comment">// 获取url后面的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParams</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取? 后面第一个字符的索引</span></span><br><span class="line">  <span class="keyword">var</span> index = url.indexOf(<span class="string">'?'</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// url中?后面的字符串 name=zs&amp;age=18&amp;a=1&amp;b=2</span></span><br><span class="line">  <span class="keyword">var</span> params = url.substr(index);</span><br><span class="line">  <span class="comment">// 使用&amp; 切割字符串 ，返回一个数组</span></span><br><span class="line">  <span class="keyword">var</span> arr = params.split(<span class="string">'&amp;'</span>);</span><br><span class="line">  <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 数组中每一项的样子 key = value</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmpArr = arr[i].split(<span class="string">'='</span>);</span><br><span class="line">    <span class="keyword">var</span> key = tmpArr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> value = tmpArr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    o[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = getParams(url);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(obj.age);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2020/02/28/git/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/6aw1WLDotVxhvyu.jpg
" style="zoom: 30%;"/>

<p>github 和 git 的使用，偏小白</p>
</center>
<a id="more"></a>

<h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="仓库（Repository）"><a href="#仓库（Repository）" class="headerlink" title="仓库（Repository）"></a>仓库（Repository）</h3><p>仓库用来存放项目代码，每个项目对应一个仓库，多个开源项目则有多个仓库</p>
<h3 id="收藏（Star）"><a href="#收藏（Star）" class="headerlink" title="收藏（Star）"></a>收藏（Star）</h3><p>收藏项目，方便下次查看</p>
<h3 id="复制克隆项目（Fork）"><a href="#复制克隆项目（Fork）" class="headerlink" title="复制克隆项目（Fork）"></a>复制克隆项目（Fork）</h3><p><img src="https://i.loli.net/2020/02/28/KVAjWiSQ5J4zt8q.jpg" alt=""></p>
<p>脚下留心：该fork的项目时独立存在的</p>
<h3 id="发起请求（Pull-Request）"><a href="#发起请求（Pull-Request）" class="headerlink" title="发起请求（Pull Request）"></a>发起请求（Pull Request）</h3><p><img src="https://i.loli.net/2020/02/28/8uN4zkOPvZpsJ3A.jpg" alt=""></p>
<h3 id="关注（Watch）"><a href="#关注（Watch）" class="headerlink" title="关注（Watch）"></a>关注（Watch）</h3><p>关注项目，当项目更新可以接收到通知</p>
<h3 id="事务卡片（Issue）"><a href="#事务卡片（Issue）" class="headerlink" title="事务卡片（Issue）"></a>事务卡片（Issue）</h3><p>发现代码BUG，但是目前没有成型代码，需要讨论时用；</p>
<h3 id="仓库主页说明"><a href="#仓库主页说明" class="headerlink" title="仓库主页说明"></a>仓库主页说明</h3><p><img src="https://i.loli.net/2020/02/28/os8r7eD5EWtYxRc.jpg" alt=""></p>
<h3 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h3><p>情景：张三修改了fork的项目中的文件，希望更新到原来的仓库，这时候他要新建一个pull request</p>
<p><img src="https://i.loli.net/2020/02/28/pnfr7B6LYuGtahI.jpg" alt=""></p>
<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="Git工作区域"><a href="#Git工作区域" class="headerlink" title="Git工作区域"></a>Git工作区域</h2><p><img src="https://i.loli.net/2020/02/28/ZY3LghSBjTV1DiE.jpg" alt=""></p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li><p><code>设置用户名：git config --global user.name &#39;name&#39;</code></p>
<p><code>设置用户名邮箱：git config --global user.email &#39; &#39;</code></p>
</li>
<li><p><code>初始化工作区</code>：<code>git init</code></p>
</li>
</ul>
<h3 id="过滤文件"><a href="#过滤文件" class="headerlink" title="过滤文件"></a>过滤文件</h3><blockquote>
<p><code>.gitignore 文件夹</code>：<code>git</code>忽略文件，忽略配置项，哪些文件不需要提交到 git 上就可以在这里进行忽略</p>
<p><code>vim .gitignore</code>: 新增以及编写这个文件 </p>
<p>此外，git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules&#x2F;  ---&gt; 过滤整个文件夹</span><br><span class="line">*.zip		---&gt; 过滤zip后缀文件</span><br><span class="line">demo.html   过滤该文件</span><br><span class="line"></span><br><span class="line">!src&#x2F;   不过滤该文件夹</span><br><span class="line">!*.js   不过滤java源文件</span><br><span class="line">!index.html 不过滤该文件</span><br></pre></td></tr></table></figure>



<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li><p><code>创建文件：touch file.txt</code></p>
</li>
<li><p><code>添加文件到暂存区： git add file.txt</code></p>
<p><code>将所有需要添加的文件添加到暂存区：git add ./</code></p>
</li>
<li><p><code>将文件从暂存区提交到仓库：git commit -m &#39;添加描述&#39;</code></p>
<p><code>将所有修改的文件直接放到仓库中：git commit --all -m &#39;描述&#39;</code></p>
</li>
</ul>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><ul>
<li><p><code>查看当前文件状态：git status</code></p>
</li>
<li><p><code>查看日志：git log</code></p>
<p><code>查看简洁版的日志：git log --oneline</code></p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/02/28/c4sEy6BTNhxQvkz.png" alt=""></p>
<h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><ul>
<li><p><code>回退到指定的版本：git reset --hard Head~0 代表上次，1代表上上次</code></p>
<p><code>通过版本号回退：git reset --hard [版本号]</code></p>
</li>
<li><p><code>查看切换版本的记录：git reflog</code></p>
</li>
</ul>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul>
<li><code>创建分支：git branch name</code></li>
<li><code>查看分支：git branch</code></li>
<li><code>切换分支：git checkout name</code></li>
<li><code>合并分支：git merge name</code></li>
<li><code>删除分支：git branch -d name</code></li>
</ul>
<h3 id="连接github"><a href="#连接github" class="headerlink" title="连接github"></a>连接github</h3><ul>
<li><p>上传当前分支代码：<code>git push github仓库 HTTPS 地址 master</code></p>
<p>当我们在 <code>push/pull</code> 时，加上<code>-u</code>参数，那么在下一次<code>push/pull</code>时，我们只需要写<code>git push/pull</code>就能上传/下载代码(加上<code>-u</code>之后，git会把当前分支与远程的指定分支进行关联)</p>
<p><code>git push -f</code>:表示将目前自己本机的代码库推送到远端，并覆盖</p>
</li>
<li><p>生成变量：<code>git remote add name github仓库HTTPS地址</code></p>
<p>相当于 <code>name = github 仓库HTTPS地址</code>，只在本地当前文件夹生效，其他地方不可用</p>
</li>
<li><p>下载到本地：<code>git pull github仓库HTTPS地址 master</code> （本地要初始一个仓库，多次执行会合并处理）</p>
</li>
<li><p>克隆到本地：<code>git clone github仓库HTTPS地址 --depth=1</code> (多次执行会覆盖本地内容)</p>
</li>
<li><p>下载中可以加上 <code>--depth=1</code> 表示只下载最后一次的 commit，其他历史记录不要，这样可以提高下载速度</p>
</li>
<li><p>如果服务器版本和本地版本不同时，先pull，在本地解决冲突后再push到服务器中。</p>
</li>
</ul>
<h4 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h4><p>创建<code>ssh</code>钥匙：<code>ssh-keygen -t rsa -C &quot;736755736@qq.com&quot;</code></p>
<p>路径：C:\Users\Administrator.ssh</p>
<p><code>id_rsa</code>：私钥，<code>id_rsa.pub</code>：公钥</p>
<p>点击 github 头像 –&gt; settings  –&gt; SSH and GPG keys  –&gt;  New SSH key –&gt;将复制的公钥里的内容粘贴到 Key 中–&gt;生成</p>
<p>上传当前分支代码：<code>git push github 仓库SSH地址 master</code> (不用输入账号密码)</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap4 文档</title>
    <url>/2020/02/28/bootstrap%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<center><img src="https://i.loli.net/2020/02/28/esD2TLKx4uczZyr.jpg" style="zoom: 70%;"/>

<p>bootstrap4 的学习文档，仅供参考学习使用</center></p>
<a id="more"></a>

<p>Bootstrap是当前世界最受欢迎的响应式、移动设备优先的门户和应用前端框架。</p>
<p>(1) Bootstrap: <span class="exturl" data-url="aHR0cHM6Ly9nZXRib290c3RyYXAuY29tLw==" title="https://getbootstrap.com/">https://getbootstrap.com/<i class="fa fa-external-link"></i></span></p>
<p>(2) jQuery: <span class="exturl" data-url="aHR0cDovL2pxdWVyeS5jb20v" title="http://jquery.com/">http://jquery.com/<i class="fa fa-external-link"></i></span></p>
<p>(3) <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvdHJlZS8zLjMuMQ==" title="https://github.com/jquery/jquery/tree/3.3.1">https://github.com/jquery/jquery/tree/3.3.1)<i class="fa fa-external-link"></i></span>)</p>
<p>(3) Popper.js: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvcmVsZWFzZXM=" title="https://github.com/FezVrasta/popper.js/releases">https://github.com/FezVrasta/popper.js/releases<i class="fa fa-external-link"></i></span></p>
<p>(下拉菜单dropdowns、提示组件popovers、冒泡组件等都提依赖于Popper.js)</p>
<p>IE浏览器支持：</p>
<p>支持<strong>Internet Explorer 10</strong>及更高版本，不支持IE9（即使大多兼容，我们依然不推荐）。</p>
<p>请注意，IE10中不完全支持某些CSS3属性和HTML5元素，或者需要前缀属性才能实现完整的功能。</p>
<p>如果您需要IE8-9支持，请使用Bootstrap 3 ，它是我们代码中最稳定的版本，官方不再发布新版，但仍然支持严重错误修复和文档维护。</p>
<p>(更多兼容性参考：<span class="exturl" data-url="aHR0cHM6Ly9nZXRib290c3RyYXAuY29tL2RvY3MvNC4zL2dldHRpbmctc3RhcnRlZC9icm93c2Vycy1kZXZpY2VzLw==" title="https://getbootstrap.com/docs/4.3/getting-started/browsers-devices/">https://getbootstrap.com/docs/4.3/getting-started/browsers-devices/)<i class="fa fa-external-link"></i></span>)</p>
<p>重要提示：</p>
<ol>
<li>响应式meta标签</li>
</ol>
<p>移动设备优先, Bootstrap 4 不同于历史版本，它首先为移动设备优化代码，然后用CSS媒体查询来扩展组件。为了确保所有的设备的渲染和触摸效果，必须在网页的<head>区添加响应式的视图标签，简要的说就是优先引入下面一行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>HTML5 doctype头部规范</li>
</ol>
<p>HTML5标准的 doctype 头部定义是首要的，否则会导致样式失真（对搜索引擎和浏览器友好）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//英文是en，zh-CN是默认中文网页</span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="container容器"><a href="#container容器" class="headerlink" title="container容器"></a>container容器</h2><p>我们推荐所有样式都定义在.container或.container-fluid容器之中– <strong>这是启用整个栅格系统必不可少的前置条件</strong>，它们分别对应选择一个响应式的、固定宽度的容器。</p>
<ul>
<li><p>container：容器可以被嵌套，但是大多数布局并不需要这么做（最少层次的嵌套构建出的网页更优雅）</p>
</li>
<li><p>container-fluid 类，可以使div宽度扩展到整个宽度（如果没有被其它CSS容器包含，则应是浏览器运行时的宽度，否则应是父容器中允许的最大宽度，一般视为100%宽度）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Content here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Content here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2><p>Bootstrap包含了一个强大的移动优先的网格系统，它是基于一个<strong>12列</strong>的布局、有5种响应尺寸(对应不同的屏幕)。Bootstrap4是完全基于flexbox流式布局构建的，完全支持响应式标准。分界点大小：576px、768px、992px、1200px</p>
<table>
<thead>
<tr>
<th></th>
<th>特小 &lt;576px</th>
<th>Small ≥576px</th>
<th>Medium ≥768px</th>
<th>Large ≥992px</th>
<th>特大 ≥1200px</th>
</tr>
</thead>
<tbody><tr>
<td><code>.container</code></td>
<td>100%</td>
<td>540像素</td>
<td>720px</td>
<td>960像素</td>
<td>1140px</td>
</tr>
<tr>
<td><code>.container-sm</code></td>
<td>100%</td>
<td>540像素</td>
<td>720px</td>
<td>960像素</td>
<td>1140px</td>
</tr>
<tr>
<td><code>.container-md</code></td>
<td>100%</td>
<td>100%</td>
<td>720px</td>
<td>960像素</td>
<td>1140px</td>
</tr>
<tr>
<td><code>.container-lg</code></td>
<td>100%</td>
<td>100%</td>
<td>100%</td>
<td>960像素</td>
<td>1140px</td>
</tr>
<tr>
<td><code>.container-xl</code></td>
<td>100%</td>
<td>100%</td>
<td>100%</td>
<td>100%</td>
<td>1140px</td>
</tr>
<tr>
<td><code>.container-fluid</code></td>
<td>100%</td>
<td>100%</td>
<td>100%</td>
<td>100%</td>
<td>100%</td>
</tr>
</tbody></table>
<p><img src="https://i.loli.net/2020/02/28/K8IWiotax5Us6pn.png" alt=""></p>
<h3 id="自动布局列"><a href="#自动布局列" class="headerlink" title="自动布局列"></a>自动布局列</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>占一行显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>占一行显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>多个元素一行显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>占一行中的3份<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>自适应占一行中的9份<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>内容自适应</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-auto"</span>&gt;</span>随内容的变化而变化<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>插入.w-100要将列拆分为新行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"w-100"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>混合布局，在不同分辨率下显示不同的布局。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6 col-lg-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6 col-lg-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>垂直对齐</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//在row上加 .align-items-start/center/end,实现row中所有元素上中下对齐</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row align-items-start/center/end"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//在col中加，实现当前元素的对齐方式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col align-items-start/center/end"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col align-items-start/center/end"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>水平对齐</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//justify-content-start/center/end/around(等距对齐)/between(两端对齐)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-center"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>清除边距：<code>no-gutters</code></p>
<h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><ul>
<li>顺序重定义</li>
</ul>
<blockquote>
<p>order-*(1-12),默认是0，数值越小，排序越靠前。</p>
<p>order-first的值是-1.</p>
</blockquote>
<ul>
<li><p>偏移</p>
<ol>
<li><p><code>offset-md-*</code>：使列向右偏移*列</p>
</li>
<li><p><code>ml-auto</code>：当前列向右偏移。<code>mr-auto</code>：向左偏移</p>
</li>
</ol>
</li>
</ul>
<h3 id="禁用响应式"><a href="#禁用响应式" class="headerlink" title="禁用响应式"></a>禁用响应式</h3><p>样式不会随着分辨率的变化而变化。有四种方式：</p>
<ol>
<li><p>给容器设定固定宽度。</p>
<p>如.container {width: 980px;}</p>
</li>
<li><p>栅格布局使用<code>col-*</code>而不是<code>col-sm-*</code>的方式。</p>
</li>
<li><p>移除设置浏览器视口（viewport）的标签：<code>&lt;meta&gt;</code>。</p>
</li>
<li><p>如果使用了导航条，需要移除所有导航条的折叠和展开行为。</p>
</li>
</ol>
<h3 id="响应式的分界点"><a href="#响应式的分界点" class="headerlink" title="响应式的分界点"></a>响应式的分界点</h3><p>基于视口宽度的最小值来设置元素在不同的设备上的呈现效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Extra small devices (portrait phones, less than 576px)</span></span><br><span class="line"><span class="comment">No media query since this is the default in Bootstrap </span></span><br><span class="line"><span class="comment">Small devices (landscape phones, 576px and up)*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">576px</span>(大小可指定)) &#123; ... &#125;</span><br><span class="line"><span class="comment">/*Medium devices (tablets, 768px and up)*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>) &#123; ... &#125;</span><br><span class="line"><span class="comment">/*Large devices (desktops, 992px and up)*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">992px</span>) &#123; ... &#125;</span><br><span class="line"><span class="comment">/*Extra large devices (large desktops, 1200px and up)*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1200px</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*或者是这种写法：*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">576px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">767px</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">	<span class="selector-class">.topTt</span> &#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line">	@media(min-width: 576px)&#123;</span><br><span class="line">		<span class="selector-class">.topTt</span> &#123;<span class="attribute">font-size</span>:<span class="number">20px</span>;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	@media(min-width: 992px)&#123;</span><br><span class="line">		<span class="selector-class">.topTt</span> &#123;<span class="attribute">font-size</span>:<span class="number">30px</span>;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><ul>
<li><p>标题</p>
<p>h1-h6</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span>h1标题样式显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>标题备注</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span></span><br><span class="line">    h1标题样式显示</span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span></span><br><span class="line">        副标题副标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/02/28/VkjCvFozgcdQNP3.png" style="zoom:67%;" />

<ul>
<li><p>显示标题</p>
<p>一种更大型、鲜明的标题样式。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- display-(1-4) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"display-1"</span>&gt;</span>更大的标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>lead中心内容</p>
<p>用于提示这是中心内容或重要内容。（字体会变大）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>苹果苹果苹果苹果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>香蕉香蕉香蕉香蕉<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/CJjEwZIVNkaQ1Ds.png" alt=""></p>
<ul>
<li>文本内联元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>看看我是不是<span class="tag">&lt;<span class="name">mark</span>&gt;</span>高亮<span class="tag">&lt;/<span class="name">mark</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>看看我是不是<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span>高亮<span class="tag">&lt;/<span class="name">span</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>小号字小号字小号字<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span>小号字小号字小号字<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线删除线删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线删除线删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线下划线下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线下划线下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>粗体粗体粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体粗体粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体斜体斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体斜体斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

 <img src="https://i.loli.net/2020/02/28/e7RoLON4ljb2ZfK.png" style="zoom: 80%;" />

<ul>
<li>abbr缩略语</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- title设置鼠标悬停提示信息，class="initialism"设置小写转大写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"请填写您的邮箱"</span> <span class="attr">class</span>=<span class="string">"initialism"</span>&gt;</span></span><br><span class="line">        email</span><br><span class="line">    <span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/wePFgxhT2Dl57dH.png" alt=""></p>
<ul>
<li><p>blockquote 引用与来源备注</p>
<p>引用文档中另一个来源的内容块</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote text-right"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mb-0"</span>&gt;</span>爱上一个地方，就应该背上包去旅游，走得更远。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于标识来源，一般用于页脚 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"blockquote-footer"</span>&gt;</span></span><br><span class="line">		出自商务印书馆的<span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"SourchTitle"</span>&gt;</span>《新华字典》<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;cite&gt; 标签通常表示它所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- text-right左对齐, mb-0去除p标签边距--&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/b5cxDTJXCoI48th.png" alt=""></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li><p>列表样式初始化</p>
<p><code>list-unstyled</code>可以删除列表项目上默认的list-style以及左外边距（只针对直接子元素），这只生效于在直接子列表项目上，不影响你嵌套的子列表。</p>
</li>
<li><p>分行或单行多列并排</p>
<p><code>.list-inline</code>可以实现列表逐行显示，并清除样式（默认不引用且无父元素影响也是逐行显示）</p>
<p><code>.list-inline-item</code>单行并多列并排，并清除样式（遵循从左对右的原则、并清除margin方法）。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;ul class="list-inline"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-inline"</span>&gt;</span>列表111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>文本一行内显示（省略点）</p>
<p><code>.text-truncate</code>用省略号截断文本。</p>
</li>
<li><p>dl 表格水平显示</p>
<p>性别和男会显示在一行上。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span> <span class="attr">class</span>=<span class="string">"col-md-2"</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">"col-md-10"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li><p>内联代码</p>
<p>用 <code>&lt;code&gt;</code> 包裹内联代码片断，勿忘转义HTML尖括号。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>section<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/02/28/t5NucKj3YU8GVCE.png" alt=""></p>
<ul>
<li>代码块</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span>Sample text here...<span class="symbol">&amp;lt;</span>/p<span class="symbol">&amp;gt;</span></span><br><span class="line">  <span class="symbol">&amp;lt;</span>p<span class="symbol">&amp;gt;</span>And another line of sample text here...<span class="symbol">&amp;lt;</span>/p<span class="symbol">&amp;gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/02/28/g8513AKwhMbOlVk.png" alt=""></p>
<ul>
<li><p>var 变量</p>
<p>推荐使用 <var>标签包裹标示变量。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">y = mx + b <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>y<span class="tag">&lt;/<span class="name">var</span>&gt;</span> = <span class="tag">&lt;<span class="name">var</span>&gt;</span>m<span class="tag">&lt;/<span class="name">var</span>&gt;</span><span class="tag">&lt;<span class="name">var</span>&gt;</span>x<span class="tag">&lt;/<span class="name">var</span>&gt;</span> + <span class="tag">&lt;<span class="name">var</span>&gt;</span>b<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/lDGWTJ82smQV6LP.png" alt=""></p>
<ul>
<li><p>键盘动作提示</p>
<p>使用<code>&lt;kbd&gt;</code>标签，标明这是一个键盘输入操作。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">To switch directories, type <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>cd<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> followed by the name of the directory.<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">To edit settings, press <span class="tag">&lt;<span class="name">kbd</span>&gt;</span><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> + <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>,<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/02/28/YIprHgci1j25a9d.png" alt=""></p>
<ul>
<li><p>实例标注</p>
<p><code>&lt;samp&gt;</code> 标签代表这是一个示例。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">这是一个代码示例. <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>这是一个代码示例.<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/02/28/gQyxCR7jTWI5DSm.png" alt=""></p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul>
<li><p>响应式图片&amp;缩略图处理</p>
<p>给图片添加<code>.img-fluid</code>样式，或定义<code>max-width: 100%</code>、<code>height:auto;</code>样式，即可赋得响应式特性，图片大小会随着父元素大小同步缩放。(<code>w-100</code>使图片占满元素)</p>
<p><code>.img-thumbnail</code>使图片自动被加上一个带圆角且1px边界的外框缩略图样式（你也可以使用系统提供的边隙间距方法，如.p-1再加上边框颜色定义达成）。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-4"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/lg.jpg"</span> <span class="attr">class</span>=<span class="string">"img-fluid"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-4"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/sm.jpg"</span> <span class="attr">class</span>=<span class="string">"w-100 img-fluid"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-4"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/lg.jpg"</span> <span class="attr">class</span>=<span class="string">"img-fluid img-thumbnail"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2020/02/28/s9IMRZyb4VLiaed.png" style="zoom: 33%;" />

<ul>
<li><p>图像对齐处理</p>
<p><code>float-left</code>、<code>float-right</code>设置图片左右浮动。父元素<code>clearfix</code>清除浮动带来的影响。<code>rounded</code>设置图片的圆角效果。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #F00;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/sm.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"rounded float-left"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/sm2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"rounded float-right"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    <img src="https://i.loli.net/2020/02/28/MOriwsG6eJT5xNl.png" style="zoom: 33%;" /></p>
<p><code>d-block</code>将图片设置成块级元素，<code>mx-auto</code>再设置图片居中显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid #F00;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/sm.jpg"</span> <span class="attr">class</span>=<span class="string">"rounded d-block mx-auto"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 还可以直接给div设置text-center，也能实现图片居中显示 --&gt;</span></span><br></pre></td></tr></table></figure>

 <img src="https://i.loli.net/2020/02/28/EGbxTQdVk3zoLHN.png" style="zoom: 33%;" />

<ul>
<li><p>picture 元素</p>
<p>指定图片在不同分辨率下的显示效果</p>
<p>HTML5标准提供了一个全新的<code>&lt;picture&gt;</code> 元素，它可以为 <code>&lt;img&gt;</code>指定多个<code>&lt;source&gt;</code> 定义，请确保在<code>&lt;img&gt;</code> 标签里使用使用<code>.img-* CSS</code>样式进行定义绑定，而不是仅仅认为引用了 <code>&lt;img&gt;</code> 就达成了。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不同分辨率下显示的图片不一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"images/lg.jpg"</span>  <span class="attr">media</span>=<span class="string">"(min-width: 992px)"</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"images/md.jpg"</span>  <span class="attr">media</span>=<span class="string">"(min-width: 576px)"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/sm.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>图文框</p>
<p>如果你需要显示的内容区包括了一个图片和一个可选的标题，可使用<code>.figure</code>样式定义图片。<code>.figure-caption</code>定义标题。</p>
<p>默念认的图片系统不会定义明确的大小，因此请务必将该.img-fluid类添加到您的<code>&lt;img&gt;</code>标签中才能实现与响应式的完美结合。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">"figure"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/l.jpg"</span> <span class="attr">class</span>=<span class="string">"img-fiuid figure-img rounded"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">figcaption</span> <span class="attr">class</span>=<span class="string">"figure-caption text-center"</span>&gt;</span>我是刘德华<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure>

 <img src="https://i.loli.net/2020/02/28/cQxUo1SCj8uqJBO.png" style="zoom: 50%;" />

<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>向某个<code>&lt;table&gt;</code>添加一个基类.table。任何嵌套表格都将以与父类型相同的方式进行样式化。</p>
<p> <img src="https://i.loli.net/2020/02/28/DjJUHLintdGNOB6.png" alt=""></p>
<ul>
<li><p>主题</p>
<p><code>table-dark/danger</code>为<code>&lt;table&gt;</code>添加主题变成黑色或红色。</p>
</li>
<li><p>表头</p>
<p><code>thead-light/dark</code>使表头<code>&lt;thead&gt;</code>区显示出浅黑或深灰。</p>
</li>
<li><p>条纹状表格</p>
<p>为<code>&lt;tbody&gt;</code>定义<code>table-striped</code>，可同<code>table-dark</code>结合使用</p>
</li>
<li><p>边框</p>
<p><code>table-bordered</code>定义<code>&lt;table&gt;</code></p>
<p><code>table-borderless</code>无边框</p>
</li>
<li><p>行悬停效果</p>
<p><code>table-hover</code>定义<code>&lt;table&gt;</code></p>
</li>
<li><p>紧缩表格</p>
<p><code>table-sm</code>定义<code>&lt;table&gt;</code>可以将表格的padding值缩减一半，使表格更加紧凑。</p>
</li>
<li><p>表格辅助标题</p>
<p><code>&lt;caption&gt;</code> 标签如同一个表格的标题，它默认是隐藏的，可以协助屏幕阅读器用户找到表格、了解表格内容，且决定是否需要阅读它。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加在table和thead之间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>List of users<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>语义状态化</p>
<p>使用语义状态样式对表格逐行或单个单元格进行着色表达。</p>
<ul>
<li><p>table-active</p>
</li>
<li><p>table-primary</p>
</li>
<li><p>table-secondary</p>
</li>
<li><p>table-success</p>
</li>
<li><p>table-danger</p>
</li>
<li><p>table-warning</p>
</li>
<li><p>table-info</p>
</li>
<li><p>table-light</p>
</li>
<li><p>table-dark</p>
<p><img src="https://i.loli.net/2020/02/28/M25z7RBWZdumGVL.png" alt=""></p>
</li>
</ul>
<p><strong>深色</strong>表格上没有固定的背景，你可以使用 文字或背景通用样式 获得类似的样式：</p>
<ul>
<li><p>bg-primary</p>
</li>
<li><p>bg-success</p>
</li>
<li><p>bg-warning</p>
</li>
<li><p>bg-danger</p>
</li>
<li><p>bg-info</p>
<p><img src="https://i.loli.net/2020/02/28/EfpMslwcP3KOQS7.png" alt=""></p>
</li>
</ul>
</li>
<li><p>响应式表格</p>
<p>当表格想要始终呈现水平滚动，可在<code>.table</code>上加入<code>.table-responsive</code>获得响应式表现。也可以在<code>.table</code>上，加 <code>.table-responsive{-sm|-md|-lg|-xl}</code>属性来定义多屏幕尺寸响应支持。</p>
<p> <img src="https://i.loli.net/2020/02/28/bdLH7NoSeRDtsx6.png" alt=""></p>
</li>
</ul>
<h1 id="公共样式"><a href="#公共样式" class="headerlink" title="公共样式"></a>公共样式</h1><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><ul>
<li><p>添加边框</p>
<p><code>border、border-top、border-right、border-left、border-bottom</code>为元素添加边框属性，显示指定边框。</p>
<p><img src="https://i.loli.net/2020/02/28/onBNqQxLvb6Ig79.png" alt=""></p>
</li>
<li><p>删除边框</p>
<p><code>border-0、border-top-0、border-right-0、border-bottom-0、border-left-0</code>删除或显示特定边框定义方法。</p>
<p><img src="https://i.loli.net/2020/02/28/f3ZEDY15Pxe4r7y.png" alt=""></p>
</li>
<li><p>边框颜色</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- border-secondary/success/danger/warning/info/light/dark/white --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"border border-secondary"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/BL7o3DfYiyE2XKJ.png" alt=""></p>
<ul>
<li><p>圆角边框</p>
<p><code>.rounded、rounded-top、rounded-right、rounded-bottom、rounded-left</code></p>
<p> <img src="https://i.loli.net/2020/02/28/N6Ia13mciXg5y2C.png" alt=""></p>
<p><code>rounded-circle、rounded-pill</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"border border-secondary rounded-circle"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"border border-danger rounded-circle"</span> <span class="attr">style</span>=<span class="string">"width: 120px"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"border border-success rounded-pill"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"border border-danger rounded-pill"</span> <span class="attr">style</span>=<span class="string">"width: 120px"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/lKtnZFOfoW5Vcs3.png" alt=""></p>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><ul>
<li><p>文本颜色</p>
<p>text-primary/secondary/success/danger/warning/info/light /dark/muted/white 在p标签中的效果，在a链接中使用会有悬停和焦点状态（除了<code>.text-white .text-muted</code>这两个没有链接样式）</p>
<p><img src="https://i.loli.net/2020/02/28/nACuEi4IPc12HOJ.png" alt=""></p>
</li>
<li><p>背景颜色</p>
<p><code>bg-primary/secondary/success/danger/warning/info/light /dark/white</code> 在p标签中的效果</p>
 <img src="https://i.loli.net/2020/02/28/5cX7REANFqGaovf.png" style="zoom: 67%;" />

</li>
</ul>
<h2 id="display-显示属性"><a href="#display-显示属性" class="headerlink" title="display 显示属性"></a>display 显示属性</h2><ul>
<li><p>display类格式：.d{-sm/md/lg/xl}-{value}</p>
<p>display常用属性(value)：none、inline、inline-block、block、table、table-cell、table-row、flex、inline-flex。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 转行内属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-inline"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-inline"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 隐藏和显示属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-none"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-block"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 .d-print-&#123;value&#125; 样式来改变相应值处理呈现效果。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"d-print-none"</span>&gt;</span>bbbbbb<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- 打印的时候隐藏 --&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><ul>
<li><p>文本对齐</p>
<p><code>text{-sm/md/lg/xl}-left/center/right/justify</code>样式类轻松地将文本重新对齐到组件。（<code>justify</code>调整使全行排满）</p>
</li>
<li><p>文本包裹和溢出（换行）处理</p>
<p><code>.text-nowrap</code>样式类可以防止文本换行。</p>
<p> <img src="https://i.loli.net/2020/02/28/thgPvfOaCb14qZl.png" alt=""></p>
<p><code>.text-truncate</code>以省略号截断文本（需要结合 <code>display: inline-block</code> 或 <code>display: block</code>来使用）。</p>
<p> <img src="https://i.loli.net/2020/02/28/ABmHStWYfkjTz7I.png" alt=""></p>
</li>
<li><p>字母大小写转换</p>
<p><code>text-lowercase</code>：转小写。</p>
<p><code>text-uppercase</code>：转大写。</p>
<p><code>text-capitalize</code>：首字母转大写。</p>
<p> <img src="https://i.loli.net/2020/02/28/QD5sPg6laAfCxhU.png" alt=""></p>
</li>
<li><p>粗体和斜体</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 粗体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"font-weight-bold"</span>&gt;</span>Bold text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正常 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"font-weight-normal"</span>&gt;</span>Normal weight text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 小号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"font-weight-light"</span>&gt;</span>Light weight text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"font-italic"</span>&gt;</span>Italic text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/pZh1XgOrFL76tB5.png" alt=""></p>
<ul>
<li><p>等宽字体</p>
<p>将选择更改为我们的等宽字体堆栈.text-monospace。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is in monospace. 这是等宽。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-monospace"</span>&gt;</span>This is in monospace. 这是等宽。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/CM7ZsoDNVrzqpUb.png" alt=""></p>
</li>
</ul>
</li>
</ul>
<h2 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a>垂直对齐</h2><p>使用 <code>vertical-alignment</code> 通用样式改变元素的对齐，注意：垂直对齐仅影响 内联<code>inline</code>、 内联块<code>inline-block</code>、 内联表<code>inline-table</code>、 表格单元格<code>table cell</code> 元素。</p>
<p>可选属性有：<code>.align-baseline、.align-top、.align-middle、.align-bottom、.align-text-bottom、.align-text-top。</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">访问<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.web-666.com"</span>&gt;</span>网战天下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>观看更多精品教程。</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"align-top"</span>&gt;</span>点击观看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/txNvhb5DBFqaOAm.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--table cells表格单元格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>top<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-middle"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"align-bottom"</span>&gt;</span>bottom<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/dYIXnHgjrZ9vRlb.png" alt=""></p>
<h2 id="规格和尺寸"><a href="#规格和尺寸" class="headerlink" title="规格和尺寸"></a>规格和尺寸</h2><p>宽度和高度可以用<code>.w/h-25/50/75/100</code>产生，包括 25%、50%、75%、 100%。</p>
<p><code>.mw-100、.mh-100</code>产生<code>max-width: 100%;</code> 和 <code>max-height: 100%;</code></p>
<p> <img src="https://i.loli.net/2020/02/28/oshyuq2NMzkYBvF.png" alt=""></p>
<p> <img src="https://i.loli.net/2020/02/28/xIFt6HKEPjy3QXT.png" alt=""></p>
<h2 id="间隔"><a href="#间隔" class="headerlink" title="间隔"></a>间隔</h2><p>对于xs屏幕，使用固定格式<code>{property}{sides}-{size}</code> 命名CSS方法，对于sm、md、lg、xl使用<code>{property}{sides}-{breakpoint}-{size}</code>格式命名CSS方法。</p>
<ul>
<li><p>属性(property)：</p>
<p>m - 这个Class属性会设定 margin值。</p>
<p>p - 这个Class属性会设定 padding值。</p>
</li>
<li><p>边缘(sides) 设定：</p>
<p>t - 这个Class属性会设定 margin-top 或 padding-top</p>
<p>b - 这个Class属性会设定 margin-bottom 或 padding-bottom</p>
<p>l - 这个Class属性会设定 margin-left 或 padding-left</p>
<p>r - 这个Class属性会设定 margin-right 或 padding-right</p>
<p>x - 这个Class属性会设定 *-left 和 *-right两个值。</p>
<p>y - 这个Class属性会设定 *-top 和 *-bottom两个值</p>
<p>空白 - 这个Class属性会设定 margin 或 padding 元素的四个边。</p>
</li>
<li><p>尺寸(size) 规格定义：</p>
<p>0 - 这个Class属性会设定 margin 或 padding 的样式值为 0</p>
<p>1 - (默认时)这个Class属性会设定 margin 或 padding 以 $spacer * .25规格呈现</p>
<p>2 - (默认时) 这个Class属性会设定 margin 或 padding 以 $spacer * .5规格呈现</p>
<p>3 - (默认时)这个Class属性会设定 margin 或 padding 以 $spacer * 1规格呈现</p>
<p>4 - (默认时) 这个Class属性会设定margin 或 padding 以 $spacer * 1.5规格呈现</p>
<p>5 - (默认时)这个Class属性会设定 margin 或 padding 以 $spacer * 3规格呈现</p>
<p>auto - 这个Class属性会设定 margin 值 auto（按浏览器默认值自由展现）。</p>
</li>
<li><p>水平居中：Bootstrap也包括一个 <code>.mx-auto class</code>样式，用于固定宽度的盒模型水平居中，具有<code>display: block</code> 和 width 设置水平边距内容的auto居中。</p>
</li>
</ul>
<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p>可以使用<code>.shadow-none</code>和<code>.shadow{-sm/lg}</code>实用工具类快速添加或删除阴影。</p>
<h2 id="position定位"><a href="#position定位" class="headerlink" title="position定位"></a>position定位</h2><ul>
<li><p>通用属性</p>
<p><code>.position-static/relative/absolute/fixed/sticky</code>样式。可以实现快速定位-虽然它们不包含响应式支持。</p>
</li>
<li><p>固定在顶（底）部</p>
<p><code>.fixed-top/bottom</code>将一个元素固定在可见区域的顶(底)部</p>
<blockquote>
<p>用户在使用固定在顶部时请确认效果带来的影响（如覆盖）-必要时增加额外的自定义CSS。</p>
</blockquote>
</li>
<li><p>贴齐于top顶部</p>
<p>该 <code>.sticky-top</code> 样式使用 <code>position: sticky</code>不能在所有浏览器中获得支持。</p>
<p>将一个元素轩于可见区域的顶部，从边到边-但只在你的浏览器窗口滚动才能激活它。</p>
</li>
</ul>
<h2 id="visibility-显示或隐藏处理"><a href="#visibility-显示或隐藏处理" class="headerlink" title="visibility 显示或隐藏处理"></a>visibility 显示或隐藏处理</h2><p><code>invisible</code>：隐藏元素但是占位子。</p>
<p><code>visible</code>：显示元素。</p>
<h2 id="关闭图标"><a href="#关闭图标" class="headerlink" title="关闭图标"></a>关闭图标</h2><p>使用通用的close关闭图标来关闭 modals模态框提示或alert提示组件的内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a href="###" class="close"&gt;&amp;times;&lt;/a&gt; --&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="img/36.png" alt="![](https://i.loli.net/2020/02/28/8Zfbl2KeHnphBGL.png)"></p>
<h2 id="嵌入-embed"><a href="#嵌入-embed" class="headerlink" title="嵌入(embed)"></a>嵌入(embed)</h2><p>创建响应式的视频、图像、幻灯片，并能在在任何设备上友好的扩展显示。</p>
<p>将这些规则应用到 <iframe>、<embed>、 <video>、 <object> 上。当需要配合其它属性（如响应式）时，也可以加入 <code>.embed-responsive-item</code> 定义。</p>
<p>你不需要将 <code>frameborder=&quot;0&quot;</code> 加入到你的 <iframe>中，因为我们已经为您覆盖处理了这个属性。</p>
<p>长宽比例处理：<code>embed-responsive-21by9 / 16by9 / 4by3 / 1by1</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"embed-responsive embed-responsive-16by9"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://www.taobao.com"</span> <span class="attr">class</span>=<span class="string">"embed-responsive-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/oZ5Sg1Ye7OXwN8a.png" alt=""></p>
<h2 id="图像替换"><a href="#图像替换" class="headerlink" title="图像替换"></a>图像替换</h2><p>使用 <code>.text-hide</code> class样来隐藏一个元素的文字内容并替换成背景图片。</p>
<p>使用.text-hide class样式可以保持标签的亲和性及SEO优化需求，引入后，需要使用 background-image 属性来提供视觉展示，而不是文字内容（文字内容随即隐藏）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;h1 class="text-hide"&gt;网战天下&lt;/h1&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-hide"</span> <span class="attr">style</span>=<span class="string">"background-image:url('images/sm.jpg'); width:75px;height:75px;"</span>&gt;</span>网战天下<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="读屏器"><a href="#读屏器" class="headerlink" title="读屏器"></a>读屏器</h2><p>支持视觉隐藏的内容、但保持可访问的辅助技术，如屏幕阅读器，可以使用<code>.sr-only</code>类风格。在需要向非视觉用户传达额外的视觉信息或提示（例如通过使用颜色表示的含义）的情况下，这通常很有用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Danger: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  This action is not reversible</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 .sr-only可定义 屏幕阅读器支持的元素, <code>.sr-only</code> 与 <code>.sr-only-focusable</code>结合，可以防止被键盘激活后再次显示此地素（如通过键盘）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sr-only sr-only-focusable"</span> <span class="attr">href</span>=<span class="string">"#content"</span>&gt;</span>Skip to main content<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="flex-弹性布局"><a href="#flex-弹性布局" class="headerlink" title="flex 弹性布局"></a>flex 弹性布局</h2><ul>
<li>父级：</li>
</ul>
<ol>
<li><p>启用：<code>.d{-sm/md/lg/xl}-flex/inline-flex</code></p>
</li>
<li><p>方向：<code>.flex{-sm/md/lg/xl}- row /row-reverse / column/column-reverse</code></p>
</li>
<li><p>内容对齐与对准：<code>.justify-content{-sm/md/lg/xl}-start/center/end/between/around</code></p>
</li>
<li><p>对齐项目：<code>.align-items{-sm/md/lg/xl}-stretch/start/center/end/baseline</code></p>
</li>
<li><p>Wrap包裹：<code>.flex{-sm/md/lg/xl}-nowrap/wrap/wrap-reverse</code></p>
</li>
<li><p>对齐内容：<code>.align-content{-sm/md/lg/xl}-stretch/start/center/end/around</code></p>
</li>
</ol>
<ul>
<li><p>子元素：</p>
<ol>
<li><p>自对齐：<code>.align-self{-sm/md/lg/xl}-</code>stretch/start/center/end/baseline</p>
</li>
<li><p>自相等：<code>.flex{-sm/md/lg/xl}-fill</code></p>
</li>
<li><p>等宽变幻：<code>.flex{-sm/md/lg/xl}-grow-0/1</code></p>
</li>
</ol>
<p>​       缩小能力：<code>.flex{-sm/md/lg/xl}-shrink-1/0</code></p>
<ol start="4">
<li>自浮动：水平：<code>.mr-auto、.ml-auto</code></li>
</ol>
<p>​       垂直：<code>.mb-auto、.mt-auto (可结合align-items、flex-direction: column)</code></p>
<ol start="5">
<li>Order排序：<code>.order{-sm/md/lg/xl}-1至12（默认0，越小越靠前）</code></li>
</ol>
</li>
</ul>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="警告提示框"><a href="#警告提示框" class="headerlink" title="警告提示框"></a>警告提示框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-primary"</span>&gt;</span></span><br><span class="line">  This is a primary alert—check it out!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/bj8SQwOL4Mo5kRU.png" alt=""></p>
<ul>
<li><p>链接颜色</p>
<p>使用 .alert-link 类可以为带颜色的警告文本框中的链接加上合适的颜色（BootStrap已经内置了相应的颜色解决方案，会自动对应有一个优化后的链接颜色方案）。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--没加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-primary"</span>&gt;</span></span><br><span class="line">  This is a primary alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>网战天下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加alert-link--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-primary"</span>&gt;</span></span><br><span class="line">  This is a primary alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>网战天下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/56APVdHkGC7mrpa.png" alt=""></p>
<ul>
<li><p>额外附加内容</p>
<p>警报还可以包含其他HTML元素，如标、段落和分隔符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"alert-heading"</span>&gt;</span>Well done!<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mb-0"</span>&gt;</span>Whenever you need to, be sure to use margin utilities to keep things nice and tidy.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/02/28/wYtJEu7MCU3Rvz1.png" alt=""></p>
</li>
</ul>
<h2 id="关闭警告-小贴士效果"><a href="#关闭警告-小贴士效果" class="headerlink" title="关闭警告(小贴士效果)"></a>关闭警告(小贴士效果)</h2><p>使用.alert结合JavaScript，可以实现警报效果，贴在页面上，并可以自由关闭(关闭警报会将其从DOM中移除)。</p>
<p>可以在右上角定义一个<code>.close</code>关闭按钮效果，则需要在容器中引用 <code>.alert-dismissible</code> 类。</p>
<p>警告按钮上要增加data-dismiss=”alert” 触发 JavaScript 动作(关闭警告)，同时使用<button>元素，以确保在所有设备上都能获得正确的行为响应。</p>
<p>.fade和.show样式：点击关闭时有淡进淡出的效果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger alert-dismissible fade show"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">strong</span>&gt;</span>登录失败!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 您的用户名或密码错误.</span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/02/28/wYtJEu7MCU3Rvz1.png" alt=""></p>
<p>js行为：</p>
<blockquote>
<p>.alert(‘close’)方法。</p>
<p>事件： close.bs.alert、closed.bs.alert</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法</span></span><br><span class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">'#box'</span>).alert(<span class="string">'close'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//事件</span></span><br><span class="line">$(<span class="string">'#box'</span>).on(<span class="string">'close.bs.alert'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">'自闭了'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#box'</span>).on(<span class="string">'closed.bs.alert'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">'我已经自闭了'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="徽章"><a href="#徽章" class="headerlink" title="徽章"></a>徽章</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><code>.badge</code>可以嵌在标题中，并通过标题样式来适配其元素大小，因为其本身是通过相对字体大小和em单位的，所以有良好的弹性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>夏季清爽运动鞋 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>New<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>夏季清爽运动鞋 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-secondary"</span>&gt;</span>New<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/OwHNT1VkLSryqoX.png" alt=""></p>
<p>徽章可用作链接或按钮的一部分，以提供统计数字样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">	通知 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-light"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">	通知 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-light"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/7Q2nRiMGVs9kPmH.png" alt=""></p>
<p>徽章在span中的表现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-secondary"</span>&gt;</span>Secondary<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/02/28/47If5mETBcuLrAp.png" alt=""></p>
<h3 id="椭圆形胶囊标签"><a href="#椭圆形胶囊标签" class="headerlink" title="椭圆形胶囊标签"></a>椭圆形胶囊标签</h3><p><code>.badge-pill</code>样式，可以使标签更加圆润（具体有较大的border-radius边框半径和水平padding）， 如果你错过了V3的标签这是有用的（这是Bootstrap 4中的特色功能）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-pill badge-primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge badge-pill badge-secondary"</span>&gt;</span>Secondary<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/gaybCltXfs9FG63.png" alt=""></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><code>.badge-*</code> 也可以在 <a> 元素上使用，并实现悬停、焦点、状态等效果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"badge badge-primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"badge badge-secondary"</span>&gt;</span>Secondary<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/NXjPUmCT2x7Soi5.png" alt=""></p>
<h3 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>女装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span>&gt;</span>连衣裙<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/khINfUnx94WtSeq.png" alt=""></p>
<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>Secondary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/VZtiLkjKMPqnFAp.png" alt=""></p>
<h3 id="标签按钮"><a href="#标签按钮" class="headerlink" title="标签按钮"></a>标签按钮</h3><p><code>.btn</code> 可以在<button>元素上使用，您也可以在 <a>、 或 <input> 元素上使用這些 Class，同样能带来按钮效果（在少数浏览器下会有不同的渲染变异）。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"Reset"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/9xaKX2Y18BkHTPe.png" alt=""></p>
<h3 id="轮廊按钮"><a href="#轮廊按钮" class="headerlink" title="轮廊按钮"></a>轮廊按钮</h3><p><code>.btn</code> 在引用中，如果需要一个按钮，但不需要带来的巨大的背景颜色（背景边框缩小），用默认修饰符类替换<code>.btn-outline-*</code>任何按钮上的所有背景颜色和图像。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-secondary"</span>&gt;</span>Secondary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/KfiSI3lOpdTRX5x.png" alt=""></p>
<h3 id="尺寸规格与大小定义"><a href="#尺寸规格与大小定义" class="headerlink" title="尺寸规格与大小定义"></a>尺寸规格与大小定义</h3><p>配合<code>.btn-lg</code> 、 <code>.btn-sm</code> 两个邻近元素，可分别实现大规格按钮、小规格按钮的定义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-lg"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-block"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/eKlrHbi1s5XgMFx.png" alt=""></p>
<h3 id="启用与禁用状态"><a href="#启用与禁用状态" class="headerlink" title="启用与禁用状态"></a>启用与禁用状态</h3><p>启用：<code>.btn</code>样式定义的按钮，默认就是启用状态（背景较深、边框较暗、带内阴影），如果你一定要使按钮固定为启用状态、不需要点击反馈，可以增加.<code>active</code>样式。</p>
<p>禁用：直接将disabled布尔属性添加到任何<button>元素（直接嵌套在html标签中，使按钮看起来处于非活动的禁用状态（点击不会有响应和弹性）。</p>
<p>使用<code>&lt;a&gt;</code>标签的禁用有所不同：</p>
<ol>
<li><code>&lt;a&gt;</code>标签不支持 disabled 属性，所以你必须增加 .disabled 属性，使之达到视觉禁用的效果。</li>
<li>未来，将包括更多的友好风格，以禁用按钮上的 <code>pointer-events</code> 属性，在支持该属性的浏览器中，会你看不到禁用的光标。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary active"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">disabled</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary disabled"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/KHsB4SIctA1MJjl.png" alt=""></p>
<h3 id="按钮插件"><a href="#按钮插件" class="headerlink" title="按钮插件"></a>按钮插件</h3><h4 id="切换状态"><a href="#切换状态" class="headerlink" title="切换状态"></a>切换状态</h4><p>添加 data-toggle=”button” 属性，可以切换按钮的 active 状态。（点击后按钮的状态会在启动与未启动之间切换）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"button"</span>&gt;</span>Single toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图为点击后的状态 --&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/cuGJeiEx6p3fSYF.png" alt=""></p>
<h4 id="复选框和单选框"><a href="#复选框和单选框" class="headerlink" title="复选框和单选框"></a>复选框和单选框</h4><p><code>.btn</code>样式也可以使用于其它元素，比如<label>HTML组件上，从而实现单选、复选效果。添加 <code>data-toggle=&quot;buttons&quot;</code> 到<code>.btn-group</code> 下的元素里，来启用它们的样式切换。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">data-toggle</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary active"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox[]"</span> <span class="attr">checked</span>&gt;</span> Java</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox[]"</span>&gt;</span> PHP</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox[]"</span>&gt;</span> Python</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">data-toggle</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary active"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"radio"</span> <span class="attr">checked</span>&gt;</span> Java</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"radio"</span>&gt;</span> PHP</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"radio"</span>&gt;</span> Python</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/vZJaOX9KDCwzTf6.png" alt=""></p>
<p>上面的实例对应传统使用环境。Bootstrap 4提供了<code>.btn-group-toggle</code>全新的复选与单选 解决方案：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--点击切换点击状态 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary active"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Checked</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary active"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox[]"</span> <span class="attr">checked</span>&gt;</span> Java</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox[]"</span>&gt;</span> PHP</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"checkbox[]"</span>&gt;</span> Python</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary active"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"radio"</span> <span class="attr">checked</span>&gt;</span> Java</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"radio"</span>&gt;</span> PHP</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"radio"</span>&gt;</span> Python</span><br><span class="line">	<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/rofdiAO4XT3RyGQ.png" alt=""></p>
<h3 id="js行为"><a href="#js行为" class="headerlink" title="js行为"></a>js行为</h3><p> <code>.button(&#39;toggle&#39;)</code>：切换状态，给予按钮已经启用的外观。</p>
<h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p><code>dropdown</code>、<code>btn-group</code></p>
<p>需要引入<code>popper.js</code>或者使用<code>bootstrap.bundle.min.js</code>（内置<code>popper.js</code>）</p>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>单一按钮的下拉菜单</p>
<p>任何一个 .btn块都可以定义变更为下拉菜单，可以使用<button>或<a>元素做下拉菜单的示例。</p>
<p><code>btn-group</code>是行内块元素，<code>dropdown</code>是块级元素。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div class="btn-group"&gt; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;a href="#" class="btn btn-primary dropdown-toggle" data-toggle="dropdown"&gt;Dropdown&lt;/a&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/r9jR16lUiuXcePm.png" alt=""></p>
<ul>
<li><p>分裂式按钮下拉菜单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success dropdown-toggle dropdown-toggle-split"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/gvNXnRAW64KxaJI.png" alt=""></p>
</li>
<li><p>变形</p>
<p>可以用 <code>.dropup、.dropright、.dropleft</code>改变下拉菜单的指向。</p>
</li>
</ul>
<h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><p><code>dropdown-menu</code></p>
<p>旧版Boostrap(v3)下拉菜单中的子菜单项必须是链接，但v4不再是这种情况，现在你可选择使用<button>下拉列表中的元素，而不是仅仅 <a>标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu show"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dropdown-item-text"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/e1h8Uc6YStBRJZM.png" alt=""></p>
<h3 id="有效-amp-不可用"><a href="#有效-amp-不可用" class="headerlink" title="有效&amp;不可用"></a>有效&amp;不可用</h3><p>加上 .active 让下拉列表中的项 样式为有效菜单。</p>
<p>加上.disabled 让下拉列表中的项 样式为不可用菜单。</p>
<h3 id="对齐-1"><a href="#对齐-1" class="headerlink" title="对齐"></a>对齐</h3><p>默认情况下，一个下拉菜单自动从顶部和左侧的父级100％定位。添加.dropdown-menu-right 到.dropdown-menu右侧轻松对齐下拉菜单。</p>
<p> <img src="https://i.loli.net/2020/02/28/mqD1sVS4r9gCX7K.png" alt=""></p>
<ul>
<li><p>响应式对齐</p>
<p>如果你想使用响应式对齐，请通过添加data-display=”static”属性禁用动态定位，并使用响应式变体类。</p>
<p>为了下拉菜单左/右对齐和给定断点或更大的断点, 加上<code>.dropdown-menu-{sm|-md|-lg|-xl}-left/right</code>。</p>
<p>你不需要添加 data-display=”static”属性设置为导航栏中的下拉按钮，因为导航条中不使用popper.js。</p>
</li>
</ul>
<h3 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h3><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>添加 <code>h6.dropdown-header</code>标题来标记任何下拉菜单中的操作部分。</p>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>使用<code>div.dropdown-divider</code>分隔符分割相关菜单子项，呈现出分组和分割线效果。</p>
<p> <img src="https://i.loli.net/2020/02/28/Y5eaPoTGlJuVX4D.png" alt=""></p>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu p-4 text-muted"</span> <span class="attr">style</span>=<span class="string">"width:200px;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>一些示例文本在下拉菜单中自由流动。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是更多示例文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/2KTC3qwz6ZpRvHX.png" alt=""></p>
<h3 id="下拉选项"><a href="#下拉选项" class="headerlink" title="下拉选项"></a>下拉选项</h3><p>使用data-offset或data-reference更改下拉菜单的位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">data-offset</span>=<span class="string">"10,20"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-success dropdown-toggle dropdown-toggle-split"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">data-reference</span>=<span class="string">"parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JavaScript-行为"><a href="#JavaScript-行为" class="headerlink" title="JavaScript 行为"></a>JavaScript 行为</h3><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>(1) show.bs.dropdown：当调用show显示方法时，此事件会立即触发。</p>
<p>(2) shown.bs.dropdown：当下拉菜单对用户可见时，会触发此事件(将等待CSS转换完成)。</p>
<p>(3) hide.bs.dropdown：当调用隐藏实例方法时，会立即触发此事件。</p>
<p>(4) hidden.bs.dropdown：当下拉菜单从用户隐藏完毕时，会触发此事件(将等待CSS转换完成)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.dropdown'</span>).on(<span class="string">'show.bs.dropdown'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">'show'</span>)</span><br><span class="line">&#125;).on(<span class="string">'shown.bs.dropdown'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">'shown'</span>)</span><br><span class="line">&#125;).on(<span class="string">'hide.bs.dropdown'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">'hide'</span>)</span><br><span class="line">&#125;).on(<span class="string">'hidden.bs.dropdown'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">'hidden'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="按钮组-Btn-group"><a href="#按钮组-Btn-group" class="headerlink" title="按钮组(Btn-group)"></a>按钮组(Btn-group)</h2><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p><code>.btn-group</code>：将一系列的 <code>.btn</code> 包裹在<code>.btn-group</code>内，并使用我们提供的插件，可以实现选择按钮、选取块状区的行为功能。</p>
<ul>
<li>大小尺寸：<code>.btn-group-lg/sm</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-lg"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/HxK1PXTi9bUWlym.png" alt=""></p>
<h3 id="按钮工具栏"><a href="#按钮工具栏" class="headerlink" title="按钮工具栏"></a>按钮工具栏</h3><p><code>.btn-toolba</code>定义按钮工具栏，根据需要使用样式定义，对按钮进行群组、间隔等定义，将按钮组的组合成为更复杂组件的按钮工具栏。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-toolbar"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group mr-2"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group mr-2"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/EcQKxSbRajlo6rU.png" alt=""></p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>将<code>.btn-group</code> 放在另一个 <code>.btn-group</code> 里，可以实现按钮组与下拉菜单的组合。（详情看下拉菜单内容）</p>
<h3 id="垂直排列"><a href="#垂直排列" class="headerlink" title="垂直排列"></a>垂直排列</h3><p>用.btn-group-vertical将一组按钮垂直排列，而不是水平排列，<strong>不支持</strong>分割式下拉菜单的定义。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group-vertical"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/tgHZSqax7rVIUQW.png" alt=""></p>
<h2 id="input-输入框及输入框群组"><a href="#input-输入框及输入框群组" class="headerlink" title="input 输入框及输入框群组"></a>input 输入框及输入框群组</h2><p><code>.input-group</code>中的元素会连接在一行内显示。</p>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>规格尺寸定义：将相对表单大小的class样式加到 <code>.input-group</code>中，其内容会自动调整大小，如<code>.input-group-lg、.input-group-sm</code>，不需要在每个元素上重重使用样式控制其大小。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>商品价格<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-prepend"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-text"</span>&gt;</span>$<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;textarea class="form-control"&gt;&lt;/textarea&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-append"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-text"</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/76S5qHXRveG4LBj.png" alt=""></p>
</li>
</ul>
<h3 id="输入组插件"><a href="#输入组插件" class="headerlink" title="输入组插件"></a>输入组插件</h3><ul>
<li>勾选或单选框组合</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-prepend"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-text"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox/radio"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>多个输入</p>
<p>尽管可视化支持多个 <input>但验证样式仅适用于具有单个<input>的输入组。</p>
</li>
<li><p>多类型控件组合</p>
<p>支持多种控件结合，比如复选框和、文本、input框混合使用。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-prepend"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-text"</span>&gt;</span>$<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-text"</span>&gt;</span><span class="symbol">&amp;yen;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/M4ufpXR5ocKLlNr.png" alt=""></p>
<ul>
<li>按钮组合</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-prepend"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-secondary"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-secondary"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/s2pLyer6wHQ7xhS.png" alt=""></p>
<ul>
<li>下拉菜单</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-prepend"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-secondary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-prepend"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-secondary"</span>&gt;</span>Dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-secondary dropdown-toggle dropdown-toggle-split"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/zRT1do3WGpNLAKq.png" alt=""></p>
<h3 id="自定义表单"><a href="#自定义表单" class="headerlink" title="自定义表单"></a>自定义表单</h3><p>输入组包括对自定义选择和自定义文件输入的支持。 这些浏览器的默认版本不受支持。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"custom-select"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>-请选择-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/SysrhEYkfozC6qa.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom-file"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"custom-file-input"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"custom-file-label"</span>&gt;</span>选择<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  <img src="https://i.loli.net/2020/02/28/fFMvJGYB9ECQrgz.png" alt=""></p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><p>表单控件使用form-group包裹。</p>
<ol>
<li>文本控件（如 <input>、<select>、 <textarea>）统一采用 <code>.form-control</code> 样式进行处理优化，包括常规外观、focus选（点）中状态、尺寸大小等。</li>
<li>对于input文件选择控件，Bootstrap v4采用<code>.form-control-file</code> 取代了<code>.form-control</code>。</li>
<li>大小规格：使用 <code>.form-control-lg</code> 和 <code>.form-control-sm</code>属性定控件大小高度。</li>
<li>输入范围：使用设置水平滚动范围输入<code>.form-control-range</code>。</li>
<li>只读属性：在input控件上增加 <code>readonly</code> (布尔值)标签定义，以防止修改input中的值。仅能阅读的input控件显示较谈(就像禁用的输入框)，但保留鼠标效果。</li>
<li>只读纯文本：如果你希望将 <input readonly>属性进一步处理，显示为纯文本（没有控件框），你只要引用 <code>.form-control-plaintext</code> class样式，就能移除预设的表单样式，并保留适当的边距和填充间隙。</li>
<li>提示文本：small.form-text.text-muted</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/1LvZ72hy6eMPUt4.png" alt=""></p>
<h3 id="单选框和复选框"><a href="#单选框和复选框" class="headerlink" title="单选框和复选框"></a>单选框和复选框</h3><ul>
<li>默认堆叠</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox/radio"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox/radio"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox/radio"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  <img src="https://i.loli.net/2020/02/28/w23i8CONWHIVStg.png" alt=""></p>
<ul>
<li><p>水平排列</p>
<p>通过添加 <code>.form-check-inline</code>到任何一个组，会使 加到任何<code>.form-check</code>中的选取框平行排列。</p>
<p> <img src="https://i.loli.net/2020/02/28/8WAgL2btFZOv9Qj.png" alt=""></p>
</li>
<li><p>没有标签</p>
<p>添加 <code>.position-static</code> 到 <code>.form-check</code> 选择器上，可以实现没有文本的输入。(不带label)</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果不加position-static则不显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"form-check-input position-static"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">class</span>=<span class="string">"form-check-input position-static"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/DOxlih7nLRP2oHy.png" alt=""></p>
<h3 id="布局-1"><a href="#布局-1" class="headerlink" title="布局"></a>布局</h3><ul>
<li><p>表单栅格排列</p>
<p>可使用我们的栅格系统构建更复杂的表单，包括建立多列、多种宽度和其它对齐选项的布局。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/DH49nlQNfSWywzK.png" alt=""></p>
<p>你也可以使用 <code>.form-row</code>来取代<code>.row</code>（它们二者很多时候可以互换使用），因为<code>.form-row</code>提供更小的沟槽缝隙。</p>
<p>  <img src="https://i.loli.net/2020/02/28/tjiSJbFDBLVThrH.png" alt=""></p>
<ul>
<li><p>垂直排列表单</p>
<p>通过添加 <code>.row</code> class类，并使用 <code>.col</code>-<em>-</em> 等栅格组件来指定标签和宽度，可以建立起水平表单。</p>
<p>确保添加.col-form-label 到您<label>上，以便他们垂直居中与他们相关的表单控件。</p>
<legend>元素，可以.col-form-legend样式定义，与普通<label>元素相似。
</li>
<li><p>使用.col-form-label-sm、.col-form-label-lg 到 <label>上，可以定义控件大小，还有 .form-control-lg、.form-control-sm样式也起相应作用。</p>
</li>
<li><p>自动调整大小</p>
<p>下面的示例使用一个flexbox弹性布局垂直居中的内容，我们将.col改为<code>.col-auto</code>，这样的列只占用本身内容所需要的宽度，换句话说列的大小就是内容的大小（宽度）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-row"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-auto"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-auto"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-auto"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/wXuD3q4o8jLV9rK.png" alt=""></p>
<ul>
<li><p>内联式表单</p>
<p>使用 <code>.form-inline</code>样式在单个水平行上显示一系列标签，表单控件和按钮。内联表单中的表单控件与默认状态略有不同：</p>
<ul>
<li>基于<code>display: flex</code>控件组件，并允许您使用 间隙隔离 和 flexbox 弹性布局样式。</li>
<li>控制组件和input接受 <code>width: auto</code> 以覆盖预设的 <code>width: 100%</code>。</li>
<li>控制组件只会在<code>viewport 576px</code>宽度 时才会显示在行内，以便在移动设备上完整呈现。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control mb-2 mr-sm-2"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control mb-2 mr-sm-2"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check mb-2 mr-sm-2"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/esuDrWpU8XiPza9.png" alt=""></p>
<h3 id="禁用表单"><a href="#禁用表单" class="headerlink" title="禁用表单"></a>禁用表单</h3><p>被禁用的表单不能点击，呈灰色</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line">	<span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ul>
<li><p>自定义样式</p>
<p>您需要将 novalidate属性添加到您的<form>。这将禁用浏览器默认的反馈工具提示，但仍提供对JavaScript中的表单验证API有效支持。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--required为必填属性，不填的话浏览器会提示填写，添加novalidate移除浏览器自带提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">novalidate</span> <span class="attr">class</span>=<span class="string">"needs-validation"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"invalid-feedback"</span>&gt;</span>邮箱格式不正确!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"invalid-feedback"</span>&gt;</span>密码格式不正确!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Example starter JavaScript for disabling form submissions if there are invalid fields</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">	'use strict'</span>;</span><br><span class="line">	<span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// Fetch all the forms we want to apply custom Bootstrap validation styles to</span></span><br><span class="line">		<span class="keyword">var</span> forms = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'needs-validation'</span>);</span><br><span class="line"><span class="comment">// Loop over them and prevent submission</span></span><br><span class="line">		<span class="keyword">var</span> validation = <span class="built_in">Array</span>.prototype.filter.call(forms, <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">			form.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (form.checkValidity() === <span class="literal">false</span>) &#123;</span><br><span class="line">					event.preventDefault();</span><br><span class="line">  					event.stopPropagation();</span><br><span class="line">				&#125;</span><br><span class="line">				form.classList.add(<span class="string">'was-validated'</span>);</span><br><span class="line">			&#125;, <span class="literal">false</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>  <img src="https://i.loli.net/2020/02/28/yNLO3FbhRmcV8Yf.png" alt=""></p>
<ul>
<li><p>服务器端</p>
<p>我们建议使用客户端验证，但是如果您需要使用服务器端验证，则可以使用.is-invalid和.is-valid来表示无效和有效的表单字段。注意，.invalid-feedback这些类也支持。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--效果同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control is-valid"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"valid-feedback"</span>&gt;</span>邮箱正确!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"invalid-feedback"</span>&gt;</span>邮箱不正确!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control is-invalid"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"valid-feedback"</span>&gt;</span>密码格式正确!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"invalid-feedback"</span>&gt;</span>密码格式不正确!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义表单-1"><a href="#自定义表单-1" class="headerlink" title="自定义表单"></a>自定义表单</h3><p>为了使自定义表单和跨浏览器保持一致性，请使用自定义的表单元素来替换浏览器的默认值，它们建立在语义和具备友了的标记之上，因此它们是可以替代任何默认表单控制元件的。</p>
<ul>
<li>checkbox勾选</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom-control custom-checkbox"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"custom-control-input"</span> <span class="attr">id</span>=<span class="string">"remember"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"custom-control-label"</span> <span class="attr">for</span>=<span class="string">"remember"</span>&gt;</span>记住我<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/5w1pl8tbcxkVLjR.png" alt=""></p>
<ul>
<li>radio 单选框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom-control custom-radio"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">class</span>=<span class="string">"custom-control-input"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"custom-control-label"</span> <span class="attr">for</span>=<span class="string">"man"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom-control custom-radio"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"woman"</span> <span class="attr">class</span>=<span class="string">"custom-control-input"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"custom-control-label"</span> <span class="attr">for</span>=<span class="string">"woman"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/fndWRecGg5CLDsQ.png" alt=""></p>
<ul>
<li><p>一行显示：</p>
<p>在.<code>custom-control</code>添加<code>.custom-control-inline</code>。</p>
</li>
<li><p>IOS风格开关</p>
<p>开关具有自定义复选框的标记，使用 .custom-switch 类来呈现切换开关。开关还支持 disabled属性(v4.2.1新增组件)。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom-control custom-switch"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"custom-control-input"</span> <span class="attr">id</span>=<span class="string">"customSwitch1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"custom-control-label"</span> <span class="attr">for</span>=<span class="string">"customSwitch1"</span>&gt;</span>Toggle this switch element<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  <img src="https://i.loli.net/2020/02/28/i7tLCQ95gpBlHjN.png" alt=""></p>
<ul>
<li><p>select 下拉选择菜单</p>
<p>自定义<select>下拉选择菜单只需要一个<code>.custom-select</code> CSS即可触发自定义样式。</p>
<p>可以在<code>.custom-select</code>上添加<code>.custom-select-lg/sm</code>改变大小。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"custom-select"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span>&gt;</span>-请选择-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">option</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> <img src="https://i.loli.net/2020/02/28/OnXMUez5mpZRLoa.png" alt=""></p>
<ul>
<li><p>range 范围</p>
<p>创建自定义·<input type="range">·与控制<code>.custom-range</code>。轨道（背景）和大拇指（值）都被设置为跨浏览器显示相同。由于只有IE和Firefox支持从拇指的左侧或右侧“填充”它们的轨迹，以作为视觉指示进度的手段，所以我们目前不支持它。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">class</span>=<span class="string">"custom-range"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  <img src="https://i.loli.net/2020/02/28/xgnsewl3CmqIrcT.png" alt=""></p>
<ul>
<li><p>file 浏览器</p>
<p>文件浏览（选取）是比较原始粗糙的，它需要额外的JavaScript定义支持，如果你将Choose file…文件选取和所选文件的名称关联。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom-file"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"custom-file-input"</span> <span class="attr">id</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"custom-file-label"</span> <span class="attr">for</span>=<span class="string">"avatar"</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>  <img src="https://i.loli.net/2020/02/28/PS1CENJtyIuOY3X.png" alt=""></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器请求过程-http</title>
    <url>/2020/02/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B-http/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/WsSclZiTg9BIadJ.jpg
" style="zoom: 100%;"/>

<p>浏览器打开网址后发生了什么？</p>
</center>

<a id="more"></a>

<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><ol>
<li>用户在浏览器中输入URL网址。</li>
<li>浏览器解析用户输入的URL地址 =&gt;域名+端口。</li>
<li>浏览器会先检查本地缓存中有没有这个域名 =&gt;IP。</li>
</ol>
<blockquote>
<p>有：直接使用IP进行访问。</p>
<p>没有：浏览器发起一个DNS系统调用。（操作系统进行查找）</p>
<ul>
<li><p>操作系统检查自己的缓存里有没有这个域名。</p>
</li>
<li><p>没有的话找系统的hosts文件中有没有这个域名。</p>
</li>
<li><p>如果都没有找到，会对DNS服务器发起一个系统调用。</p>
</li>
</ul>
<p>注：谷歌使用<code>chrome://net-intermals</code>查看浏览器缓存。</p>
</blockquote>
<ol start="4">
<li>浏览器通过一个本机的随机端口建立一个与服务器指定端口（80）之间的连接通道。</li>
<li>浏览器会将客户端的一些信息打上一个“包”。将这个“包”通过这个连接通道发送到服务端。</li>
<li>打开服务端返回过来的“包”，找到<code>Content-type</code>，决定如何处理响应的内容。</li>
<li>如果是HTML则渲染到界面上。</li>
<li>“包”的概念是请求报文。</li>
</ol>
<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><ol>
<li>打开客户端提交过来的“包”，拿到“包”里面的 请求路径。</li>
<li>根据请求的路径 对应文件的扩展名 找到文件的类型（MIME Type）。</li>
<li>判断文件类型是否为静态文件</li>
</ol>
<blockquote>
<p>是：直接读取这个文件的内容。</p>
<p>不是：交给“外包公司”执行代码。</p>
</blockquote>
<ol start="4">
<li>服务端拿到执行的结果，把要发给客户端的数据打上一个“包”。</li>
<li>将这个“包”再通过之前的连接通道发给客户端。</li>
</ol>
<h1 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h1><p><img src="https://i.loli.net/2020/02/28/gKSwrcETh38RmZe.png" alt=""></p>
<h1 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h1><p><img src="https://i.loli.net/2020/02/28/K6H9hoSeO2Dcxa3.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//php 中 header 函数专门用于设置响应头,不能设置两个相同的，会被覆盖。</span></span><br><span class="line"><span class="comment">//设置响应类型</span></span><br><span class="line">header(<span class="string">'Content-type: text/css'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置跳转(重定向)页面</span></span><br><span class="line">header(<span class="string">'location: xxx.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//让文件下载</span></span><br><span class="line">header(<span class="string">'Content-type: application/octet-stream'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置默认下载文件名</span></span><br><span class="line">header(<span class="string">'Content-Disposition: attachment; filename=demo.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置cookie</span></span><br><span class="line">header(<span class="string">'Set-Cookie: key=value'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的备份</title>
    <url>/2020/02/27/Hexo%E7%9A%84%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/5DhmU2ozI6cbHus.jpg
" style="zoom: 80%;"/>

<p>将 hexo 源文件备份到 github</p>
</center>

<a id="more"></a>

<p>使用 <code>Hexo</code> 在 <code>github</code> 搭建的博客，博客作为一个单独的 GitHub 仓库存在，但是这个仓库只有生成的静态网页文件，并没有 Hexo 的源文件，如果要换电脑或者重装系统后，就比较麻烦了，这里推荐一种方法。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2luZGV4Lmh0bWw=" title="https://hexo.io/zh-cn/index.html">官方网址<i class="fa fa-external-link"></i></span></p>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ol>
<li>创建仓库 <code>yourname.github.io</code>，如果同名仓库之前已经创建，请将之前的仓库改名，新建的仓库必须是 <code>yourname.github.io</code> </li>
<li>创建两个分支： <code>master</code> 和 <code>hexo</code></li>
<li>设置 <code>hexo</code> 为默认分支</li>
<li>将刚刚创建的新仓库 <code>clone</code> 至本地，将之前的 <code>hexo</code> 文件夹中的 <code>_config.yml，themes/，source/，scaffolds/，package.json，.gitignore</code> 复制至 <code>yourname.github.io</code> 文件夹</li>
<li>将 <code>themes/next/(我用的是NexT主题)中的.git/</code> 删除，否则无法将主题文件夹 <code>push</code></li>
<li>在 <code>yourname.github.io</code> 文件夹执行 <code>npm install和npm install hexo-deployer-git</code> （这里可以看一看分支是不是显示为hexo）</li>
<li>执行 <code>git add .</code>、<code>git commit -m &quot;&quot;</code> 、<code>git push origin hexo</code> 来提交 hexo 网站源文件</li>
<li>执行 <code>hexo g -d</code> 生成静态网页部署至 Github 上。<br>这样一来， <code>yourname.github.io</code> 仓库就有 <code>master</code> 分支和 <code>hexo</code> 分支，分别保存静态网页和源文件。</li>
</ol>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>在本地对博客修改（包括修改主题样式、发布新文章等）后：</p>
<ol>
<li>依次执行git <code>add .、git commit -m &quot;&quot;</code> 、<code>git push origin hexo</code>来提交 hexo 网站源文件</li>
<li>执行 <code>hexo g -d</code> 生成静态网页部署至 Github 上。</li>
</ol>
<p>即重复备份的7-8步骤，以上两部没有严格的顺序。</p>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>重装电脑后，或者在其它电脑上想修改博客：</p>
<ol>
<li>安装 git </li>
<li>安装 Nodejs 和 npm</li>
<li>使用 <code>git clone git@github.com:WincerChan/WincerChan.github.io.git</code> 将仓库拷贝至本地</li>
<li>在文件夹内执行以下命令 <code>npm install hexo-cli -g</code> 、 <code>npm install、npm install hexo-deployer-git</code></li>
</ol>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="hexo的源文件"><a href="#hexo的源文件" class="headerlink" title="hexo的源文件"></a>hexo的源文件</h3><p>这里说一下步骤4为什么只需要拷贝6个，而不需要全部：</p>
<ol>
<li><code>_config.yml</code> 站点的配置文件，需要拷贝</li>
<li><code>themes/</code> 主题文件夹，需要拷贝</li>
<li><code>source</code> 博客文章的 .md 文件，需要拷贝</li>
<li><code>scaffolds/</code> 文章的模板，需要拷贝</li>
<li><code>package.json</code> 安装包的名称，需要拷贝</li>
<li><code>.gitignore</code> 限定在 push 时哪些文件可以忽略，需要拷贝</li>
<li><code>.git/</code> 主题和站点都有，标志这是一个 git 项目，不需要拷贝</li>
<li><code>node_modules/</code> 是安装包的目录，在执行 <code>npm install</code> 的时候会重新生成，不需要拷贝</li>
<li><code>public</code> 是 <code>hexo g</code> 生成的静态网页，不需要拷贝</li>
<li><code>.deploy_git</code> 同上， <code>hexo g</code> 也会生成，不需要拷贝</li>
<li><code>db.json</code> 文件，不需要拷贝。</li>
</ol>
<p>其实不需要拷贝的文件正是 <code>.gitignore</code> 中所忽略的。</p>
<h3 id="添加ssh-keys"><a href="#添加ssh-keys" class="headerlink" title="添加ssh-keys"></a>添加ssh-keys</h3><ol>
<li>在终端下运行：<code>ssh-keygen -t rsa -C &quot;yourname@email.com&quot;</code>，一路回车</li>
<li>会在 <code>.ssh</code>目录生成 <code>id_rsa</code> 、<code>id_rsa.pub</code> 两个文件，这就是密钥对，<code>id_rsa</code> 是私钥，千万不能泄漏出去</li>
<li>登录 Github ，打开 「Settings」–&gt;「SSH and GPG keys」，然后点击 「new SSH key」，填上任意 Title ，在 Key 文本框里粘贴公钥 <code>id_rsa.pub</code> 文件的内容，注意不要粘贴成 <code>id_rsa</code>，最后点击「Add SSH Key」。</li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-next主题美化（7.7.1版本）</title>
    <url>/2020/02/27/Hexo-next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%EF%BC%887-7-1%E7%89%88%E6%9C%AC%EF%BC%89/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/6JXmDsw18lRAQM2.jpg
" style="zoom: 50%;"/>

<p>使用的 hexo 版本是 4.2.0，next 主题是 7.7.1 版本</p>
</center>
<a id="more"></a>

<h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><h2 id="进度条设置错误（未解决）"><a href="#进度条设置错误（未解决）" class="headerlink" title="进度条设置错误（未解决）"></a>进度条设置错误（未解决）</h2><p>主题设置文件里<code>pace</code>如果开启会在控制台出3条错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Refused to apply style <span class="keyword">from</span> <span class="string">'http://localhost:4000/lib/pace/pace-theme-minimal.min.css'</span> because its MIME type (<span class="string">'text/html'</span>) is not a supported stylesheet MIME type, and strict MIME checking is enabled.</span><br><span class="line"></span><br><span class="line">GET http:<span class="comment">//localhost:4000/lib/pace/pace.min.js net::ERR_ABORTED 404 (Not Found)</span></span><br><span class="line"></span><br><span class="line">Refused to apply style <span class="keyword">from</span> <span class="string">'http://localhost:4000/lib/pace/pace-theme-minimal.min.css'</span> because its MIME type (<span class="string">'text/html'</span>) is not a supported stylesheet MIME type, and strict MIME checking is enabled.</span><br></pre></td></tr></table></figure>

<h2 id="界面动画和daovoice聊天冲突（未解决）"><a href="#界面动画和daovoice聊天冲突（未解决）" class="headerlink" title="界面动画和daovoice聊天冲突（未解决）"></a>界面动画和daovoice聊天冲突（未解决）</h2><p>添加了<code>daovoice</code>聊天功能后，疑是与动画<code>motion</code>冲突，两个全部开启的时候界面显示会出错，控制台报如下信息,关闭其中一个功能就会恢复正常。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Uncaught (<span class="keyword">in</span> promise) <span class="built_in">Error</span>: Velocity: First argument (transition.slideDownIn) was not a property map, a known action, or a registered redirect. Aborting.</span><br><span class="line">    at j (bundle.b69d69b9cd164a70039e.js:<span class="number">21</span>)</span><br><span class="line">    at menu (motion.js:<span class="number">101</span>)</span><br><span class="line">    at <span class="built_in">Object</span>.next (motion.js:<span class="number">22</span>)</span><br><span class="line">    at <span class="built_in">Array</span>.sequence.&lt;computed&gt;.o.complete (motion.js:<span class="number">88</span>)</span><br><span class="line">    at p (velocity.min.js:<span class="number">3</span>)</span><br><span class="line">    at c (velocity.min.js:<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h1 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h1><ul>
<li><p>安装插件：<code>npm install --save hexo-generator-feed</code></p>
</li>
<li><p>编辑Blog/_config.yml文件，在文件末尾添加</p>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment"># Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置主题_config.yml文件，搜索rss，在后面加上/atom.xml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set rss to false to disable feed link.</span></span><br><span class="line"><span class="comment"># Leave rss as empty to use site's feed link.</span></span><br><span class="line"><span class="comment"># Set rss to specific value if you have burned your feed already.</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span> <span class="string">//注意：有一个空格</span></span><br></pre></td></tr></table></figure>

<h1 id="背景动画Canvas-nest"><a href="#背景动画Canvas-nest" class="headerlink" title="背景动画Canvas_nest"></a>背景动画Canvas_nest</h1><ol>
<li>进入<code>theme/next</code>目录</li>
<li>执行命令：<code>git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest</code></li>
<li>这时将配置文件<code>_config.yml</code>中的<code>canvas_nest: false</code>改为<code>canvas_nest: true</code></li>
</ol>
<h1 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h1><p>路径：<code>source/css/_schemes/对应的主题文件</code></p>
<ul>
<li>背景</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;   </span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">'/images/body.png'</span>);</span><br><span class="line">  <span class="attribute">background-size</span>:cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">  <span class="attribute">background-position</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>顶栏图片</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(图片链接) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>底栏背景色</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">rgba</span>(颜色rgb,透明度) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>侧栏图片及内部文字颜色修改</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(图片链接);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>:center;</span><br><span class="line">  <span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">  p,span,a &#123;color: 颜色代码;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="为博客添加宠物"><a href="#为博客添加宠物" class="headerlink" title="为博客添加宠物"></a>为博客添加宠物</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJkL2Jsb2IvbWFzdGVyL1JFQURNRS56aC1DTi5tZA==" title="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">官方使用教程<i class="fa fa-external-link"></i></span></p>
<ol>
<li>在终端切换到你的博客的本地路径里，然后输入如下代码安装live2d插件：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在hexo的_config.yml中添加参数：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-&lt;模型名称&gt;</span></span><br><span class="line">    <span class="comment"># wanko</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在站点目录下建文件夹<code>live2d_models</code></li>
<li>挑选喜欢的模型：<span class="exturl" data-url="aHR0cHM6Ly9odWFqaTgudG9wL3Bvc3QvbGl2ZTJkLXBsdWdpbi0yLjAv" title="https://huaji8.top/post/live2d-plugin-2.0/">模型地址<i class="fa fa-external-link"></i></span></li>
<li>再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字&gt;</code></li>
<li>再在&lt;你喜欢的模型名字&gt;下建json文件：<code>&lt;你喜欢的模型名字&gt;.model.json</code></li>
<li>安装模型</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save live2d-widget-model-&lt;你喜欢的模型名字&gt;</span><br></pre></td></tr></table></figure>

<h1 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h1><h2 id="桃心"><a href="#桃心" class="headerlink" title="桃心"></a>桃心</h2><ol>
<li>在<code>\themes\next\source\js</code>下添加 love.js 文件，写入代码：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更新<code>\themes\next\layout_layout.swig</code>文件，在末尾（在前面引用会出现找不到的 bug）添加以下js引入代码：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt; </span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/love.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="气泡效果"><a href="#气泡效果" class="headerlink" title="气泡效果"></a>气泡效果</h2><ol>
<li>在<code>\themes\next\source\js</code>下添加 fireworks.js 文件，写入代码：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>更新<code>\themes\next\layout_layout.swig</code>文件，在 head 添加代码：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.fireworks %&#125;</span><br><span class="line">   &lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt; </span><br><span class="line">   &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt; </span><br><span class="line">   &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>主题设置里添加</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fireworks</span></span><br><span class="line"><span class="attr">fireworks:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="在文章末尾统一添加“本文结束”标记"><a href="#在文章末尾统一添加“本文结束”标记" class="headerlink" title="在文章末尾统一添加“本文结束”标记"></a>在文章末尾统一添加“本文结束”标记</h1><ol>
<li>在路径<code>\themes\next\layout_macro</code>中新建<code>passage-end-tag.swig</code>文件,并添加以下内容：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;     </span><br><span class="line">    &#123;% if not is_index %&#125;         </span><br><span class="line">    &lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;</span><br><span class="line">        -------------本文结束&lt;i class&#x3D;&quot;fa fa-paw&quot;&gt;&lt;&#x2F;i&gt;感谢您的阅读-------------</span><br><span class="line">    &lt;&#x2F;div&gt;     </span><br><span class="line">    &#123;% endif %&#125; </span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接着打开<code>\themes\next\layout_macro\post.swig</code>文件，在<code>post-body</code>之后，<code>post-footer</code>之前添加如下代码：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;   </span><br><span class="line">    &#123;% if not is_index %&#125;     </span><br><span class="line">        &#123;% include &#39;passage-end-tag.swig&#39; %&#125;   </span><br><span class="line">    &#123;% endif %&#125; </span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>然后打开主题配置文件（_config.yml),在末尾添加：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记 </span><br><span class="line">passage_end_tag:  </span><br><span class="line">    enabled: true</span><br></pre></td></tr></table></figure>

<h1 id="添加RSS-1"><a href="#添加RSS-1" class="headerlink" title="添加RSS"></a>添加RSS</h1><ol>
<li>安装插件：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>网站设置里添加：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions </span></span><br><span class="line"><span class="comment"># Plugins: http://hexo.io/plugins/ </span></span><br><span class="line"><span class="attr">plugins:</span> <span class="string">hexo-generate-feed</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>主题文件夹 social： RSS: /atom.xml || rss</li>
<li>配置完之后运行：hexo g<br>重新生成一次，在./public文件夹中看到atom.xml文件。然后启动服务器查看是否有效，之后再部署到Github中。</li>
</ol>
<h1 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h1><p>修改主题配置文件(_config.yml)将pace: false改为pace: true，可以换不同样式的加载条，如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Themes list:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">minimal</span></span><br></pre></td></tr></table></figure>

<h1 id="在文章底部增加版权信息"><a href="#在文章底部增加版权信息" class="headerlink" title="在文章底部增加版权信息"></a>在文章底部增加版权信息</h1><p>在修改next主题的配置文件_config.yml如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">deed.zh</span></span><br></pre></td></tr></table></figure>

<h1 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h1><ol>
<li>修改<code>hero-generator-index</code>插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code>内的代码替换为：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在文章中添加top值，数值越大文章越靠前，如下:</li>
</ol>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: ''</span><br><span class="line">date: 2017-05-22 22:45:48</span><br><span class="line">tags: 技巧</span><br><span class="line">categories: 技巧</span><br><span class="line">copyright: true</span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h1 id="侧边栏推荐阅读"><a href="#侧边栏推荐阅读" class="headerlink" title="侧边栏推荐阅读"></a>侧边栏推荐阅读</h1><p>打开主题配置文件修改成这样就行了(links里面写想要的链接):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Blogrolls</span><br><span class="line">links_title: 推荐阅读</span><br><span class="line">#links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  优设: http:&#x2F;&#x2F;www.uisdc.com&#x2F;</span><br><span class="line">  张鑫旭: http:&#x2F;&#x2F;www.zhangxinxu.com&#x2F;</span><br><span class="line">  Web前端导航: http:&#x2F;&#x2F;www.alloyteam.com&#x2F;nav&#x2F;</span><br><span class="line">  前端书籍资料: http:&#x2F;&#x2F;www.36zhen.com&#x2F;t?id&#x3D;3448</span><br><span class="line">  百度前端技术学院: http:&#x2F;&#x2F;ife.baidu.com&#x2F;</span><br><span class="line">  google前端开发基础: http:&#x2F;&#x2F;wf.uisdc.com&#x2F;cn&#x2F;</span><br></pre></td></tr></table></figure>

<h1 id="添加sitemap网站地图"><a href="#添加sitemap网站地图" class="headerlink" title="添加sitemap网站地图"></a>添加sitemap网站地图</h1><ol>
<li>安装hexo的sitemap网站地图生成插件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save #google地图生成插件</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save #百度地图生成插件</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在hexo站点的_config.yml添加下面的代码，</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo sitemap网站地图</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>配置成功后，hexo编译时会在hexo站点根目录的public下生成sitemap.xml和 baidusitemap.xml，其中sitemap.xml适合提交给谷歌搜素引擎，baidusitemap.xml适合提交百度搜索引擎。<br>让百度收录你的站点<br>刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入site:&lt;域名&gt;,如果显示没找到就是说明网站并没有被百度收录。可以直接点击“网址提交”来提交我们的网站。</p>
</li>
<li><p>登录百度站长平台,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击添加网站然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名</p>
</li>
<li><p>在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证、html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的layout:false，这样就不会被hexo编译（还不行就去部署的地方修改文件，如果文件被修改会导致验证失败）。</p>
</li>
<li><p>然后就可以将生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap<br>如何选择链接提交方式<br>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>4、手动提交：一次性提交链接给百度，可以使用此种方式。<br>一般来说，主动推送&gt;自动推送&gt;sitemap&gt;手动提交</p>
</li>
<li><p>主动推送</p>
</li>
</ol>
<p>安装插件：<code>npm install hexo-baidu-url-submit --save</code><br>然后在根目录的配置文件中新增字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 # 提交最新的一个链接</span><br><span class="line">  host: www.cherryblog.site # 在百度站长平台中注册的域名</span><br><span class="line">  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure>

<p>在加入新的deploye</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> - type:baidu_url_submitter</span><br></pre></td></tr></table></figure>

<p>这样执行hexo deploy的时候，新的链接就会被推送了</p>
<ol start="8">
<li>自动推送</li>
</ol>
<p>题配置文件下设置,将baidu_push设置为true：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class="line">baidu_push: true</span><br></pre></td></tr></table></figure>

<p>然后就会将一下代码自动推送到百度，位置是themes\next\layout_scripts\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.baidu_push %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li><p>sitemap</p>
<p>将上一步生成的sitemap文件提交到百度就可以了<br>百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月，收录后在百度搜索site:cherryblog.site已经可以搜索到结果。<br>让google收录你的站点<br>相比于百度，google的效率实在不能更快。方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap。</p>
</li>
<li><p>进入google站点平台，然后就是在谷歌注册账号、验证站点、提交sitemap。</p>
</li>
</ol>
<h1 id="图片可点击放大查看"><a href="#图片可点击放大查看" class="headerlink" title="图片可点击放大查看"></a>图片可点击放大查看</h1><p>打开主题配置文件_config.yml，搜索fancybox字段，设置其值为true</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FancyBox is a tool that offers a nice and elegant way to add zooming functionality for images.</span></span><br><span class="line"><span class="comment"># For more information: https://fancyapps.com/fancybox</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="增加网易云音乐播放器"><a href="#增加网易云音乐播放器" class="headerlink" title="增加网易云音乐播放器"></a>增加网易云音乐播放器</h1><ol>
<li>分享歌单</li>
<li>打开分享界面的歌单链接（个人主页点击动态）</li>
<li>打开歌单即可看到生成外链的点击链接</li>
<li>然后把代码贴到你想要生成外链播放器的地方即可，但是生成的外链还是无法播放没有版权的音乐</li>
<li>将代码放到../themes/next/layout/_macro/sidebar.swig文件中如下div中，这样可以实现当侧边栏显示目录时不会显示音乐播放器：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-overview-wrap sidebar-panel"</span>&gt;</span></span><br><span class="line">        &#123;&#123; partial('_partials/sidebar/site-overview.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &#123;&#123;- next_inject('sidebar') &#125;&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!--网易云音乐--&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"music163player"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">260</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=0&amp;id=2504295111&amp;auto=1&amp;height=430"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	  <span class="comment">&lt;!--/网易云音乐--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>打开主题配置文件，修改侧边宽度：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment">#position: right</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Manual define the sidebar width. If commented, will be default for:</span></span><br><span class="line">  <span class="comment"># Muse | Mist: 320</span></span><br><span class="line">  <span class="comment"># Pisces | Gemini: 240</span></span><br><span class="line">  <span class="attr">width:</span> <span class="number">300</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>需要说明一点，不同浏览器打开博客后后网易云音乐状态不同，比如搜狗浏览器打开博客，音乐就自动播放，但Chrome浏览器不会自动播放。如果不想打开博客就自动播放音乐，可以让产生外链的歌单中第一首歌是因为版权无法播放的。</li>
</ol>
<h1 id="添加来必力评论系统"><a href="#添加来必力评论系统" class="headerlink" title="添加来必力评论系统"></a>添加来必力评论系统</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGl2ZXJlLmNvbS8=" title="https://www.livere.com/">来必力官网<i class="fa fa-external-link"></i></span></p>
<p>NexT支持的第三方的评论系统有很多，而且对于国内来说比较友好就有来必力点我进入来必力首页，下面介绍添加来必力评论系统。</p>
<ol>
<li>首先获取来必力id，登陆来必力注册获取。<br>这里要注意，这个韩国的系统注册很慢，所以要记住不要耐不住关闭页面或者狂刷新，耐心等待就好。</li>
<li>注册后点击导航上边的安装，选择免费的city版本</li>
<li>点击现在安装后填入网站的一些信息就可以获取到安装代码，框中的就是你的来必力id</li>
<li>复制上边代码中的<code>data-uid</code>的id，在主题配置文件里面搜索livere_uid，在后面添加id即可</li>
</ol>
<h1 id="DaoVoice在线联系"><a href="#DaoVoice在线联系" class="headerlink" title="DaoVoice在线联系"></a>DaoVoice在线联系</h1><ol>
<li><p>首先在daovoice注册账号<span class="exturl" data-url="aHR0cDovL2Rhc2hib2FyZC5kYW92b2ljZS5pby9nZXQtc3RhcnRlZA==" title="http://dashboard.daovoice.io/get-started">点我注册<i class="fa fa-external-link"></i></span>,邀请码是0f81ff2f，注册完成后会得到一个 app_id:</p>
</li>
<li><p>记下这个app_id的值，然后打开<code>/themes/next/layout/_partials/head/head.swig</code>,写下如下代码：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">"script"</span>,(<span class="string">'https:'</span> == <span class="built_in">document</span>.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/0f81ff2f.js"</span>,<span class="string">"daovoice"</span>)</span><br><span class="line">  daovoice(<span class="string">'init'</span>, &#123;</span><br><span class="line">      app_id: <span class="string">"&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(<span class="string">'update'</span>);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>接着打开主题配置文件，在最后写下如下代码：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Online contact </span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span> <span class="string">这里填你的刚才获得的</span> <span class="string">app_id</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>重新<code>hexo g，hexo s</code>就能看到效果了。<br>安装成功后可以在DaoVoice控制台上的聊天设置里设置聊天窗口样式</li>
</ol>
<h1 id="文章阅读量"><a href="#文章阅读量" class="headerlink" title="文章阅读量"></a>文章阅读量</h1><ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGVhbmNsb3VkLmNuLw==" title="https://www.leancloud.cn/">leadCloud<i class="fa fa-external-link"></i></span>,登录注册</li>
<li>创建应用–&gt;开发板–&gt;创建</li>
<li>完成后点击设置–&gt;存储–&gt;新建Class–&gt;为了保证对NexT主题的修改兼容，新建Class名字必须为<code>Counter</code></li>
<li>Class创建完成后，选择界面最左侧的<code>设置</code> → <code>应用Key</code>，复制<code>App ID</code>和<code>App Key</code></li>
<li>打开<code>博客根目录/themes/next/</code>下的<code>_config.yml</code>，查找<code>leancloud</code>，填写复制来的<code>App ID</code>和<code>App Key</code>，重新生成、部署博客即可正常统计文章阅读量。</li>
<li>因为AppID以及AppKey是暴露在外的，为了确保只用于我们自己的博客，建议<strong>设置Web安全域名，填入自己的博客域名</strong>。</li>
</ol>
<ul>
<li><p>记录文章访问量的唯一标识符是文章的发布日期和文章的标题，因此请确保这两个数值组合的唯一性，如果更改了这两个数值，会造成文章阅读数值的清零重计。</p>
</li>
<li><p>初始的文章统计量显示为0。在配置好阅读量统计服务之后，第一次打开博文时，会自动向服务器发送数据，该数据会被记录在对应的应用的Counter表中。</p>
</li>
<li><p>修改Counter表中的time字段的数值，可以修改文章的访问量。双击具体的数值，修改之后回车即可保存。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的使用</title>
    <url>/2020/02/27/Hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<center>
<img src="https://i.loli.net/2020/02/28/Dgo5w9N6l8ikUvH.jpg
" style="zoom: 50%;"/>
Hexo 是一个快速、简洁且高效的博客框架
</center>
<a id="more"></a>

<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2luZGV4Lmh0bWw=" title="https://hexo.io/zh-cn/index.html">官方网址<i class="fa fa-external-link"></i></span></p>
<ul>
<li><p>安装：<code>npm install hexo-cli -g</code></p>
</li>
<li><p>本地初始化一个 blog：<code>hexo init blog</code></p>
</li>
<li><p>下载依赖：<code>npm install</code></p>
</li>
<li><p>开启本地服务：<code>hexo server</code>，输入<code>http://localhost:4000/</code>即可访问</p>
</li>
<li><p>显示 Hexo 版本:<code>hexo version</code></p>
</li>
<li><p>创建新文件：<code>$ hexo new [layout] &lt;title&gt;</code>,您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局</p>
</li>
<li><p>清除缓存文件 (db.json) 和已生成的静态文件 (public):<code>hexo clean</code></p>
</li>
<li><p>部署三连：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>
</li>
<li><p>创建文章：<code>hexo n 标题</code> 也可以在博客目录D:\hexo\source_posts中新建一个后缀为.md的文件</p>
</li>
<li><p>文章抬头信息</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title:  #文章标题</span><br><span class="line">date:  #时间，一般不用改</span><br><span class="line">categories:  #目录分类</span><br><span class="line">tags:</span><br><span class="line">  - Testing</span><br><span class="line">  - Another Tag</span><br><span class="line">keywords:  #文章关键词，多个关键词用英文逗号隔开</span><br><span class="line">comments: false  禁用评论</span><br></pre></td></tr></table></figure>

<ul>
<li>文章图片的存放</li>
</ul>
<p>想要在文章中插入图片的话，可以按照Markdown语法来插入。图片的存放有两种方式：在本地D:\Hexo\source\目录下新建一个存放图片的文件夹，比如images，然后把想要插入的图片放在里面，插入图片的路径；第二种方法是把图片上传到网络，然后插入图片路径。推荐使用第二种。</p>
<ul>
<li><p>可以选择喜欢的主题，我使用的是 next </p>
</li>
<li><p>如何设置「阅读全文」？在文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断，Hexo 提供的方式</p>
</li>
<li><p>文章内如果有双大括号，生成的时候会报错，hexo 会错认为是变量进行解析，解决办法可以在<code>{ {</code>中间加个空格就可以不解析</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
